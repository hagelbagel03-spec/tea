{"dependencies":[{"name":"./commons.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":67,"index":67}}],"key":"glGFVKq6JnHqcEVNii1WndfU66Y=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.decodePacket = void 0;\n  var _commons = require(_dependencyMap[0], \"./commons.js\");\n  const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n      return {\n        type: \"message\",\n        data: mapBinary(encodedPacket, binaryType)\n      };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n      const buffer = Buffer.from(encodedPacket.substring(1), \"base64\");\n      return {\n        type: \"message\",\n        data: mapBinary(buffer, binaryType)\n      };\n    }\n    if (!_commons.PACKET_TYPES_REVERSE[type]) {\n      return _commons.ERROR_PACKET;\n    }\n    return encodedPacket.length > 1 ? {\n      type: _commons.PACKET_TYPES_REVERSE[type],\n      data: encodedPacket.substring(1)\n    } : {\n      type: _commons.PACKET_TYPES_REVERSE[type]\n    };\n  };\n  exports.decodePacket = decodePacket;\n  const mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n      case \"arraybuffer\":\n        if (data instanceof ArrayBuffer) {\n          // from WebSocket & binaryType \"arraybuffer\"\n          return data;\n        } else if (Buffer.isBuffer(data)) {\n          // from HTTP long-polling\n          return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        } else {\n          // from WebTransport (Uint8Array)\n          return data.buffer;\n        }\n      case \"nodebuffer\":\n      default:\n        if (Buffer.isBuffer(data)) {\n          // from HTTP long-polling or WebSocket & binaryType \"nodebuffer\" (default)\n          return data;\n        } else {\n          // from WebTransport (Uint8Array)\n          return Buffer.from(data);\n        }\n    }\n  };\n});","lineCount":57,"map":[[6,2,1,0],[6,6,1,0,"_commons"],[6,14,1,0],[6,17,1,0,"require"],[6,24,1,0],[6,25,1,0,"_dependencyMap"],[6,39,1,0],[7,2,2,7],[7,8,2,13,"decodePacket"],[7,20,2,25],[7,23,2,28,"decodePacket"],[7,24,2,29,"encodedPacket"],[7,37,2,42],[7,39,2,44,"binaryType"],[7,49,2,54],[7,54,2,59],[8,4,3,4],[8,8,3,8],[8,15,3,15,"encodedPacket"],[8,28,3,28],[8,33,3,33],[8,41,3,41],[8,43,3,43],[9,6,4,8],[9,13,4,15],[10,8,5,12,"type"],[10,12,5,16],[10,14,5,18],[10,23,5,27],[11,8,6,12,"data"],[11,12,6,16],[11,14,6,18,"mapBinary"],[11,23,6,27],[11,24,6,28,"encodedPacket"],[11,37,6,41],[11,39,6,43,"binaryType"],[11,49,6,53],[12,6,7,8],[12,7,7,9],[13,4,8,4],[14,4,9,4],[14,10,9,10,"type"],[14,14,9,14],[14,17,9,17,"encodedPacket"],[14,30,9,30],[14,31,9,31,"charAt"],[14,37,9,37],[14,38,9,38],[14,39,9,39],[14,40,9,40],[15,4,10,4],[15,8,10,8,"type"],[15,12,10,12],[15,17,10,17],[15,20,10,20],[15,22,10,22],[16,6,11,8],[16,12,11,14,"buffer"],[16,18,11,20],[16,21,11,23,"Buffer"],[16,27,11,29],[16,28,11,30,"from"],[16,32,11,34],[16,33,11,35,"encodedPacket"],[16,46,11,48],[16,47,11,49,"substring"],[16,56,11,58],[16,57,11,59],[16,58,11,60],[16,59,11,61],[16,61,11,63],[16,69,11,71],[16,70,11,72],[17,6,12,8],[17,13,12,15],[18,8,13,12,"type"],[18,12,13,16],[18,14,13,18],[18,23,13,27],[19,8,14,12,"data"],[19,12,14,16],[19,14,14,18,"mapBinary"],[19,23,14,27],[19,24,14,28,"buffer"],[19,30,14,34],[19,32,14,36,"binaryType"],[19,42,14,46],[20,6,15,8],[20,7,15,9],[21,4,16,4],[22,4,17,4],[22,8,17,8],[22,9,17,9,"PACKET_TYPES_REVERSE"],[22,38,17,29],[22,39,17,30,"type"],[22,43,17,34],[22,44,17,35],[22,46,17,37],[23,6,18,8],[23,13,18,15,"ERROR_PACKET"],[23,34,18,27],[24,4,19,4],[25,4,20,4],[25,11,20,11,"encodedPacket"],[25,24,20,24],[25,25,20,25,"length"],[25,31,20,31],[25,34,20,34],[25,35,20,35],[25,38,21,10],[26,6,22,12,"type"],[26,10,22,16],[26,12,22,18,"PACKET_TYPES_REVERSE"],[26,41,22,38],[26,42,22,39,"type"],[26,46,22,43],[26,47,22,44],[27,6,23,12,"data"],[27,10,23,16],[27,12,23,18,"encodedPacket"],[27,25,23,31],[27,26,23,32,"substring"],[27,35,23,41],[27,36,23,42],[27,37,23,43],[28,4,24,8],[28,5,24,9],[28,8,25,10],[29,6,26,12,"type"],[29,10,26,16],[29,12,26,18,"PACKET_TYPES_REVERSE"],[29,41,26,38],[29,42,26,39,"type"],[29,46,26,43],[30,4,27,8],[30,5,27,9],[31,2,28,0],[31,3,28,1],[32,2,28,2,"exports"],[32,9,28,2],[32,10,28,2,"decodePacket"],[32,22,28,2],[32,25,28,2,"decodePacket"],[32,37,28,2],[33,2,29,0],[33,8,29,6,"mapBinary"],[33,17,29,15],[33,20,29,18,"mapBinary"],[33,21,29,19,"data"],[33,25,29,23],[33,27,29,25,"binaryType"],[33,37,29,35],[33,42,29,40],[34,4,30,4],[34,12,30,12,"binaryType"],[34,22,30,22],[35,6,31,8],[35,11,31,13],[35,24,31,26],[36,8,32,12],[36,12,32,16,"data"],[36,16,32,20],[36,28,32,32,"ArrayBuffer"],[36,39,32,43],[36,41,32,45],[37,10,33,16],[38,10,34,16],[38,17,34,23,"data"],[38,21,34,27],[39,8,35,12],[39,9,35,13],[39,15,36,17],[39,19,36,21,"Buffer"],[39,25,36,27],[39,26,36,28,"isBuffer"],[39,34,36,36],[39,35,36,37,"data"],[39,39,36,41],[39,40,36,42],[39,42,36,44],[40,10,37,16],[41,10,38,16],[41,17,38,23,"data"],[41,21,38,27],[41,22,38,28,"buffer"],[41,28,38,34],[41,29,38,35,"slice"],[41,34,38,40],[41,35,38,41,"data"],[41,39,38,45],[41,40,38,46,"byteOffset"],[41,50,38,56],[41,52,38,58,"data"],[41,56,38,62],[41,57,38,63,"byteOffset"],[41,67,38,73],[41,70,38,76,"data"],[41,74,38,80],[41,75,38,81,"byteLength"],[41,85,38,91],[41,86,38,92],[42,8,39,12],[42,9,39,13],[42,15,40,17],[43,10,41,16],[44,10,42,16],[44,17,42,23,"data"],[44,21,42,27],[44,22,42,28,"buffer"],[44,28,42,34],[45,8,43,12],[46,6,44,8],[46,11,44,13],[46,23,44,25],[47,6,45,8],[48,8,46,12],[48,12,46,16,"Buffer"],[48,18,46,22],[48,19,46,23,"isBuffer"],[48,27,46,31],[48,28,46,32,"data"],[48,32,46,36],[48,33,46,37],[48,35,46,39],[49,10,47,16],[50,10,48,16],[50,17,48,23,"data"],[50,21,48,27],[51,8,49,12],[51,9,49,13],[51,15,50,17],[52,10,51,16],[53,10,52,16],[53,17,52,23,"Buffer"],[53,23,52,29],[53,24,52,30,"from"],[53,28,52,34],[53,29,52,35,"data"],[53,33,52,39],[53,34,52,40],[54,8,53,12],[55,4,54,4],[56,2,55,0],[56,3,55,1],[57,0,55,2],[57,3]],"functionMap":{"names":["<global>","decodePacket","mapBinary"],"mappings":"AAA;4BCC;CD0B;kBEC;CF0B"}},"type":"js/module"}]}