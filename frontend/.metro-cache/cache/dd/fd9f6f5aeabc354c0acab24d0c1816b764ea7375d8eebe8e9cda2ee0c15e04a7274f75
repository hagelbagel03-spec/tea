{"dependencies":[{"name":"engine.io-client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"47uBFHNKf+pJCWjWFCflLVQYGvc=","exportNames":["*"]}},{"name":"./socket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":37,"index":124}}],"key":"eFXiJ3xGWi9z9IR2MpLa1oE6lVc=","exportNames":["*"]}},{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":43,"index":168}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"]}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":169},"end":{"line":4,"column":29,"index":198}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"]}},{"name":"./contrib/backo2.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":199},"end":{"line":5,"column":46,"index":245}}],"key":"+xoCajj5ZHxeBmv1nKLJe2m7TC8=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":246},"end":{"line":6,"column":56,"index":302}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Manager = void 0;\n  var _engine = require(_dependencyMap[0], \"engine.io-client\");\n  var _socket = require(_dependencyMap[1], \"./socket.js\");\n  var parser = _interopRequireWildcard(require(_dependencyMap[2], \"socket.io-parser\"));\n  var _on = require(_dependencyMap[3], \"./on.js\");\n  var _backo = require(_dependencyMap[4], \"./contrib/backo2.js\");\n  var _componentEmitter = require(_dependencyMap[5], \"@socket.io/component-emitter\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  class Manager extends _componentEmitter.Emitter {\n    constructor(uri, opts) {\n      var _a;\n      super();\n      this.nsps = {};\n      this.subs = [];\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = undefined;\n      }\n      opts = opts || {};\n      opts.path = opts.path || \"/socket.io\";\n      this.opts = opts;\n      (0, _engine.installTimerFunctions)(this, opts);\n      this.reconnection(opts.reconnection !== false);\n      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n      this.reconnectionDelay(opts.reconnectionDelay || 1000);\n      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n      this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n      this.backoff = new _backo.Backoff({\n        min: this.reconnectionDelay(),\n        max: this.reconnectionDelayMax(),\n        jitter: this.randomizationFactor()\n      });\n      this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n      this._readyState = \"closed\";\n      this.uri = uri;\n      const _parser = opts.parser || parser;\n      this.encoder = new _parser.Encoder();\n      this.decoder = new _parser.Decoder();\n      this._autoConnect = opts.autoConnect !== false;\n      if (this._autoConnect) this.open();\n    }\n    reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      if (!v) {\n        this.skipReconnect = true;\n      }\n      return this;\n    }\n    reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n    reconnectionDelay(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n    randomizationFactor(v) {\n      var _a;\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n    reconnectionDelayMax(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n    timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n      if (~this._readyState.indexOf(\"open\")) return this;\n      this.engine = new _engine.Socket(this.uri, this.opts);\n      const socket = this.engine;\n      const self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false;\n      // emit `open`\n      const openSubDestroy = (0, _on.on)(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      });\n      const onError = err => {\n        this.cleanup();\n        this._readyState = \"closed\";\n        this.emitReserved(\"error\", err);\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          this.maybeReconnectOnOpen();\n        }\n      };\n      // emit `error`\n      const errorSub = (0, _on.on)(socket, \"error\", onError);\n      if (false !== this._timeout) {\n        const timeout = this._timeout;\n        // set timer\n        const timer = this.setTimeoutFn(() => {\n          openSubDestroy();\n          onError(new Error(\"timeout\"));\n          socket.close();\n        }, timeout);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(() => {\n          this.clearTimeoutFn(timer);\n        });\n      }\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n      // clear old subs\n      this.cleanup();\n      // mark as open\n      this._readyState = \"open\";\n      this.emitReserved(\"open\");\n      // add new subs\n      const socket = this.engine;\n      this.subs.push((0, _on.on)(socket, \"ping\", this.onping.bind(this)), (0, _on.on)(socket, \"data\", this.ondata.bind(this)), (0, _on.on)(socket, \"error\", this.onerror.bind(this)), (0, _on.on)(socket, \"close\", this.onclose.bind(this)),\n      // @ts-ignore\n      (0, _on.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n      this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n      try {\n        this.decoder.add(data);\n      } catch (e) {\n        this.onclose(\"parse error\", e);\n      }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n      // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n      (0, _engine.nextTick)(() => {\n        this.emitReserved(\"packet\", packet);\n      }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n      this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n      let socket = this.nsps[nsp];\n      if (!socket) {\n        socket = new _socket.Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      } else if (this._autoConnect && !socket.active) {\n        socket.connect();\n      }\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n      const nsps = Object.keys(this.nsps);\n      for (const nsp of nsps) {\n        const socket = this.nsps[nsp];\n        if (socket.active) {\n          return;\n        }\n      }\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n      const encodedPackets = this.encoder.encode(packet);\n      for (let i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n      this.skipReconnect = true;\n      this._reconnecting = false;\n      this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n      return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n      var _a;\n      this.cleanup();\n      (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      this.emitReserved(\"close\", reason, description);\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n      if (this._reconnecting || this.skipReconnect) return this;\n      const self = this;\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        this.backoff.reset();\n        this.emitReserved(\"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        const delay = this.backoff.duration();\n        this._reconnecting = true;\n        const timer = this.setTimeoutFn(() => {\n          if (self.skipReconnect) return;\n          this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n          // check again for the case socket closed in above events\n          if (self.skipReconnect) return;\n          self.open(err => {\n            if (err) {\n              self._reconnecting = false;\n              self.reconnect();\n              this.emitReserved(\"reconnect_error\", err);\n            } else {\n              self.onreconnect();\n            }\n          });\n        }, delay);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(() => {\n          this.clearTimeoutFn(timer);\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n      const attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      this.emitReserved(\"reconnect\", attempt);\n    }\n  }\n  exports.Manager = Manager;\n});","lineCount":357,"map":[[6,2,1,0],[6,6,1,0,"_engine"],[6,13,1,0],[6,16,1,0,"require"],[6,23,1,0],[6,24,1,0,"_dependencyMap"],[6,38,1,0],[7,2,2,0],[7,6,2,0,"_socket"],[7,13,2,0],[7,16,2,0,"require"],[7,23,2,0],[7,24,2,0,"_dependencyMap"],[7,38,2,0],[8,2,3,0],[8,6,3,0,"parser"],[8,12,3,0],[8,15,3,0,"_interopRequireWildcard"],[8,38,3,0],[8,39,3,0,"require"],[8,46,3,0],[8,47,3,0,"_dependencyMap"],[8,61,3,0],[9,2,4,0],[9,6,4,0,"_on"],[9,9,4,0],[9,12,4,0,"require"],[9,19,4,0],[9,20,4,0,"_dependencyMap"],[9,34,4,0],[10,2,5,0],[10,6,5,0,"_backo"],[10,12,5,0],[10,15,5,0,"require"],[10,22,5,0],[10,23,5,0,"_dependencyMap"],[10,37,5,0],[11,2,6,0],[11,6,6,0,"_componentEmitter"],[11,23,6,0],[11,26,6,0,"require"],[11,33,6,0],[11,34,6,0,"_dependencyMap"],[11,48,6,0],[12,2,6,56],[12,11,6,56,"_interopRequireWildcard"],[12,35,6,56,"e"],[12,36,6,56],[12,38,6,56,"t"],[12,39,6,56],[12,68,6,56,"WeakMap"],[12,75,6,56],[12,81,6,56,"r"],[12,82,6,56],[12,89,6,56,"WeakMap"],[12,96,6,56],[12,100,6,56,"n"],[12,101,6,56],[12,108,6,56,"WeakMap"],[12,115,6,56],[12,127,6,56,"_interopRequireWildcard"],[12,150,6,56],[12,162,6,56,"_interopRequireWildcard"],[12,163,6,56,"e"],[12,164,6,56],[12,166,6,56,"t"],[12,167,6,56],[12,176,6,56,"t"],[12,177,6,56],[12,181,6,56,"e"],[12,182,6,56],[12,186,6,56,"e"],[12,187,6,56],[12,188,6,56,"__esModule"],[12,198,6,56],[12,207,6,56,"e"],[12,208,6,56],[12,214,6,56,"o"],[12,215,6,56],[12,217,6,56,"i"],[12,218,6,56],[12,220,6,56,"f"],[12,221,6,56],[12,226,6,56,"__proto__"],[12,235,6,56],[12,243,6,56,"default"],[12,250,6,56],[12,252,6,56,"e"],[12,253,6,56],[12,270,6,56,"e"],[12,271,6,56],[12,294,6,56,"e"],[12,295,6,56],[12,320,6,56,"e"],[12,321,6,56],[12,330,6,56,"f"],[12,331,6,56],[12,337,6,56,"o"],[12,338,6,56],[12,341,6,56,"t"],[12,342,6,56],[12,345,6,56,"n"],[12,346,6,56],[12,349,6,56,"r"],[12,350,6,56],[12,358,6,56,"o"],[12,359,6,56],[12,360,6,56,"has"],[12,363,6,56],[12,364,6,56,"e"],[12,365,6,56],[12,375,6,56,"o"],[12,376,6,56],[12,377,6,56,"get"],[12,380,6,56],[12,381,6,56,"e"],[12,382,6,56],[12,385,6,56,"o"],[12,386,6,56],[12,387,6,56,"set"],[12,390,6,56],[12,391,6,56,"e"],[12,392,6,56],[12,394,6,56,"f"],[12,395,6,56],[12,411,6,56,"t"],[12,412,6,56],[12,416,6,56,"e"],[12,417,6,56],[12,433,6,56,"t"],[12,434,6,56],[12,441,6,56,"hasOwnProperty"],[12,455,6,56],[12,456,6,56,"call"],[12,460,6,56],[12,461,6,56,"e"],[12,462,6,56],[12,464,6,56,"t"],[12,465,6,56],[12,472,6,56,"i"],[12,473,6,56],[12,477,6,56,"o"],[12,478,6,56],[12,481,6,56,"Object"],[12,487,6,56],[12,488,6,56,"defineProperty"],[12,502,6,56],[12,507,6,56,"Object"],[12,513,6,56],[12,514,6,56,"getOwnPropertyDescriptor"],[12,538,6,56],[12,539,6,56,"e"],[12,540,6,56],[12,542,6,56,"t"],[12,543,6,56],[12,550,6,56,"i"],[12,551,6,56],[12,552,6,56,"get"],[12,555,6,56],[12,559,6,56,"i"],[12,560,6,56],[12,561,6,56,"set"],[12,564,6,56],[12,568,6,56,"o"],[12,569,6,56],[12,570,6,56,"f"],[12,571,6,56],[12,573,6,56,"t"],[12,574,6,56],[12,576,6,56,"i"],[12,577,6,56],[12,581,6,56,"f"],[12,582,6,56],[12,583,6,56,"t"],[12,584,6,56],[12,588,6,56,"e"],[12,589,6,56],[12,590,6,56,"t"],[12,591,6,56],[12,602,6,56,"f"],[12,603,6,56],[12,608,6,56,"e"],[12,609,6,56],[12,611,6,56,"t"],[12,612,6,56],[13,2,7,7],[13,8,7,13,"Manager"],[13,15,7,20],[13,24,7,29,"Emitter"],[13,49,7,36],[13,50,7,37],[14,4,8,4,"constructor"],[14,15,8,15,"constructor"],[14,16,8,16,"uri"],[14,19,8,19],[14,21,8,21,"opts"],[14,25,8,25],[14,27,8,27],[15,6,9,8],[15,10,9,12,"_a"],[15,12,9,14],[16,6,10,8],[16,11,10,13],[16,12,10,14],[16,13,10,15],[17,6,11,8],[17,10,11,12],[17,11,11,13,"nsps"],[17,15,11,17],[17,18,11,20],[17,19,11,21],[17,20,11,22],[18,6,12,8],[18,10,12,12],[18,11,12,13,"subs"],[18,15,12,17],[18,18,12,20],[18,20,12,22],[19,6,13,8],[19,10,13,12,"uri"],[19,13,13,15],[19,17,13,19],[19,25,13,27],[19,30,13,32],[19,37,13,39,"uri"],[19,40,13,42],[19,42,13,44],[20,8,14,12,"opts"],[20,12,14,16],[20,15,14,19,"uri"],[20,18,14,22],[21,8,15,12,"uri"],[21,11,15,15],[21,14,15,18,"undefined"],[21,23,15,27],[22,6,16,8],[23,6,17,8,"opts"],[23,10,17,12],[23,13,17,15,"opts"],[23,17,17,19],[23,21,17,23],[23,22,17,24],[23,23,17,25],[24,6,18,8,"opts"],[24,10,18,12],[24,11,18,13,"path"],[24,15,18,17],[24,18,18,20,"opts"],[24,22,18,24],[24,23,18,25,"path"],[24,27,18,29],[24,31,18,33],[24,43,18,45],[25,6,19,8],[25,10,19,12],[25,11,19,13,"opts"],[25,15,19,17],[25,18,19,20,"opts"],[25,22,19,24],[26,6,20,8],[26,10,20,8,"installTimerFunctions"],[26,39,20,29],[26,41,20,30],[26,45,20,34],[26,47,20,36,"opts"],[26,51,20,40],[26,52,20,41],[27,6,21,8],[27,10,21,12],[27,11,21,13,"reconnection"],[27,23,21,25],[27,24,21,26,"opts"],[27,28,21,30],[27,29,21,31,"reconnection"],[27,41,21,43],[27,46,21,48],[27,51,21,53],[27,52,21,54],[28,6,22,8],[28,10,22,12],[28,11,22,13,"reconnectionAttempts"],[28,31,22,33],[28,32,22,34,"opts"],[28,36,22,38],[28,37,22,39,"reconnectionAttempts"],[28,57,22,59],[28,61,22,63,"Infinity"],[28,69,22,71],[28,70,22,72],[29,6,23,8],[29,10,23,12],[29,11,23,13,"reconnectionDelay"],[29,28,23,30],[29,29,23,31,"opts"],[29,33,23,35],[29,34,23,36,"reconnectionDelay"],[29,51,23,53],[29,55,23,57],[29,59,23,61],[29,60,23,62],[30,6,24,8],[30,10,24,12],[30,11,24,13,"reconnectionDelayMax"],[30,31,24,33],[30,32,24,34,"opts"],[30,36,24,38],[30,37,24,39,"reconnectionDelayMax"],[30,57,24,59],[30,61,24,63],[30,65,24,67],[30,66,24,68],[31,6,25,8],[31,10,25,12],[31,11,25,13,"randomizationFactor"],[31,30,25,32],[31,31,25,33],[31,32,25,34,"_a"],[31,34,25,36],[31,37,25,39,"opts"],[31,41,25,43],[31,42,25,44,"randomizationFactor"],[31,61,25,63],[31,67,25,69],[31,71,25,73],[31,75,25,77,"_a"],[31,77,25,79],[31,82,25,84],[31,87,25,89],[31,88,25,90],[31,91,25,93,"_a"],[31,93,25,95],[31,96,25,98],[31,99,25,101],[31,100,25,102],[32,6,26,8],[32,10,26,12],[32,11,26,13,"backoff"],[32,18,26,20],[32,21,26,23],[32,25,26,27,"Backoff"],[32,39,26,34],[32,40,26,35],[33,8,27,12,"min"],[33,11,27,15],[33,13,27,17],[33,17,27,21],[33,18,27,22,"reconnectionDelay"],[33,35,27,39],[33,36,27,40],[33,37,27,41],[34,8,28,12,"max"],[34,11,28,15],[34,13,28,17],[34,17,28,21],[34,18,28,22,"reconnectionDelayMax"],[34,38,28,42],[34,39,28,43],[34,40,28,44],[35,8,29,12,"jitter"],[35,14,29,18],[35,16,29,20],[35,20,29,24],[35,21,29,25,"randomizationFactor"],[35,40,29,44],[35,41,29,45],[36,6,30,8],[36,7,30,9],[36,8,30,10],[37,6,31,8],[37,10,31,12],[37,11,31,13,"timeout"],[37,18,31,20],[37,19,31,21],[37,23,31,25],[37,27,31,29,"opts"],[37,31,31,33],[37,32,31,34,"timeout"],[37,39,31,41],[37,42,31,44],[37,47,31,49],[37,50,31,52,"opts"],[37,54,31,56],[37,55,31,57,"timeout"],[37,62,31,64],[37,63,31,65],[38,6,32,8],[38,10,32,12],[38,11,32,13,"_readyState"],[38,22,32,24],[38,25,32,27],[38,33,32,35],[39,6,33,8],[39,10,33,12],[39,11,33,13,"uri"],[39,14,33,16],[39,17,33,19,"uri"],[39,20,33,22],[40,6,34,8],[40,12,34,14,"_parser"],[40,19,34,21],[40,22,34,24,"opts"],[40,26,34,28],[40,27,34,29,"parser"],[40,33,34,35],[40,37,34,39,"parser"],[40,43,34,45],[41,6,35,8],[41,10,35,12],[41,11,35,13,"encoder"],[41,18,35,20],[41,21,35,23],[41,25,35,27,"_parser"],[41,32,35,34],[41,33,35,35,"Encoder"],[41,40,35,42],[41,41,35,43],[41,42,35,44],[42,6,36,8],[42,10,36,12],[42,11,36,13,"decoder"],[42,18,36,20],[42,21,36,23],[42,25,36,27,"_parser"],[42,32,36,34],[42,33,36,35,"Decoder"],[42,40,36,42],[42,41,36,43],[42,42,36,44],[43,6,37,8],[43,10,37,12],[43,11,37,13,"_autoConnect"],[43,23,37,25],[43,26,37,28,"opts"],[43,30,37,32],[43,31,37,33,"autoConnect"],[43,42,37,44],[43,47,37,49],[43,52,37,54],[44,6,38,8],[44,10,38,12],[44,14,38,16],[44,15,38,17,"_autoConnect"],[44,27,38,29],[44,29,39,12],[44,33,39,16],[44,34,39,17,"open"],[44,38,39,21],[44,39,39,22],[44,40,39,23],[45,4,40,4],[46,4,41,4,"reconnection"],[46,16,41,16,"reconnection"],[46,17,41,17,"v"],[46,18,41,18],[46,20,41,20],[47,6,42,8],[47,10,42,12],[47,11,42,13,"arguments"],[47,20,42,22],[47,21,42,23,"length"],[47,27,42,29],[47,29,43,12],[47,36,43,19],[47,40,43,23],[47,41,43,24,"_reconnection"],[47,54,43,37],[48,6,44,8],[48,10,44,12],[48,11,44,13,"_reconnection"],[48,24,44,26],[48,27,44,29],[48,28,44,30],[48,29,44,31,"v"],[48,30,44,32],[49,6,45,8],[49,10,45,12],[49,11,45,13,"v"],[49,12,45,14],[49,14,45,16],[50,8,46,12],[50,12,46,16],[50,13,46,17,"skipReconnect"],[50,26,46,30],[50,29,46,33],[50,33,46,37],[51,6,47,8],[52,6,48,8],[52,13,48,15],[52,17,48,19],[53,4,49,4],[54,4,50,4,"reconnectionAttempts"],[54,24,50,24,"reconnectionAttempts"],[54,25,50,25,"v"],[54,26,50,26],[54,28,50,28],[55,6,51,8],[55,10,51,12,"v"],[55,11,51,13],[55,16,51,18,"undefined"],[55,25,51,27],[55,27,52,12],[55,34,52,19],[55,38,52,23],[55,39,52,24,"_reconnectionAttempts"],[55,60,52,45],[56,6,53,8],[56,10,53,12],[56,11,53,13,"_reconnectionAttempts"],[56,32,53,34],[56,35,53,37,"v"],[56,36,53,38],[57,6,54,8],[57,13,54,15],[57,17,54,19],[58,4,55,4],[59,4,56,4,"reconnectionDelay"],[59,21,56,21,"reconnectionDelay"],[59,22,56,22,"v"],[59,23,56,23],[59,25,56,25],[60,6,57,8],[60,10,57,12,"_a"],[60,12,57,14],[61,6,58,8],[61,10,58,12,"v"],[61,11,58,13],[61,16,58,18,"undefined"],[61,25,58,27],[61,27,59,12],[61,34,59,19],[61,38,59,23],[61,39,59,24,"_reconnectionDelay"],[61,57,59,42],[62,6,60,8],[62,10,60,12],[62,11,60,13,"_reconnectionDelay"],[62,29,60,31],[62,32,60,34,"v"],[62,33,60,35],[63,6,61,8],[63,7,61,9,"_a"],[63,9,61,11],[63,12,61,14],[63,16,61,18],[63,17,61,19,"backoff"],[63,24,61,26],[63,30,61,32],[63,34,61,36],[63,38,61,40,"_a"],[63,40,61,42],[63,45,61,47],[63,50,61,52],[63,51,61,53],[63,54,61,56],[63,59,61,61],[63,60,61,62],[63,63,61,65,"_a"],[63,65,61,67],[63,66,61,68,"setMin"],[63,72,61,74],[63,73,61,75,"v"],[63,74,61,76],[63,75,61,77],[64,6,62,8],[64,13,62,15],[64,17,62,19],[65,4,63,4],[66,4,64,4,"randomizationFactor"],[66,23,64,23,"randomizationFactor"],[66,24,64,24,"v"],[66,25,64,25],[66,27,64,27],[67,6,65,8],[67,10,65,12,"_a"],[67,12,65,14],[68,6,66,8],[68,10,66,12,"v"],[68,11,66,13],[68,16,66,18,"undefined"],[68,25,66,27],[68,27,67,12],[68,34,67,19],[68,38,67,23],[68,39,67,24,"_randomizationFactor"],[68,59,67,44],[69,6,68,8],[69,10,68,12],[69,11,68,13,"_randomizationFactor"],[69,31,68,33],[69,34,68,36,"v"],[69,35,68,37],[70,6,69,8],[70,7,69,9,"_a"],[70,9,69,11],[70,12,69,14],[70,16,69,18],[70,17,69,19,"backoff"],[70,24,69,26],[70,30,69,32],[70,34,69,36],[70,38,69,40,"_a"],[70,40,69,42],[70,45,69,47],[70,50,69,52],[70,51,69,53],[70,54,69,56],[70,59,69,61],[70,60,69,62],[70,63,69,65,"_a"],[70,65,69,67],[70,66,69,68,"setJitter"],[70,75,69,77],[70,76,69,78,"v"],[70,77,69,79],[70,78,69,80],[71,6,70,8],[71,13,70,15],[71,17,70,19],[72,4,71,4],[73,4,72,4,"reconnectionDelayMax"],[73,24,72,24,"reconnectionDelayMax"],[73,25,72,25,"v"],[73,26,72,26],[73,28,72,28],[74,6,73,8],[74,10,73,12,"_a"],[74,12,73,14],[75,6,74,8],[75,10,74,12,"v"],[75,11,74,13],[75,16,74,18,"undefined"],[75,25,74,27],[75,27,75,12],[75,34,75,19],[75,38,75,23],[75,39,75,24,"_reconnectionDelayMax"],[75,60,75,45],[76,6,76,8],[76,10,76,12],[76,11,76,13,"_reconnectionDelayMax"],[76,32,76,34],[76,35,76,37,"v"],[76,36,76,38],[77,6,77,8],[77,7,77,9,"_a"],[77,9,77,11],[77,12,77,14],[77,16,77,18],[77,17,77,19,"backoff"],[77,24,77,26],[77,30,77,32],[77,34,77,36],[77,38,77,40,"_a"],[77,40,77,42],[77,45,77,47],[77,50,77,52],[77,51,77,53],[77,54,77,56],[77,59,77,61],[77,60,77,62],[77,63,77,65,"_a"],[77,65,77,67],[77,66,77,68,"setMax"],[77,72,77,74],[77,73,77,75,"v"],[77,74,77,76],[77,75,77,77],[78,6,78,8],[78,13,78,15],[78,17,78,19],[79,4,79,4],[80,4,80,4,"timeout"],[80,11,80,11,"timeout"],[80,12,80,12,"v"],[80,13,80,13],[80,15,80,15],[81,6,81,8],[81,10,81,12],[81,11,81,13,"arguments"],[81,20,81,22],[81,21,81,23,"length"],[81,27,81,29],[81,29,82,12],[81,36,82,19],[81,40,82,23],[81,41,82,24,"_timeout"],[81,49,82,32],[82,6,83,8],[82,10,83,12],[82,11,83,13,"_timeout"],[82,19,83,21],[82,22,83,24,"v"],[82,23,83,25],[83,6,84,8],[83,13,84,15],[83,17,84,19],[84,4,85,4],[85,4,86,4],[86,0,87,0],[87,0,88,0],[88,0,89,0],[89,0,90,0],[90,0,91,0],[91,4,92,4,"maybeReconnectOnOpen"],[91,24,92,24,"maybeReconnectOnOpen"],[91,25,92,24],[91,27,92,27],[92,6,93,8],[93,6,94,8],[93,10,94,12],[93,11,94,13],[93,15,94,17],[93,16,94,18,"_reconnecting"],[93,29,94,31],[93,33,95,12],[93,37,95,16],[93,38,95,17,"_reconnection"],[93,51,95,30],[93,55,96,12],[93,59,96,16],[93,60,96,17,"backoff"],[93,67,96,24],[93,68,96,25,"attempts"],[93,76,96,33],[93,81,96,38],[93,82,96,39],[93,84,96,41],[94,8,97,12],[95,8,98,12],[95,12,98,16],[95,13,98,17,"reconnect"],[95,22,98,26],[95,23,98,27],[95,24,98,28],[96,6,99,8],[97,4,100,4],[98,4,101,4],[99,0,102,0],[100,0,103,0],[101,0,104,0],[102,0,105,0],[103,0,106,0],[104,0,107,0],[105,4,108,4,"open"],[105,8,108,8,"open"],[105,9,108,9,"fn"],[105,11,108,11],[105,13,108,13],[106,6,109,8],[106,10,109,12],[106,11,109,13],[106,15,109,17],[106,16,109,18,"_readyState"],[106,27,109,29],[106,28,109,30,"indexOf"],[106,35,109,37],[106,36,109,38],[106,42,109,44],[106,43,109,45],[106,45,110,12],[106,52,110,19],[106,56,110,23],[107,6,111,8],[107,10,111,12],[107,11,111,13,"engine"],[107,17,111,19],[107,20,111,22],[107,24,111,26,"Engine"],[107,38,111,32],[107,39,111,33],[107,43,111,37],[107,44,111,38,"uri"],[107,47,111,41],[107,49,111,43],[107,53,111,47],[107,54,111,48,"opts"],[107,58,111,52],[107,59,111,53],[108,6,112,8],[108,12,112,14,"socket"],[108,18,112,20],[108,21,112,23],[108,25,112,27],[108,26,112,28,"engine"],[108,32,112,34],[109,6,113,8],[109,12,113,14,"self"],[109,16,113,18],[109,19,113,21],[109,23,113,25],[110,6,114,8],[110,10,114,12],[110,11,114,13,"_readyState"],[110,22,114,24],[110,25,114,27],[110,34,114,36],[111,6,115,8],[111,10,115,12],[111,11,115,13,"skipReconnect"],[111,24,115,26],[111,27,115,29],[111,32,115,34],[112,6,116,8],[113,6,117,8],[113,12,117,14,"openSubDestroy"],[113,26,117,28],[113,29,117,31],[113,33,117,31,"on"],[113,39,117,33],[113,41,117,34,"socket"],[113,47,117,40],[113,49,117,42],[113,55,117,48],[113,57,117,50],[113,69,117,62],[114,8,118,12,"self"],[114,12,118,16],[114,13,118,17,"onopen"],[114,19,118,23],[114,20,118,24],[114,21,118,25],[115,8,119,12,"fn"],[115,10,119,14],[115,14,119,18,"fn"],[115,16,119,20],[115,17,119,21],[115,18,119,22],[116,6,120,8],[116,7,120,9],[116,8,120,10],[117,6,121,8],[117,12,121,14,"onError"],[117,19,121,21],[117,22,121,25,"err"],[117,25,121,28],[117,29,121,33],[118,8,122,12],[118,12,122,16],[118,13,122,17,"cleanup"],[118,20,122,24],[118,21,122,25],[118,22,122,26],[119,8,123,12],[119,12,123,16],[119,13,123,17,"_readyState"],[119,24,123,28],[119,27,123,31],[119,35,123,39],[120,8,124,12],[120,12,124,16],[120,13,124,17,"emitReserved"],[120,25,124,29],[120,26,124,30],[120,33,124,37],[120,35,124,39,"err"],[120,38,124,42],[120,39,124,43],[121,8,125,12],[121,12,125,16,"fn"],[121,14,125,18],[121,16,125,20],[122,10,126,16,"fn"],[122,12,126,18],[122,13,126,19,"err"],[122,16,126,22],[122,17,126,23],[123,8,127,12],[123,9,127,13],[123,15,128,17],[124,10,129,16],[125,10,130,16],[125,14,130,20],[125,15,130,21,"maybeReconnectOnOpen"],[125,35,130,41],[125,36,130,42],[125,37,130,43],[126,8,131,12],[127,6,132,8],[127,7,132,9],[128,6,133,8],[129,6,134,8],[129,12,134,14,"errorSub"],[129,20,134,22],[129,23,134,25],[129,27,134,25,"on"],[129,33,134,27],[129,35,134,28,"socket"],[129,41,134,34],[129,43,134,36],[129,50,134,43],[129,52,134,45,"onError"],[129,59,134,52],[129,60,134,53],[130,6,135,8],[130,10,135,12],[130,15,135,17],[130,20,135,22],[130,24,135,26],[130,25,135,27,"_timeout"],[130,33,135,35],[130,35,135,37],[131,8,136,12],[131,14,136,18,"timeout"],[131,21,136,25],[131,24,136,28],[131,28,136,32],[131,29,136,33,"_timeout"],[131,37,136,41],[132,8,137,12],[133,8,138,12],[133,14,138,18,"timer"],[133,19,138,23],[133,22,138,26],[133,26,138,30],[133,27,138,31,"setTimeoutFn"],[133,39,138,43],[133,40,138,44],[133,46,138,50],[134,10,139,16,"openSubDestroy"],[134,24,139,30],[134,25,139,31],[134,26,139,32],[135,10,140,16,"onError"],[135,17,140,23],[135,18,140,24],[135,22,140,28,"Error"],[135,27,140,33],[135,28,140,34],[135,37,140,43],[135,38,140,44],[135,39,140,45],[136,10,141,16,"socket"],[136,16,141,22],[136,17,141,23,"close"],[136,22,141,28],[136,23,141,29],[136,24,141,30],[137,8,142,12],[137,9,142,13],[137,11,142,15,"timeout"],[137,18,142,22],[137,19,142,23],[138,8,143,12],[138,12,143,16],[138,16,143,20],[138,17,143,21,"opts"],[138,21,143,25],[138,22,143,26,"autoUnref"],[138,31,143,35],[138,33,143,37],[139,10,144,16,"timer"],[139,15,144,21],[139,16,144,22,"unref"],[139,21,144,27],[139,22,144,28],[139,23,144,29],[140,8,145,12],[141,8,146,12],[141,12,146,16],[141,13,146,17,"subs"],[141,17,146,21],[141,18,146,22,"push"],[141,22,146,26],[141,23,146,27],[141,29,146,33],[142,10,147,16],[142,14,147,20],[142,15,147,21,"clearTimeoutFn"],[142,29,147,35],[142,30,147,36,"timer"],[142,35,147,41],[142,36,147,42],[143,8,148,12],[143,9,148,13],[143,10,148,14],[144,6,149,8],[145,6,150,8],[145,10,150,12],[145,11,150,13,"subs"],[145,15,150,17],[145,16,150,18,"push"],[145,20,150,22],[145,21,150,23,"openSubDestroy"],[145,35,150,37],[145,36,150,38],[146,6,151,8],[146,10,151,12],[146,11,151,13,"subs"],[146,15,151,17],[146,16,151,18,"push"],[146,20,151,22],[146,21,151,23,"errorSub"],[146,29,151,31],[146,30,151,32],[147,6,152,8],[147,13,152,15],[147,17,152,19],[148,4,153,4],[149,4,154,4],[150,0,155,0],[151,0,156,0],[152,0,157,0],[153,0,158,0],[154,0,159,0],[155,4,160,4,"connect"],[155,11,160,11,"connect"],[155,12,160,12,"fn"],[155,14,160,14],[155,16,160,16],[156,6,161,8],[156,13,161,15],[156,17,161,19],[156,18,161,20,"open"],[156,22,161,24],[156,23,161,25,"fn"],[156,25,161,27],[156,26,161,28],[157,4,162,4],[158,4,163,4],[159,0,164,0],[160,0,165,0],[161,0,166,0],[162,0,167,0],[163,4,168,4,"onopen"],[163,10,168,10,"onopen"],[163,11,168,10],[163,13,168,13],[164,6,169,8],[165,6,170,8],[165,10,170,12],[165,11,170,13,"cleanup"],[165,18,170,20],[165,19,170,21],[165,20,170,22],[166,6,171,8],[167,6,172,8],[167,10,172,12],[167,11,172,13,"_readyState"],[167,22,172,24],[167,25,172,27],[167,31,172,33],[168,6,173,8],[168,10,173,12],[168,11,173,13,"emitReserved"],[168,23,173,25],[168,24,173,26],[168,30,173,32],[168,31,173,33],[169,6,174,8],[170,6,175,8],[170,12,175,14,"socket"],[170,18,175,20],[170,21,175,23],[170,25,175,27],[170,26,175,28,"engine"],[170,32,175,34],[171,6,176,8],[171,10,176,12],[171,11,176,13,"subs"],[171,15,176,17],[171,16,176,18,"push"],[171,20,176,22],[171,21,176,23],[171,25,176,23,"on"],[171,31,176,25],[171,33,176,26,"socket"],[171,39,176,32],[171,41,176,34],[171,47,176,40],[171,49,176,42],[171,53,176,46],[171,54,176,47,"onping"],[171,60,176,53],[171,61,176,54,"bind"],[171,65,176,58],[171,66,176,59],[171,70,176,63],[171,71,176,64],[171,72,176,65],[171,74,176,67],[171,78,176,67,"on"],[171,84,176,69],[171,86,176,70,"socket"],[171,92,176,76],[171,94,176,78],[171,100,176,84],[171,102,176,86],[171,106,176,90],[171,107,176,91,"ondata"],[171,113,176,97],[171,114,176,98,"bind"],[171,118,176,102],[171,119,176,103],[171,123,176,107],[171,124,176,108],[171,125,176,109],[171,127,176,111],[171,131,176,111,"on"],[171,137,176,113],[171,139,176,114,"socket"],[171,145,176,120],[171,147,176,122],[171,154,176,129],[171,156,176,131],[171,160,176,135],[171,161,176,136,"onerror"],[171,168,176,143],[171,169,176,144,"bind"],[171,173,176,148],[171,174,176,149],[171,178,176,153],[171,179,176,154],[171,180,176,155],[171,182,176,157],[171,186,176,157,"on"],[171,192,176,159],[171,194,176,160,"socket"],[171,200,176,166],[171,202,176,168],[171,209,176,175],[171,211,176,177],[171,215,176,181],[171,216,176,182,"onclose"],[171,223,176,189],[171,224,176,190,"bind"],[171,228,176,194],[171,229,176,195],[171,233,176,199],[171,234,176,200],[171,235,176,201],[172,6,177,8],[173,6,178,8],[173,10,178,8,"on"],[173,16,178,10],[173,18,178,11],[173,22,178,15],[173,23,178,16,"decoder"],[173,30,178,23],[173,32,178,25],[173,41,178,34],[173,43,178,36],[173,47,178,40],[173,48,178,41,"ondecoded"],[173,57,178,50],[173,58,178,51,"bind"],[173,62,178,55],[173,63,178,56],[173,67,178,60],[173,68,178,61],[173,69,178,62],[173,70,178,63],[174,4,179,4],[175,4,180,4],[176,0,181,0],[177,0,182,0],[178,0,183,0],[179,0,184,0],[180,4,185,4,"onping"],[180,10,185,10,"onping"],[180,11,185,10],[180,13,185,13],[181,6,186,8],[181,10,186,12],[181,11,186,13,"emitReserved"],[181,23,186,25],[181,24,186,26],[181,30,186,32],[181,31,186,33],[182,4,187,4],[183,4,188,4],[184,0,189,0],[185,0,190,0],[186,0,191,0],[187,0,192,0],[188,4,193,4,"ondata"],[188,10,193,10,"ondata"],[188,11,193,11,"data"],[188,15,193,15],[188,17,193,17],[189,6,194,8],[189,10,194,12],[190,8,195,12],[190,12,195,16],[190,13,195,17,"decoder"],[190,20,195,24],[190,21,195,25,"add"],[190,24,195,28],[190,25,195,29,"data"],[190,29,195,33],[190,30,195,34],[191,6,196,8],[191,7,196,9],[191,8,197,8],[191,15,197,15,"e"],[191,16,197,16],[191,18,197,18],[192,8,198,12],[192,12,198,16],[192,13,198,17,"onclose"],[192,20,198,24],[192,21,198,25],[192,34,198,38],[192,36,198,40,"e"],[192,37,198,41],[192,38,198,42],[193,6,199,8],[194,4,200,4],[195,4,201,4],[196,0,202,0],[197,0,203,0],[198,0,204,0],[199,0,205,0],[200,4,206,4,"ondecoded"],[200,13,206,13,"ondecoded"],[200,14,206,14,"packet"],[200,20,206,20],[200,22,206,22],[201,6,207,8],[202,6,208,8],[202,10,208,8,"nextTick"],[202,26,208,16],[202,28,208,17],[202,34,208,23],[203,8,209,12],[203,12,209,16],[203,13,209,17,"emitReserved"],[203,25,209,29],[203,26,209,30],[203,34,209,38],[203,36,209,40,"packet"],[203,42,209,46],[203,43,209,47],[204,6,210,8],[204,7,210,9],[204,9,210,11],[204,13,210,15],[204,14,210,16,"setTimeoutFn"],[204,26,210,28],[204,27,210,29],[205,4,211,4],[206,4,212,4],[207,0,213,0],[208,0,214,0],[209,0,215,0],[210,0,216,0],[211,4,217,4,"onerror"],[211,11,217,11,"onerror"],[211,12,217,12,"err"],[211,15,217,15],[211,17,217,17],[212,6,218,8],[212,10,218,12],[212,11,218,13,"emitReserved"],[212,23,218,25],[212,24,218,26],[212,31,218,33],[212,33,218,35,"err"],[212,36,218,38],[212,37,218,39],[213,4,219,4],[214,4,220,4],[215,0,221,0],[216,0,222,0],[217,0,223,0],[218,0,224,0],[219,0,225,0],[220,4,226,4,"socket"],[220,10,226,10,"socket"],[220,11,226,11,"nsp"],[220,14,226,14],[220,16,226,16,"opts"],[220,20,226,20],[220,22,226,22],[221,6,227,8],[221,10,227,12,"socket"],[221,16,227,18],[221,19,227,21],[221,23,227,25],[221,24,227,26,"nsps"],[221,28,227,30],[221,29,227,31,"nsp"],[221,32,227,34],[221,33,227,35],[222,6,228,8],[222,10,228,12],[222,11,228,13,"socket"],[222,17,228,19],[222,19,228,21],[223,8,229,12,"socket"],[223,14,229,18],[223,17,229,21],[223,21,229,25,"Socket"],[223,35,229,31],[223,36,229,32],[223,40,229,36],[223,42,229,38,"nsp"],[223,45,229,41],[223,47,229,43,"opts"],[223,51,229,47],[223,52,229,48],[224,8,230,12],[224,12,230,16],[224,13,230,17,"nsps"],[224,17,230,21],[224,18,230,22,"nsp"],[224,21,230,25],[224,22,230,26],[224,25,230,29,"socket"],[224,31,230,35],[225,6,231,8],[225,7,231,9],[225,13,232,13],[225,17,232,17],[225,21,232,21],[225,22,232,22,"_autoConnect"],[225,34,232,34],[225,38,232,38],[225,39,232,39,"socket"],[225,45,232,45],[225,46,232,46,"active"],[225,52,232,52],[225,54,232,54],[226,8,233,12,"socket"],[226,14,233,18],[226,15,233,19,"connect"],[226,22,233,26],[226,23,233,27],[226,24,233,28],[227,6,234,8],[228,6,235,8],[228,13,235,15,"socket"],[228,19,235,21],[229,4,236,4],[230,4,237,4],[231,0,238,0],[232,0,239,0],[233,0,240,0],[234,0,241,0],[235,0,242,0],[236,4,243,4,"_destroy"],[236,12,243,12,"_destroy"],[236,13,243,13,"socket"],[236,19,243,19],[236,21,243,21],[237,6,244,8],[237,12,244,14,"nsps"],[237,16,244,18],[237,19,244,21,"Object"],[237,25,244,27],[237,26,244,28,"keys"],[237,30,244,32],[237,31,244,33],[237,35,244,37],[237,36,244,38,"nsps"],[237,40,244,42],[237,41,244,43],[238,6,245,8],[238,11,245,13],[238,17,245,19,"nsp"],[238,20,245,22],[238,24,245,26,"nsps"],[238,28,245,30],[238,30,245,32],[239,8,246,12],[239,14,246,18,"socket"],[239,20,246,24],[239,23,246,27],[239,27,246,31],[239,28,246,32,"nsps"],[239,32,246,36],[239,33,246,37,"nsp"],[239,36,246,40],[239,37,246,41],[240,8,247,12],[240,12,247,16,"socket"],[240,18,247,22],[240,19,247,23,"active"],[240,25,247,29],[240,27,247,31],[241,10,248,16],[242,8,249,12],[243,6,250,8],[244,6,251,8],[244,10,251,12],[244,11,251,13,"_close"],[244,17,251,19],[244,18,251,20],[244,19,251,21],[245,4,252,4],[246,4,253,4],[247,0,254,0],[248,0,255,0],[249,0,256,0],[250,0,257,0],[251,0,258,0],[252,4,259,4,"_packet"],[252,11,259,11,"_packet"],[252,12,259,12,"packet"],[252,18,259,18],[252,20,259,20],[253,6,260,8],[253,12,260,14,"encodedPackets"],[253,26,260,28],[253,29,260,31],[253,33,260,35],[253,34,260,36,"encoder"],[253,41,260,43],[253,42,260,44,"encode"],[253,48,260,50],[253,49,260,51,"packet"],[253,55,260,57],[253,56,260,58],[254,6,261,8],[254,11,261,13],[254,15,261,17,"i"],[254,16,261,18],[254,19,261,21],[254,20,261,22],[254,22,261,24,"i"],[254,23,261,25],[254,26,261,28,"encodedPackets"],[254,40,261,42],[254,41,261,43,"length"],[254,47,261,49],[254,49,261,51,"i"],[254,50,261,52],[254,52,261,54],[254,54,261,56],[255,8,262,12],[255,12,262,16],[255,13,262,17,"engine"],[255,19,262,23],[255,20,262,24,"write"],[255,25,262,29],[255,26,262,30,"encodedPackets"],[255,40,262,44],[255,41,262,45,"i"],[255,42,262,46],[255,43,262,47],[255,45,262,49,"packet"],[255,51,262,55],[255,52,262,56,"options"],[255,59,262,63],[255,60,262,64],[256,6,263,8],[257,4,264,4],[258,4,265,4],[259,0,266,0],[260,0,267,0],[261,0,268,0],[262,0,269,0],[263,4,270,4,"cleanup"],[263,11,270,11,"cleanup"],[263,12,270,11],[263,14,270,14],[264,6,271,8],[264,10,271,12],[264,11,271,13,"subs"],[264,15,271,17],[264,16,271,18,"forEach"],[264,23,271,25],[264,24,271,27,"subDestroy"],[264,34,271,37],[264,38,271,42,"subDestroy"],[264,48,271,52],[264,49,271,53],[264,50,271,54],[264,51,271,55],[265,6,272,8],[265,10,272,12],[265,11,272,13,"subs"],[265,15,272,17],[265,16,272,18,"length"],[265,22,272,24],[265,25,272,27],[265,26,272,28],[266,6,273,8],[266,10,273,12],[266,11,273,13,"decoder"],[266,18,273,20],[266,19,273,21,"destroy"],[266,26,273,28],[266,27,273,29],[266,28,273,30],[267,4,274,4],[268,4,275,4],[269,0,276,0],[270,0,277,0],[271,0,278,0],[272,0,279,0],[273,4,280,4,"_close"],[273,10,280,10,"_close"],[273,11,280,10],[273,13,280,13],[274,6,281,8],[274,10,281,12],[274,11,281,13,"skipReconnect"],[274,24,281,26],[274,27,281,29],[274,31,281,33],[275,6,282,8],[275,10,282,12],[275,11,282,13,"_reconnecting"],[275,24,282,26],[275,27,282,29],[275,32,282,34],[276,6,283,8],[276,10,283,12],[276,11,283,13,"onclose"],[276,18,283,20],[276,19,283,21],[276,33,283,35],[276,34,283,36],[277,4,284,4],[278,4,285,4],[279,0,286,0],[280,0,287,0],[281,0,288,0],[282,0,289,0],[283,4,290,4,"disconnect"],[283,14,290,14,"disconnect"],[283,15,290,14],[283,17,290,17],[284,6,291,8],[284,13,291,15],[284,17,291,19],[284,18,291,20,"_close"],[284,24,291,26],[284,25,291,27],[284,26,291,28],[285,4,292,4],[286,4,293,4],[287,0,294,0],[288,0,295,0],[289,0,296,0],[290,0,297,0],[291,0,298,0],[292,0,299,0],[293,0,300,0],[294,0,301,0],[295,4,302,4,"onclose"],[295,11,302,11,"onclose"],[295,12,302,12,"reason"],[295,18,302,18],[295,20,302,20,"description"],[295,31,302,31],[295,33,302,33],[296,6,303,8],[296,10,303,12,"_a"],[296,12,303,14],[297,6,304,8],[297,10,304,12],[297,11,304,13,"cleanup"],[297,18,304,20],[297,19,304,21],[297,20,304,22],[298,6,305,8],[298,7,305,9,"_a"],[298,9,305,11],[298,12,305,14],[298,16,305,18],[298,17,305,19,"engine"],[298,23,305,25],[298,29,305,31],[298,33,305,35],[298,37,305,39,"_a"],[298,39,305,41],[298,44,305,46],[298,49,305,51],[298,50,305,52],[298,53,305,55],[298,58,305,60],[298,59,305,61],[298,62,305,64,"_a"],[298,64,305,66],[298,65,305,67,"close"],[298,70,305,72],[298,71,305,73],[298,72,305,74],[299,6,306,8],[299,10,306,12],[299,11,306,13,"backoff"],[299,18,306,20],[299,19,306,21,"reset"],[299,24,306,26],[299,25,306,27],[299,26,306,28],[300,6,307,8],[300,10,307,12],[300,11,307,13,"_readyState"],[300,22,307,24],[300,25,307,27],[300,33,307,35],[301,6,308,8],[301,10,308,12],[301,11,308,13,"emitReserved"],[301,23,308,25],[301,24,308,26],[301,31,308,33],[301,33,308,35,"reason"],[301,39,308,41],[301,41,308,43,"description"],[301,52,308,54],[301,53,308,55],[302,6,309,8],[302,10,309,12],[302,14,309,16],[302,15,309,17,"_reconnection"],[302,28,309,30],[302,32,309,34],[302,33,309,35],[302,37,309,39],[302,38,309,40,"skipReconnect"],[302,51,309,53],[302,53,309,55],[303,8,310,12],[303,12,310,16],[303,13,310,17,"reconnect"],[303,22,310,26],[303,23,310,27],[303,24,310,28],[304,6,311,8],[305,4,312,4],[306,4,313,4],[307,0,314,0],[308,0,315,0],[309,0,316,0],[310,0,317,0],[311,4,318,4,"reconnect"],[311,13,318,13,"reconnect"],[311,14,318,13],[311,16,318,16],[312,6,319,8],[312,10,319,12],[312,14,319,16],[312,15,319,17,"_reconnecting"],[312,28,319,30],[312,32,319,34],[312,36,319,38],[312,37,319,39,"skipReconnect"],[312,50,319,52],[312,52,320,12],[312,59,320,19],[312,63,320,23],[313,6,321,8],[313,12,321,14,"self"],[313,16,321,18],[313,19,321,21],[313,23,321,25],[314,6,322,8],[314,10,322,12],[314,14,322,16],[314,15,322,17,"backoff"],[314,22,322,24],[314,23,322,25,"attempts"],[314,31,322,33],[314,35,322,37],[314,39,322,41],[314,40,322,42,"_reconnectionAttempts"],[314,61,322,63],[314,63,322,65],[315,8,323,12],[315,12,323,16],[315,13,323,17,"backoff"],[315,20,323,24],[315,21,323,25,"reset"],[315,26,323,30],[315,27,323,31],[315,28,323,32],[316,8,324,12],[316,12,324,16],[316,13,324,17,"emitReserved"],[316,25,324,29],[316,26,324,30],[316,44,324,48],[316,45,324,49],[317,8,325,12],[317,12,325,16],[317,13,325,17,"_reconnecting"],[317,26,325,30],[317,29,325,33],[317,34,325,38],[318,6,326,8],[318,7,326,9],[318,13,327,13],[319,8,328,12],[319,14,328,18,"delay"],[319,19,328,23],[319,22,328,26],[319,26,328,30],[319,27,328,31,"backoff"],[319,34,328,38],[319,35,328,39,"duration"],[319,43,328,47],[319,44,328,48],[319,45,328,49],[320,8,329,12],[320,12,329,16],[320,13,329,17,"_reconnecting"],[320,26,329,30],[320,29,329,33],[320,33,329,37],[321,8,330,12],[321,14,330,18,"timer"],[321,19,330,23],[321,22,330,26],[321,26,330,30],[321,27,330,31,"setTimeoutFn"],[321,39,330,43],[321,40,330,44],[321,46,330,50],[322,10,331,16],[322,14,331,20,"self"],[322,18,331,24],[322,19,331,25,"skipReconnect"],[322,32,331,38],[322,34,332,20],[323,10,333,16],[323,14,333,20],[323,15,333,21,"emitReserved"],[323,27,333,33],[323,28,333,34],[323,47,333,53],[323,49,333,55,"self"],[323,53,333,59],[323,54,333,60,"backoff"],[323,61,333,67],[323,62,333,68,"attempts"],[323,70,333,76],[323,71,333,77],[324,10,334,16],[325,10,335,16],[325,14,335,20,"self"],[325,18,335,24],[325,19,335,25,"skipReconnect"],[325,32,335,38],[325,34,336,20],[326,10,337,16,"self"],[326,14,337,20],[326,15,337,21,"open"],[326,19,337,25],[326,20,337,27,"err"],[326,23,337,30],[326,27,337,35],[327,12,338,20],[327,16,338,24,"err"],[327,19,338,27],[327,21,338,29],[328,14,339,24,"self"],[328,18,339,28],[328,19,339,29,"_reconnecting"],[328,32,339,42],[328,35,339,45],[328,40,339,50],[329,14,340,24,"self"],[329,18,340,28],[329,19,340,29,"reconnect"],[329,28,340,38],[329,29,340,39],[329,30,340,40],[330,14,341,24],[330,18,341,28],[330,19,341,29,"emitReserved"],[330,31,341,41],[330,32,341,42],[330,49,341,59],[330,51,341,61,"err"],[330,54,341,64],[330,55,341,65],[331,12,342,20],[331,13,342,21],[331,19,343,25],[332,14,344,24,"self"],[332,18,344,28],[332,19,344,29,"onreconnect"],[332,30,344,40],[332,31,344,41],[332,32,344,42],[333,12,345,20],[334,10,346,16],[334,11,346,17],[334,12,346,18],[335,8,347,12],[335,9,347,13],[335,11,347,15,"delay"],[335,16,347,20],[335,17,347,21],[336,8,348,12],[336,12,348,16],[336,16,348,20],[336,17,348,21,"opts"],[336,21,348,25],[336,22,348,26,"autoUnref"],[336,31,348,35],[336,33,348,37],[337,10,349,16,"timer"],[337,15,349,21],[337,16,349,22,"unref"],[337,21,349,27],[337,22,349,28],[337,23,349,29],[338,8,350,12],[339,8,351,12],[339,12,351,16],[339,13,351,17,"subs"],[339,17,351,21],[339,18,351,22,"push"],[339,22,351,26],[339,23,351,27],[339,29,351,33],[340,10,352,16],[340,14,352,20],[340,15,352,21,"clearTimeoutFn"],[340,29,352,35],[340,30,352,36,"timer"],[340,35,352,41],[340,36,352,42],[341,8,353,12],[341,9,353,13],[341,10,353,14],[342,6,354,8],[343,4,355,4],[344,4,356,4],[345,0,357,0],[346,0,358,0],[347,0,359,0],[348,0,360,0],[349,4,361,4,"onreconnect"],[349,15,361,15,"onreconnect"],[349,16,361,15],[349,18,361,18],[350,6,362,8],[350,12,362,14,"attempt"],[350,19,362,21],[350,22,362,24],[350,26,362,28],[350,27,362,29,"backoff"],[350,34,362,36],[350,35,362,37,"attempts"],[350,43,362,45],[351,6,363,8],[351,10,363,12],[351,11,363,13,"_reconnecting"],[351,24,363,26],[351,27,363,29],[351,32,363,34],[352,6,364,8],[352,10,364,12],[352,11,364,13,"backoff"],[352,18,364,20],[352,19,364,21,"reset"],[352,24,364,26],[352,25,364,27],[352,26,364,28],[353,6,365,8],[353,10,365,12],[353,11,365,13,"emitReserved"],[353,23,365,25],[353,24,365,26],[353,35,365,37],[353,37,365,39,"attempt"],[353,44,365,46],[353,45,365,47],[354,4,366,4],[355,2,367,0],[356,2,367,1,"exports"],[356,9,367,1],[356,10,367,1,"Manager"],[356,17,367,1],[356,20,367,1,"Manager"],[356,27,367,1],[357,0,367,1],[357,3]],"functionMap":{"names":["<global>","Manager","Manager#constructor","Manager#reconnection","Manager#reconnectionAttempts","Manager#reconnectionDelay","Manager#randomizationFactor","Manager#reconnectionDelayMax","Manager#timeout","Manager#maybeReconnectOnOpen","Manager#open","on$argument_2","onError","setTimeoutFn$argument_0","subs.push$argument_0","Manager#connect","Manager#onopen","Manager#onping","Manager#ondata","Manager#ondecoded","nextTick$argument_0","Manager#onerror","Manager#socket","Manager#_destroy","Manager#_packet","Manager#cleanup","subs.forEach$argument_0","Manager#_close","Manager#disconnect","Manager#onclose","Manager#reconnect","self.open$argument_0","Manager#onreconnect"],"mappings":"AAA;OCM;ICC;KDgC;IEC;KFQ;IGC;KHK;IIC;KJO;IKC;KLO;IMC;KNO;IOC;KPK;IQO;KRQ;ISQ;kDCS;SDG;wBEC;SFW;4CGM;aHI;2BII;aJE;KTK;IcO;KdE;IeM;KfW;IgBM;KhBE;IiBM;KjBO;IkBM;iBCE;SDE;KlBC;IoBM;KpBE;IqBO;KrBU;IsBO;KtBS;IuBO;KvBK;IwBM;0BCC,4BD;KxBG;I0BM;K1BI;I2BM;K3BE;I4BU;K5BU;I6BM;4CjBY;0BkBO;iBlBS;aiBC;2BhBI;agBE;K7BE;I+BM;K/BK;CDC"}},"type":"js/module"}]}