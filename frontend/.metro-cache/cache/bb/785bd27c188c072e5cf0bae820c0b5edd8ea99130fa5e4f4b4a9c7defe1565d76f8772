{"dependencies":[{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}},{"name":"./binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":67,"index":123}}],"key":"n3k3ricg147CfAsjRPov5+2UD6U=","exportNames":["*"]}},{"name":"./is-binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":124},"end":{"line":3,"column":53,"index":177}}],"key":"nI6Cd4R9sJDIQIUaBK8/eqMqCAI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.protocol = exports.PacketType = exports.Encoder = exports.Decoder = void 0;\n  var _componentEmitter = require(_dependencyMap[0], \"@socket.io/component-emitter\");\n  var _binary = require(_dependencyMap[1], \"./binary.js\");\n  var _isBinary = require(_dependencyMap[2], \"./is-binary.js\");\n  /**\n   * These strings must not be used as event names, as they have a special meaning.\n   */\n  const RESERVED_EVENTS = [\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\" // used by the Node.js EventEmitter\n  ];\n  /**\n   * Protocol version.\n   *\n   * @public\n   */\n  const protocol = exports.protocol = 5;\n  var PacketType;\n  (function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n  })(PacketType || (exports.PacketType = PacketType = {}));\n  /**\n   * A socket.io Encoder instance\n   */\n  class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n      this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if ((0, _isBinary.hasBinary)(obj)) {\n          return this.encodeAsBinary({\n            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n            nsp: obj.nsp,\n            data: obj.data,\n            id: obj.id\n          });\n        }\n      }\n      return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n      // first is type\n      let str = \"\" + obj.type;\n      // attachments if we have them\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      }\n      // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      }\n      // immediately followed by the id\n      if (null != obj.id) {\n        str += obj.id;\n      }\n      // json data\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data, this.replacer);\n      }\n      return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n      const deconstruction = (0, _binary.deconstructPacket)(obj);\n      const pack = this.encodeAsString(deconstruction.packet);\n      const buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n      return buffers; // write all the buffers\n    }\n  }\n  // see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\n  exports.Encoder = Encoder;\n  function isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n  }\n  /**\n   * A socket.io Decoder instance\n   *\n   * @return {Object} decoder\n   */\n  class Decoder extends _componentEmitter.Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n      super();\n      this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n      let packet;\n      if (typeof obj === \"string\") {\n        if (this.reconstructor) {\n          throw new Error(\"got plaintext data when reconstructing a packet\");\n        }\n        packet = this.decodeString(obj);\n        const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet);\n          // no attachments, labeled binary but no binary data to follow\n          if (packet.attachments === 0) {\n            super.emitReserved(\"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          super.emitReserved(\"decoded\", packet);\n        }\n      } else if ((0, _isBinary.isBinary)(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n            super.emitReserved(\"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n      let i = 0;\n      // look up type\n      const p = {\n        type: Number(str.charAt(0))\n      };\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      }\n      // look up attachments if type binary\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        const start = i + 1;\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n        const buf = str.substring(start, i);\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n        p.attachments = Number(buf);\n      }\n      // look up namespace (if any)\n      if (\"/\" === str.charAt(i + 1)) {\n        const start = i + 1;\n        while (++i) {\n          const c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n        p.nsp = str.substring(start, i);\n      } else {\n        p.nsp = \"/\";\n      }\n      // look up id\n      const next = str.charAt(i + 1);\n      if (\"\" !== next && Number(next) == next) {\n        const start = i + 1;\n        while (++i) {\n          const c = str.charAt(i);\n          if (null == c || Number(c) != c) {\n            --i;\n            break;\n          }\n          if (i === str.length) break;\n        }\n        p.id = Number(str.substring(start, i + 1));\n      }\n      // look up json data\n      if (str.charAt(++i)) {\n        const payload = this.tryParse(str.substr(i));\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n      return p;\n    }\n    tryParse(str) {\n      try {\n        return JSON.parse(str, this.reviver);\n      } catch (e) {\n        return false;\n      }\n    }\n    static isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return isObject(payload);\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || isObject(payload);\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS.indexOf(payload[0]) === -1);\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n        this.reconstructor = null;\n      }\n    }\n  }\n  /**\n   * A manager of a binary event's 'buffer sequence'. Should\n   * be constructed whenever a packet of type BINARY_EVENT is\n   * decoded.\n   *\n   * @param {Object} packet\n   * @return {BinaryReconstructor} initialized reconstructor\n   */\n  exports.Decoder = Decoder;\n  class BinaryReconstructor {\n    constructor(packet) {\n      this.packet = packet;\n      this.buffers = [];\n      this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n      this.buffers.push(binData);\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        const packet = (0, _binary.reconstructPacket)(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n      return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }\n});","lineCount":296,"map":[[6,2,1,0],[6,6,1,0,"_componentEmitter"],[6,23,1,0],[6,26,1,0,"require"],[6,33,1,0],[6,34,1,0,"_dependencyMap"],[6,48,1,0],[7,2,2,0],[7,6,2,0,"_binary"],[7,13,2,0],[7,16,2,0,"require"],[7,23,2,0],[7,24,2,0,"_dependencyMap"],[7,38,2,0],[8,2,3,0],[8,6,3,0,"_isBinary"],[8,15,3,0],[8,18,3,0,"require"],[8,25,3,0],[8,26,3,0,"_dependencyMap"],[8,40,3,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[12,2,7,0],[12,8,7,6,"RESERVED_EVENTS"],[12,23,7,21],[12,26,7,24],[12,27,8,4],[12,36,8,13],[12,38,9,4],[12,53,9,19],[12,55,10,4],[12,67,10,16],[12,69,11,4],[12,84,11,19],[12,86,12,4],[12,99,12,17],[12,101,13,4],[12,117,13,20],[12,118,13,22],[13,2,13,22],[13,3,14,1],[14,2,15,0],[15,0,16,0],[16,0,17,0],[17,0,18,0],[18,0,19,0],[19,2,20,7],[19,8,20,13,"protocol"],[19,16,20,21],[19,19,20,21,"exports"],[19,26,20,21],[19,27,20,21,"protocol"],[19,35,20,21],[19,38,20,24],[19,39,20,25],[20,2,21,7],[20,6,21,11,"PacketType"],[20,16,21,21],[21,2,22,0],[21,3,22,1],[21,13,22,11,"PacketType"],[21,23,22,21],[21,25,22,23],[22,4,23,4,"PacketType"],[22,14,23,14],[22,15,23,15,"PacketType"],[22,25,23,25],[22,26,23,26],[22,35,23,35],[22,36,23,36],[22,39,23,39],[22,40,23,40],[22,41,23,41],[22,44,23,44],[22,53,23,53],[23,4,24,4,"PacketType"],[23,14,24,14],[23,15,24,15,"PacketType"],[23,25,24,25],[23,26,24,26],[23,38,24,38],[23,39,24,39],[23,42,24,42],[23,43,24,43],[23,44,24,44],[23,47,24,47],[23,59,24,59],[24,4,25,4,"PacketType"],[24,14,25,14],[24,15,25,15,"PacketType"],[24,25,25,25],[24,26,25,26],[24,33,25,33],[24,34,25,34],[24,37,25,37],[24,38,25,38],[24,39,25,39],[24,42,25,42],[24,49,25,49],[25,4,26,4,"PacketType"],[25,14,26,14],[25,15,26,15,"PacketType"],[25,25,26,25],[25,26,26,26],[25,31,26,31],[25,32,26,32],[25,35,26,35],[25,36,26,36],[25,37,26,37],[25,40,26,40],[25,45,26,45],[26,4,27,4,"PacketType"],[26,14,27,14],[26,15,27,15,"PacketType"],[26,25,27,25],[26,26,27,26],[26,41,27,41],[26,42,27,42],[26,45,27,45],[26,46,27,46],[26,47,27,47],[26,50,27,50],[26,65,27,65],[27,4,28,4,"PacketType"],[27,14,28,14],[27,15,28,15,"PacketType"],[27,25,28,25],[27,26,28,26],[27,40,28,40],[27,41,28,41],[27,44,28,44],[27,45,28,45],[27,46,28,46],[27,49,28,49],[27,63,28,63],[28,4,29,4,"PacketType"],[28,14,29,14],[28,15,29,15,"PacketType"],[28,25,29,25],[28,26,29,26],[28,38,29,38],[28,39,29,39],[28,42,29,42],[28,43,29,43],[28,44,29,44],[28,47,29,47],[28,59,29,59],[29,2,30,0],[29,3,30,1],[29,5,30,3,"PacketType"],[29,15,30,13],[29,20,30,13,"exports"],[29,27,30,13],[29,28,30,13,"PacketType"],[29,38,30,13],[29,41,30,18,"PacketType"],[29,51,30,28],[29,54,30,31],[29,55,30,32],[29,56,30,33],[29,57,30,34],[29,58,30,35],[30,2,31,0],[31,0,32,0],[32,0,33,0],[33,2,34,7],[33,8,34,13,"Encoder"],[33,15,34,20],[33,16,34,21],[34,4,35,4],[35,0,36,0],[36,0,37,0],[37,0,38,0],[38,0,39,0],[39,4,40,4,"constructor"],[39,15,40,15,"constructor"],[39,16,40,16,"replacer"],[39,24,40,24],[39,26,40,26],[40,6,41,8],[40,10,41,12],[40,11,41,13,"replacer"],[40,19,41,21],[40,22,41,24,"replacer"],[40,30,41,32],[41,4,42,4],[42,4,43,4],[43,0,44,0],[44,0,45,0],[45,0,46,0],[46,0,47,0],[47,0,48,0],[48,4,49,4,"encode"],[48,10,49,10,"encode"],[48,11,49,11,"obj"],[48,14,49,14],[48,16,49,16],[49,6,50,8],[49,10,50,12,"obj"],[49,13,50,15],[49,14,50,16,"type"],[49,18,50,20],[49,23,50,25,"PacketType"],[49,33,50,35],[49,34,50,36,"EVENT"],[49,39,50,41],[49,43,50,45,"obj"],[49,46,50,48],[49,47,50,49,"type"],[49,51,50,53],[49,56,50,58,"PacketType"],[49,66,50,68],[49,67,50,69,"ACK"],[49,70,50,72],[49,72,50,74],[50,8,51,12],[50,12,51,16],[50,16,51,16,"hasBinary"],[50,35,51,25],[50,37,51,26,"obj"],[50,40,51,29],[50,41,51,30],[50,43,51,32],[51,10,52,16],[51,17,52,23],[51,21,52,27],[51,22,52,28,"encodeAsBinary"],[51,36,52,42],[51,37,52,43],[52,12,53,20,"type"],[52,16,53,24],[52,18,53,26,"obj"],[52,21,53,29],[52,22,53,30,"type"],[52,26,53,34],[52,31,53,39,"PacketType"],[52,41,53,49],[52,42,53,50,"EVENT"],[52,47,53,55],[52,50,54,26,"PacketType"],[52,60,54,36],[52,61,54,37,"BINARY_EVENT"],[52,73,54,49],[52,76,55,26,"PacketType"],[52,86,55,36],[52,87,55,37,"BINARY_ACK"],[52,97,55,47],[53,12,56,20,"nsp"],[53,15,56,23],[53,17,56,25,"obj"],[53,20,56,28],[53,21,56,29,"nsp"],[53,24,56,32],[54,12,57,20,"data"],[54,16,57,24],[54,18,57,26,"obj"],[54,21,57,29],[54,22,57,30,"data"],[54,26,57,34],[55,12,58,20,"id"],[55,14,58,22],[55,16,58,24,"obj"],[55,19,58,27],[55,20,58,28,"id"],[56,10,59,16],[56,11,59,17],[56,12,59,18],[57,8,60,12],[58,6,61,8],[59,6,62,8],[59,13,62,15],[59,14,62,16],[59,18,62,20],[59,19,62,21,"encodeAsString"],[59,33,62,35],[59,34,62,36,"obj"],[59,37,62,39],[59,38,62,40],[59,39,62,41],[60,4,63,4],[61,4,64,4],[62,0,65,0],[63,0,66,0],[64,4,67,4,"encodeAsString"],[64,18,67,18,"encodeAsString"],[64,19,67,19,"obj"],[64,22,67,22],[64,24,67,24],[65,6,68,8],[66,6,69,8],[66,10,69,12,"str"],[66,13,69,15],[66,16,69,18],[66,18,69,20],[66,21,69,23,"obj"],[66,24,69,26],[66,25,69,27,"type"],[66,29,69,31],[67,6,70,8],[68,6,71,8],[68,10,71,12,"obj"],[68,13,71,15],[68,14,71,16,"type"],[68,18,71,20],[68,23,71,25,"PacketType"],[68,33,71,35],[68,34,71,36,"BINARY_EVENT"],[68,46,71,48],[68,50,72,12,"obj"],[68,53,72,15],[68,54,72,16,"type"],[68,58,72,20],[68,63,72,25,"PacketType"],[68,73,72,35],[68,74,72,36,"BINARY_ACK"],[68,84,72,46],[68,86,72,48],[69,8,73,12,"str"],[69,11,73,15],[69,15,73,19,"obj"],[69,18,73,22],[69,19,73,23,"attachments"],[69,30,73,34],[69,33,73,37],[69,36,73,40],[70,6,74,8],[71,6,75,8],[72,6,76,8],[73,6,77,8],[73,10,77,12,"obj"],[73,13,77,15],[73,14,77,16,"nsp"],[73,17,77,19],[73,21,77,23],[73,24,77,26],[73,29,77,31,"obj"],[73,32,77,34],[73,33,77,35,"nsp"],[73,36,77,38],[73,38,77,40],[74,8,78,12,"str"],[74,11,78,15],[74,15,78,19,"obj"],[74,18,78,22],[74,19,78,23,"nsp"],[74,22,78,26],[74,25,78,29],[74,28,78,32],[75,6,79,8],[76,6,80,8],[77,6,81,8],[77,10,81,12],[77,14,81,16],[77,18,81,20,"obj"],[77,21,81,23],[77,22,81,24,"id"],[77,24,81,26],[77,26,81,28],[78,8,82,12,"str"],[78,11,82,15],[78,15,82,19,"obj"],[78,18,82,22],[78,19,82,23,"id"],[78,21,82,25],[79,6,83,8],[80,6,84,8],[81,6,85,8],[81,10,85,12],[81,14,85,16],[81,18,85,20,"obj"],[81,21,85,23],[81,22,85,24,"data"],[81,26,85,28],[81,28,85,30],[82,8,86,12,"str"],[82,11,86,15],[82,15,86,19,"JSON"],[82,19,86,23],[82,20,86,24,"stringify"],[82,29,86,33],[82,30,86,34,"obj"],[82,33,86,37],[82,34,86,38,"data"],[82,38,86,42],[82,40,86,44],[82,44,86,48],[82,45,86,49,"replacer"],[82,53,86,57],[82,54,86,58],[83,6,87,8],[84,6,88,8],[84,13,88,15,"str"],[84,16,88,18],[85,4,89,4],[86,4,90,4],[87,0,91,0],[88,0,92,0],[89,0,93,0],[90,0,94,0],[91,4,95,4,"encodeAsBinary"],[91,18,95,18,"encodeAsBinary"],[91,19,95,19,"obj"],[91,22,95,22],[91,24,95,24],[92,6,96,8],[92,12,96,14,"deconstruction"],[92,26,96,28],[92,29,96,31],[92,33,96,31,"deconstructPacket"],[92,58,96,48],[92,60,96,49,"obj"],[92,63,96,52],[92,64,96,53],[93,6,97,8],[93,12,97,14,"pack"],[93,16,97,18],[93,19,97,21],[93,23,97,25],[93,24,97,26,"encodeAsString"],[93,38,97,40],[93,39,97,41,"deconstruction"],[93,53,97,55],[93,54,97,56,"packet"],[93,60,97,62],[93,61,97,63],[94,6,98,8],[94,12,98,14,"buffers"],[94,19,98,21],[94,22,98,24,"deconstruction"],[94,36,98,38],[94,37,98,39,"buffers"],[94,44,98,46],[95,6,99,8,"buffers"],[95,13,99,15],[95,14,99,16,"unshift"],[95,21,99,23],[95,22,99,24,"pack"],[95,26,99,28],[95,27,99,29],[95,28,99,30],[95,29,99,31],[96,6,100,8],[96,13,100,15,"buffers"],[96,20,100,22],[96,21,100,23],[96,22,100,24],[97,4,101,4],[98,2,102,0],[99,2,103,0],[100,2,103,0,"exports"],[100,9,103,0],[100,10,103,0,"Encoder"],[100,17,103,0],[100,20,103,0,"Encoder"],[100,27,103,0],[101,2,104,0],[101,11,104,9,"isObject"],[101,19,104,17,"isObject"],[101,20,104,18,"value"],[101,25,104,23],[101,27,104,25],[102,4,105,4],[102,11,105,11,"Object"],[102,17,105,17],[102,18,105,18,"prototype"],[102,27,105,27],[102,28,105,28,"toString"],[102,36,105,36],[102,37,105,37,"call"],[102,41,105,41],[102,42,105,42,"value"],[102,47,105,47],[102,48,105,48],[102,53,105,53],[102,70,105,70],[103,2,106,0],[104,2,107,0],[105,0,108,0],[106,0,109,0],[107,0,110,0],[108,0,111,0],[109,2,112,7],[109,8,112,13,"Decoder"],[109,15,112,20],[109,24,112,29,"Emitter"],[109,49,112,36],[109,50,112,37],[110,4,113,4],[111,0,114,0],[112,0,115,0],[113,0,116,0],[114,0,117,0],[115,4,118,4,"constructor"],[115,15,118,15,"constructor"],[115,16,118,16,"reviver"],[115,23,118,23],[115,25,118,25],[116,6,119,8],[116,11,119,13],[116,12,119,14],[116,13,119,15],[117,6,120,8],[117,10,120,12],[117,11,120,13,"reviver"],[117,18,120,20],[117,21,120,23,"reviver"],[117,28,120,30],[118,4,121,4],[119,4,122,4],[120,0,123,0],[121,0,124,0],[122,0,125,0],[123,0,126,0],[124,4,127,4,"add"],[124,7,127,7,"add"],[124,8,127,8,"obj"],[124,11,127,11],[124,13,127,13],[125,6,128,8],[125,10,128,12,"packet"],[125,16,128,18],[126,6,129,8],[126,10,129,12],[126,17,129,19,"obj"],[126,20,129,22],[126,25,129,27],[126,33,129,35],[126,35,129,37],[127,8,130,12],[127,12,130,16],[127,16,130,20],[127,17,130,21,"reconstructor"],[127,30,130,34],[127,32,130,36],[128,10,131,16],[128,16,131,22],[128,20,131,26,"Error"],[128,25,131,31],[128,26,131,32],[128,75,131,81],[128,76,131,82],[129,8,132,12],[130,8,133,12,"packet"],[130,14,133,18],[130,17,133,21],[130,21,133,25],[130,22,133,26,"decodeString"],[130,34,133,38],[130,35,133,39,"obj"],[130,38,133,42],[130,39,133,43],[131,8,134,12],[131,14,134,18,"isBinaryEvent"],[131,27,134,31],[131,30,134,34,"packet"],[131,36,134,40],[131,37,134,41,"type"],[131,41,134,45],[131,46,134,50,"PacketType"],[131,56,134,60],[131,57,134,61,"BINARY_EVENT"],[131,69,134,73],[132,8,135,12],[132,12,135,16,"isBinaryEvent"],[132,25,135,29],[132,29,135,33,"packet"],[132,35,135,39],[132,36,135,40,"type"],[132,40,135,44],[132,45,135,49,"PacketType"],[132,55,135,59],[132,56,135,60,"BINARY_ACK"],[132,66,135,70],[132,68,135,72],[133,10,136,16,"packet"],[133,16,136,22],[133,17,136,23,"type"],[133,21,136,27],[133,24,136,30,"isBinaryEvent"],[133,37,136,43],[133,40,136,46,"PacketType"],[133,50,136,56],[133,51,136,57,"EVENT"],[133,56,136,62],[133,59,136,65,"PacketType"],[133,69,136,75],[133,70,136,76,"ACK"],[133,73,136,79],[134,10,137,16],[135,10,138,16],[135,14,138,20],[135,15,138,21,"reconstructor"],[135,28,138,34],[135,31,138,37],[135,35,138,41,"BinaryReconstructor"],[135,54,138,60],[135,55,138,61,"packet"],[135,61,138,67],[135,62,138,68],[136,10,139,16],[137,10,140,16],[137,14,140,20,"packet"],[137,20,140,26],[137,21,140,27,"attachments"],[137,32,140,38],[137,37,140,43],[137,38,140,44],[137,40,140,46],[138,12,141,20],[138,17,141,25],[138,18,141,26,"emitReserved"],[138,30,141,38],[138,31,141,39],[138,40,141,48],[138,42,141,50,"packet"],[138,48,141,56],[138,49,141,57],[139,10,142,16],[140,8,143,12],[140,9,143,13],[140,15,144,17],[141,10,145,16],[142,10,146,16],[142,15,146,21],[142,16,146,22,"emitReserved"],[142,28,146,34],[142,29,146,35],[142,38,146,44],[142,40,146,46,"packet"],[142,46,146,52],[142,47,146,53],[143,8,147,12],[144,6,148,8],[144,7,148,9],[144,13,149,13],[144,17,149,17],[144,21,149,17,"isBinary"],[144,39,149,25],[144,41,149,26,"obj"],[144,44,149,29],[144,45,149,30],[144,49,149,34,"obj"],[144,52,149,37],[144,53,149,38,"base64"],[144,59,149,44],[144,61,149,46],[145,8,150,12],[146,8,151,12],[146,12,151,16],[146,13,151,17],[146,17,151,21],[146,18,151,22,"reconstructor"],[146,31,151,35],[146,33,151,37],[147,10,152,16],[147,16,152,22],[147,20,152,26,"Error"],[147,25,152,31],[147,26,152,32],[147,76,152,82],[147,77,152,83],[148,8,153,12],[148,9,153,13],[148,15,154,17],[149,10,155,16,"packet"],[149,16,155,22],[149,19,155,25],[149,23,155,29],[149,24,155,30,"reconstructor"],[149,37,155,43],[149,38,155,44,"takeBinaryData"],[149,52,155,58],[149,53,155,59,"obj"],[149,56,155,62],[149,57,155,63],[150,10,156,16],[150,14,156,20,"packet"],[150,20,156,26],[150,22,156,28],[151,12,157,20],[152,12,158,20],[152,16,158,24],[152,17,158,25,"reconstructor"],[152,30,158,38],[152,33,158,41],[152,37,158,45],[153,12,159,20],[153,17,159,25],[153,18,159,26,"emitReserved"],[153,30,159,38],[153,31,159,39],[153,40,159,48],[153,42,159,50,"packet"],[153,48,159,56],[153,49,159,57],[154,10,160,16],[155,8,161,12],[156,6,162,8],[156,7,162,9],[156,13,163,13],[157,8,164,12],[157,14,164,18],[157,18,164,22,"Error"],[157,23,164,27],[157,24,164,28],[157,40,164,44],[157,43,164,47,"obj"],[157,46,164,50],[157,47,164,51],[158,6,165,8],[159,4,166,4],[160,4,167,4],[161,0,168,0],[162,0,169,0],[163,0,170,0],[164,0,171,0],[165,0,172,0],[166,4,173,4,"decodeString"],[166,16,173,16,"decodeString"],[166,17,173,17,"str"],[166,20,173,20],[166,22,173,22],[167,6,174,8],[167,10,174,12,"i"],[167,11,174,13],[167,14,174,16],[167,15,174,17],[168,6,175,8],[169,6,176,8],[169,12,176,14,"p"],[169,13,176,15],[169,16,176,18],[170,8,177,12,"type"],[170,12,177,16],[170,14,177,18,"Number"],[170,20,177,24],[170,21,177,25,"str"],[170,24,177,28],[170,25,177,29,"charAt"],[170,31,177,35],[170,32,177,36],[170,33,177,37],[170,34,177,38],[171,6,178,8],[171,7,178,9],[172,6,179,8],[172,10,179,12,"PacketType"],[172,20,179,22],[172,21,179,23,"p"],[172,22,179,24],[172,23,179,25,"type"],[172,27,179,29],[172,28,179,30],[172,33,179,35,"undefined"],[172,42,179,44],[172,44,179,46],[173,8,180,12],[173,14,180,18],[173,18,180,22,"Error"],[173,23,180,27],[173,24,180,28],[173,46,180,50],[173,49,180,53,"p"],[173,50,180,54],[173,51,180,55,"type"],[173,55,180,59],[173,56,180,60],[174,6,181,8],[175,6,182,8],[176,6,183,8],[176,10,183,12,"p"],[176,11,183,13],[176,12,183,14,"type"],[176,16,183,18],[176,21,183,23,"PacketType"],[176,31,183,33],[176,32,183,34,"BINARY_EVENT"],[176,44,183,46],[176,48,184,12,"p"],[176,49,184,13],[176,50,184,14,"type"],[176,54,184,18],[176,59,184,23,"PacketType"],[176,69,184,33],[176,70,184,34,"BINARY_ACK"],[176,80,184,44],[176,82,184,46],[177,8,185,12],[177,14,185,18,"start"],[177,19,185,23],[177,22,185,26,"i"],[177,23,185,27],[177,26,185,30],[177,27,185,31],[178,8,186,12],[178,15,186,19,"str"],[178,18,186,22],[178,19,186,23,"charAt"],[178,25,186,29],[178,26,186,30],[178,28,186,32,"i"],[178,29,186,33],[178,30,186,34],[178,35,186,39],[178,38,186,42],[178,42,186,46,"i"],[178,43,186,47],[178,47,186,51,"str"],[178,50,186,54],[178,51,186,55,"length"],[178,57,186,61],[178,59,186,63],[178,60,186,65],[179,8,187,12],[179,14,187,18,"buf"],[179,17,187,21],[179,20,187,24,"str"],[179,23,187,27],[179,24,187,28,"substring"],[179,33,187,37],[179,34,187,38,"start"],[179,39,187,43],[179,41,187,45,"i"],[179,42,187,46],[179,43,187,47],[180,8,188,12],[180,12,188,16,"buf"],[180,15,188,19],[180,19,188,23,"Number"],[180,25,188,29],[180,26,188,30,"buf"],[180,29,188,33],[180,30,188,34],[180,34,188,38,"str"],[180,37,188,41],[180,38,188,42,"charAt"],[180,44,188,48],[180,45,188,49,"i"],[180,46,188,50],[180,47,188,51],[180,52,188,56],[180,55,188,59],[180,57,188,61],[181,10,189,16],[181,16,189,22],[181,20,189,26,"Error"],[181,25,189,31],[181,26,189,32],[181,47,189,53],[181,48,189,54],[182,8,190,12],[183,8,191,12,"p"],[183,9,191,13],[183,10,191,14,"attachments"],[183,21,191,25],[183,24,191,28,"Number"],[183,30,191,34],[183,31,191,35,"buf"],[183,34,191,38],[183,35,191,39],[184,6,192,8],[185,6,193,8],[186,6,194,8],[186,10,194,12],[186,13,194,15],[186,18,194,20,"str"],[186,21,194,23],[186,22,194,24,"charAt"],[186,28,194,30],[186,29,194,31,"i"],[186,30,194,32],[186,33,194,35],[186,34,194,36],[186,35,194,37],[186,37,194,39],[187,8,195,12],[187,14,195,18,"start"],[187,19,195,23],[187,22,195,26,"i"],[187,23,195,27],[187,26,195,30],[187,27,195,31],[188,8,196,12],[188,15,196,19],[188,17,196,21,"i"],[188,18,196,22],[188,20,196,24],[189,10,197,16],[189,16,197,22,"c"],[189,17,197,23],[189,20,197,26,"str"],[189,23,197,29],[189,24,197,30,"charAt"],[189,30,197,36],[189,31,197,37,"i"],[189,32,197,38],[189,33,197,39],[190,10,198,16],[190,14,198,20],[190,17,198,23],[190,22,198,28,"c"],[190,23,198,29],[190,25,199,20],[191,10,200,16],[191,14,200,20,"i"],[191,15,200,21],[191,20,200,26,"str"],[191,23,200,29],[191,24,200,30,"length"],[191,30,200,36],[191,32,201,20],[192,8,202,12],[193,8,203,12,"p"],[193,9,203,13],[193,10,203,14,"nsp"],[193,13,203,17],[193,16,203,20,"str"],[193,19,203,23],[193,20,203,24,"substring"],[193,29,203,33],[193,30,203,34,"start"],[193,35,203,39],[193,37,203,41,"i"],[193,38,203,42],[193,39,203,43],[194,6,204,8],[194,7,204,9],[194,13,205,13],[195,8,206,12,"p"],[195,9,206,13],[195,10,206,14,"nsp"],[195,13,206,17],[195,16,206,20],[195,19,206,23],[196,6,207,8],[197,6,208,8],[198,6,209,8],[198,12,209,14,"next"],[198,16,209,18],[198,19,209,21,"str"],[198,22,209,24],[198,23,209,25,"charAt"],[198,29,209,31],[198,30,209,32,"i"],[198,31,209,33],[198,34,209,36],[198,35,209,37],[198,36,209,38],[199,6,210,8],[199,10,210,12],[199,12,210,14],[199,17,210,19,"next"],[199,21,210,23],[199,25,210,27,"Number"],[199,31,210,33],[199,32,210,34,"next"],[199,36,210,38],[199,37,210,39],[199,41,210,43,"next"],[199,45,210,47],[199,47,210,49],[200,8,211,12],[200,14,211,18,"start"],[200,19,211,23],[200,22,211,26,"i"],[200,23,211,27],[200,26,211,30],[200,27,211,31],[201,8,212,12],[201,15,212,19],[201,17,212,21,"i"],[201,18,212,22],[201,20,212,24],[202,10,213,16],[202,16,213,22,"c"],[202,17,213,23],[202,20,213,26,"str"],[202,23,213,29],[202,24,213,30,"charAt"],[202,30,213,36],[202,31,213,37,"i"],[202,32,213,38],[202,33,213,39],[203,10,214,16],[203,14,214,20],[203,18,214,24],[203,22,214,28,"c"],[203,23,214,29],[203,27,214,33,"Number"],[203,33,214,39],[203,34,214,40,"c"],[203,35,214,41],[203,36,214,42],[203,40,214,46,"c"],[203,41,214,47],[203,43,214,49],[204,12,215,20],[204,14,215,22,"i"],[204,15,215,23],[205,12,216,20],[206,10,217,16],[207,10,218,16],[207,14,218,20,"i"],[207,15,218,21],[207,20,218,26,"str"],[207,23,218,29],[207,24,218,30,"length"],[207,30,218,36],[207,32,219,20],[208,8,220,12],[209,8,221,12,"p"],[209,9,221,13],[209,10,221,14,"id"],[209,12,221,16],[209,15,221,19,"Number"],[209,21,221,25],[209,22,221,26,"str"],[209,25,221,29],[209,26,221,30,"substring"],[209,35,221,39],[209,36,221,40,"start"],[209,41,221,45],[209,43,221,47,"i"],[209,44,221,48],[209,47,221,51],[209,48,221,52],[209,49,221,53],[209,50,221,54],[210,6,222,8],[211,6,223,8],[212,6,224,8],[212,10,224,12,"str"],[212,13,224,15],[212,14,224,16,"charAt"],[212,20,224,22],[212,21,224,23],[212,23,224,25,"i"],[212,24,224,26],[212,25,224,27],[212,27,224,29],[213,8,225,12],[213,14,225,18,"payload"],[213,21,225,25],[213,24,225,28],[213,28,225,32],[213,29,225,33,"tryParse"],[213,37,225,41],[213,38,225,42,"str"],[213,41,225,45],[213,42,225,46,"substr"],[213,48,225,52],[213,49,225,53,"i"],[213,50,225,54],[213,51,225,55],[213,52,225,56],[214,8,226,12],[214,12,226,16,"Decoder"],[214,19,226,23],[214,20,226,24,"isPayloadValid"],[214,34,226,38],[214,35,226,39,"p"],[214,36,226,40],[214,37,226,41,"type"],[214,41,226,45],[214,43,226,47,"payload"],[214,50,226,54],[214,51,226,55],[214,53,226,57],[215,10,227,16,"p"],[215,11,227,17],[215,12,227,18,"data"],[215,16,227,22],[215,19,227,25,"payload"],[215,26,227,32],[216,8,228,12],[216,9,228,13],[216,15,229,17],[217,10,230,16],[217,16,230,22],[217,20,230,26,"Error"],[217,25,230,31],[217,26,230,32],[217,43,230,49],[217,44,230,50],[218,8,231,12],[219,6,232,8],[220,6,233,8],[220,13,233,15,"p"],[220,14,233,16],[221,4,234,4],[222,4,235,4,"tryParse"],[222,12,235,12,"tryParse"],[222,13,235,13,"str"],[222,16,235,16],[222,18,235,18],[223,6,236,8],[223,10,236,12],[224,8,237,12],[224,15,237,19,"JSON"],[224,19,237,23],[224,20,237,24,"parse"],[224,25,237,29],[224,26,237,30,"str"],[224,29,237,33],[224,31,237,35],[224,35,237,39],[224,36,237,40,"reviver"],[224,43,237,47],[224,44,237,48],[225,6,238,8],[225,7,238,9],[225,8,239,8],[225,15,239,15,"e"],[225,16,239,16],[225,18,239,18],[226,8,240,12],[226,15,240,19],[226,20,240,24],[227,6,241,8],[228,4,242,4],[229,4,243,4],[229,11,243,11,"isPayloadValid"],[229,25,243,25,"isPayloadValid"],[229,26,243,26,"type"],[229,30,243,30],[229,32,243,32,"payload"],[229,39,243,39],[229,41,243,41],[230,6,244,8],[230,14,244,16,"type"],[230,18,244,20],[231,8,245,12],[231,13,245,17,"PacketType"],[231,23,245,27],[231,24,245,28,"CONNECT"],[231,31,245,35],[232,10,246,16],[232,17,246,23,"isObject"],[232,25,246,31],[232,26,246,32,"payload"],[232,33,246,39],[232,34,246,40],[233,8,247,12],[233,13,247,17,"PacketType"],[233,23,247,27],[233,24,247,28,"DISCONNECT"],[233,34,247,38],[234,10,248,16],[234,17,248,23,"payload"],[234,24,248,30],[234,29,248,35,"undefined"],[234,38,248,44],[235,8,249,12],[235,13,249,17,"PacketType"],[235,23,249,27],[235,24,249,28,"CONNECT_ERROR"],[235,37,249,41],[236,10,250,16],[236,17,250,23],[236,24,250,30,"payload"],[236,31,250,37],[236,36,250,42],[236,44,250,50],[236,48,250,54,"isObject"],[236,56,250,62],[236,57,250,63,"payload"],[236,64,250,70],[236,65,250,71],[237,8,251,12],[237,13,251,17,"PacketType"],[237,23,251,27],[237,24,251,28,"EVENT"],[237,29,251,33],[238,8,252,12],[238,13,252,17,"PacketType"],[238,23,252,27],[238,24,252,28,"BINARY_EVENT"],[238,36,252,40],[239,10,253,16],[239,17,253,24,"Array"],[239,22,253,29],[239,23,253,30,"isArray"],[239,30,253,37],[239,31,253,38,"payload"],[239,38,253,45],[239,39,253,46],[239,44,254,21],[239,51,254,28,"payload"],[239,58,254,35],[239,59,254,36],[239,60,254,37],[239,61,254,38],[239,66,254,43],[239,74,254,51],[239,78,255,25],[239,85,255,32,"payload"],[239,92,255,39],[239,93,255,40],[239,94,255,41],[239,95,255,42],[239,100,255,47],[239,108,255,55],[239,112,256,28,"RESERVED_EVENTS"],[239,127,256,43],[239,128,256,44,"indexOf"],[239,135,256,51],[239,136,256,52,"payload"],[239,143,256,59],[239,144,256,60],[239,145,256,61],[239,146,256,62],[239,147,256,63],[239,152,256,68],[239,153,256,69],[239,154,256,71],[239,155,256,72],[240,8,257,12],[240,13,257,17,"PacketType"],[240,23,257,27],[240,24,257,28,"ACK"],[240,27,257,31],[241,8,258,12],[241,13,258,17,"PacketType"],[241,23,258,27],[241,24,258,28,"BINARY_ACK"],[241,34,258,38],[242,10,259,16],[242,17,259,23,"Array"],[242,22,259,28],[242,23,259,29,"isArray"],[242,30,259,36],[242,31,259,37,"payload"],[242,38,259,44],[242,39,259,45],[243,6,260,8],[244,4,261,4],[245,4,262,4],[246,0,263,0],[247,0,264,0],[248,4,265,4,"destroy"],[248,11,265,11,"destroy"],[248,12,265,11],[248,14,265,14],[249,6,266,8],[249,10,266,12],[249,14,266,16],[249,15,266,17,"reconstructor"],[249,28,266,30],[249,30,266,32],[250,8,267,12],[250,12,267,16],[250,13,267,17,"reconstructor"],[250,26,267,30],[250,27,267,31,"finishedReconstruction"],[250,49,267,53],[250,50,267,54],[250,51,267,55],[251,8,268,12],[251,12,268,16],[251,13,268,17,"reconstructor"],[251,26,268,30],[251,29,268,33],[251,33,268,37],[252,6,269,8],[253,4,270,4],[254,2,271,0],[255,2,272,0],[256,0,273,0],[257,0,274,0],[258,0,275,0],[259,0,276,0],[260,0,277,0],[261,0,278,0],[262,0,279,0],[263,2,272,0,"exports"],[263,9,272,0],[263,10,272,0,"Decoder"],[263,17,272,0],[263,20,272,0,"Decoder"],[263,27,272,0],[264,2,280,0],[264,8,280,6,"BinaryReconstructor"],[264,27,280,25],[264,28,280,26],[265,4,281,4,"constructor"],[265,15,281,15,"constructor"],[265,16,281,16,"packet"],[265,22,281,22],[265,24,281,24],[266,6,282,8],[266,10,282,12],[266,11,282,13,"packet"],[266,17,282,19],[266,20,282,22,"packet"],[266,26,282,28],[267,6,283,8],[267,10,283,12],[267,11,283,13,"buffers"],[267,18,283,20],[267,21,283,23],[267,23,283,25],[268,6,284,8],[268,10,284,12],[268,11,284,13,"reconPack"],[268,20,284,22],[268,23,284,25,"packet"],[268,29,284,31],[269,4,285,4],[270,4,286,4],[271,0,287,0],[272,0,288,0],[273,0,289,0],[274,0,290,0],[275,0,291,0],[276,0,292,0],[277,0,293,0],[278,4,294,4,"takeBinaryData"],[278,18,294,18,"takeBinaryData"],[278,19,294,19,"binData"],[278,26,294,26],[278,28,294,28],[279,6,295,8],[279,10,295,12],[279,11,295,13,"buffers"],[279,18,295,20],[279,19,295,21,"push"],[279,23,295,25],[279,24,295,26,"binData"],[279,31,295,33],[279,32,295,34],[280,6,296,8],[280,10,296,12],[280,14,296,16],[280,15,296,17,"buffers"],[280,22,296,24],[280,23,296,25,"length"],[280,29,296,31],[280,34,296,36],[280,38,296,40],[280,39,296,41,"reconPack"],[280,48,296,50],[280,49,296,51,"attachments"],[280,60,296,62],[280,62,296,64],[281,8,297,12],[282,8,298,12],[282,14,298,18,"packet"],[282,20,298,24],[282,23,298,27],[282,27,298,27,"reconstructPacket"],[282,52,298,44],[282,54,298,45],[282,58,298,49],[282,59,298,50,"reconPack"],[282,68,298,59],[282,70,298,61],[282,74,298,65],[282,75,298,66,"buffers"],[282,82,298,73],[282,83,298,74],[283,8,299,12],[283,12,299,16],[283,13,299,17,"finishedReconstruction"],[283,35,299,39],[283,36,299,40],[283,37,299,41],[284,8,300,12],[284,15,300,19,"packet"],[284,21,300,25],[285,6,301,8],[286,6,302,8],[286,13,302,15],[286,17,302,19],[287,4,303,4],[288,4,304,4],[289,0,305,0],[290,0,306,0],[291,4,307,4,"finishedReconstruction"],[291,26,307,26,"finishedReconstruction"],[291,27,307,26],[291,29,307,29],[292,6,308,8],[292,10,308,12],[292,11,308,13,"reconPack"],[292,20,308,22],[292,23,308,25],[292,27,308,29],[293,6,309,8],[293,10,309,12],[293,11,309,13,"buffers"],[293,18,309,20],[293,21,309,23],[293,23,309,25],[294,4,310,4],[295,2,311,0],[296,0,311,1],[296,3]],"functionMap":{"names":["<global>","<anonymous>","Encoder","Encoder#constructor","Encoder#encode","Encoder#encodeAsString","Encoder#encodeAsBinary","isObject","Decoder","Decoder#constructor","Decoder#add","Decoder#decodeString","Decoder#tryParse","Decoder.isPayloadValid","Decoder#destroy","BinaryReconstructor","BinaryReconstructor#constructor","BinaryReconstructor#takeBinaryData","BinaryReconstructor#finishedReconstruction"],"mappings":"AAA;CCqB;CDQ;OEI;ICM;KDE;IEO;KFc;IGI;KHsB;IIM;KJM;CFC;AOE;CPE;OQM;ICM;KDG;IEM;KFuC;IGO;KH6D;IIC;KJO;IKC;KLkB;IMI;KNK;CRC;AeS;ICC;KDI;IES;KFS;IGI;KHG;CfC"}},"type":"js/module"}]}