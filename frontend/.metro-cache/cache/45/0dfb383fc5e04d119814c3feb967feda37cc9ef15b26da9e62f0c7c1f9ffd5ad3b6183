{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"engine.io-client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"47uBFHNKf+pJCWjWFCflLVQYGvc=","exportNames":["*"]}},{"name":"./socket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":37,"index":124}}],"key":"eFXiJ3xGWi9z9IR2MpLa1oE6lVc=","exportNames":["*"]}},{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":43,"index":168}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"]}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":169},"end":{"line":4,"column":29,"index":198}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"]}},{"name":"./contrib/backo2.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":199},"end":{"line":5,"column":46,"index":245}}],"key":"+xoCajj5ZHxeBmv1nKLJe2m7TC8=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":246},"end":{"line":6,"column":56,"index":302}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":303},"end":{"line":7,"column":32,"index":335}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Manager = void 0;\n  var _engine = require(_dependencyMap[1], \"engine.io-client\");\n  var _socket = require(_dependencyMap[2], \"./socket.js\");\n  var parser = _interopRequireWildcard(require(_dependencyMap[3], \"socket.io-parser\"));\n  var _on = require(_dependencyMap[4], \"./on.js\");\n  var _backo = require(_dependencyMap[5], \"./contrib/backo2.js\");\n  var _componentEmitter = require(_dependencyMap[6], \"@socket.io/component-emitter\");\n  var _debug = _interopRequireDefault(require(_dependencyMap[7], \"debug\"));\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  // debug()\n  const debug = (0, _debug.default)(\"socket.io-client:manager\"); // debug()\n  class Manager extends _componentEmitter.Emitter {\n    constructor(uri, opts) {\n      var _a;\n      super();\n      this.nsps = {};\n      this.subs = [];\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = undefined;\n      }\n      opts = opts || {};\n      opts.path = opts.path || \"/socket.io\";\n      this.opts = opts;\n      (0, _engine.installTimerFunctions)(this, opts);\n      this.reconnection(opts.reconnection !== false);\n      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n      this.reconnectionDelay(opts.reconnectionDelay || 1000);\n      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n      this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n      this.backoff = new _backo.Backoff({\n        min: this.reconnectionDelay(),\n        max: this.reconnectionDelayMax(),\n        jitter: this.randomizationFactor()\n      });\n      this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n      this._readyState = \"closed\";\n      this.uri = uri;\n      const _parser = opts.parser || parser;\n      this.encoder = new _parser.Encoder();\n      this.decoder = new _parser.Decoder();\n      this._autoConnect = opts.autoConnect !== false;\n      if (this._autoConnect) this.open();\n    }\n    reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      if (!v) {\n        this.skipReconnect = true;\n      }\n      return this;\n    }\n    reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n    reconnectionDelay(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n    randomizationFactor(v) {\n      var _a;\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n    reconnectionDelayMax(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n    timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n      debug(\"readyState %s\", this._readyState);\n      if (~this._readyState.indexOf(\"open\")) return this;\n      debug(\"opening %s\", this.uri);\n      this.engine = new _engine.Socket(this.uri, this.opts);\n      const socket = this.engine;\n      const self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false;\n      // emit `open`\n      const openSubDestroy = (0, _on.on)(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      });\n      const onError = err => {\n        debug(\"error\");\n        this.cleanup();\n        this._readyState = \"closed\";\n        this.emitReserved(\"error\", err);\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          this.maybeReconnectOnOpen();\n        }\n      };\n      // emit `error`\n      const errorSub = (0, _on.on)(socket, \"error\", onError);\n      if (false !== this._timeout) {\n        const timeout = this._timeout;\n        debug(\"connect attempt will timeout after %d\", timeout);\n        // set timer\n        const timer = this.setTimeoutFn(() => {\n          debug(\"connect attempt timed out after %d\", timeout);\n          openSubDestroy();\n          onError(new Error(\"timeout\"));\n          socket.close();\n        }, timeout);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(() => {\n          this.clearTimeoutFn(timer);\n        });\n      }\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n      debug(\"open\");\n      // clear old subs\n      this.cleanup();\n      // mark as open\n      this._readyState = \"open\";\n      this.emitReserved(\"open\");\n      // add new subs\n      const socket = this.engine;\n      this.subs.push((0, _on.on)(socket, \"ping\", this.onping.bind(this)), (0, _on.on)(socket, \"data\", this.ondata.bind(this)), (0, _on.on)(socket, \"error\", this.onerror.bind(this)), (0, _on.on)(socket, \"close\", this.onclose.bind(this)),\n      // @ts-ignore\n      (0, _on.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n      this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n      try {\n        this.decoder.add(data);\n      } catch (e) {\n        this.onclose(\"parse error\", e);\n      }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n      // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n      (0, _engine.nextTick)(() => {\n        this.emitReserved(\"packet\", packet);\n      }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n      debug(\"error\", err);\n      this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n      let socket = this.nsps[nsp];\n      if (!socket) {\n        socket = new _socket.Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      } else if (this._autoConnect && !socket.active) {\n        socket.connect();\n      }\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n      const nsps = Object.keys(this.nsps);\n      for (const nsp of nsps) {\n        const socket = this.nsps[nsp];\n        if (socket.active) {\n          debug(\"socket %s is still active, skipping close\", nsp);\n          return;\n        }\n      }\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n      debug(\"writing packet %j\", packet);\n      const encodedPackets = this.encoder.encode(packet);\n      for (let i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n      debug(\"cleanup\");\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n      debug(\"disconnect\");\n      this.skipReconnect = true;\n      this._reconnecting = false;\n      this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n      return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n      var _a;\n      debug(\"closed due to %s\", reason);\n      this.cleanup();\n      (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      this.emitReserved(\"close\", reason, description);\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n      if (this._reconnecting || this.skipReconnect) return this;\n      const self = this;\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        debug(\"reconnect failed\");\n        this.backoff.reset();\n        this.emitReserved(\"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        const delay = this.backoff.duration();\n        debug(\"will wait %dms before reconnect attempt\", delay);\n        this._reconnecting = true;\n        const timer = this.setTimeoutFn(() => {\n          if (self.skipReconnect) return;\n          debug(\"attempting reconnect\");\n          this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n          // check again for the case socket closed in above events\n          if (self.skipReconnect) return;\n          self.open(err => {\n            if (err) {\n              debug(\"reconnect attempt error\");\n              self._reconnecting = false;\n              self.reconnect();\n              this.emitReserved(\"reconnect_error\", err);\n            } else {\n              debug(\"reconnect success\");\n              self.onreconnect();\n            }\n          });\n        }, delay);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(() => {\n          this.clearTimeoutFn(timer);\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n      const attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      this.emitReserved(\"reconnect\", attempt);\n    }\n  }\n  exports.Manager = Manager;\n});","lineCount":378,"map":[[7,2,1,0],[7,6,1,0,"_engine"],[7,13,1,0],[7,16,1,0,"require"],[7,23,1,0],[7,24,1,0,"_dependencyMap"],[7,38,1,0],[8,2,2,0],[8,6,2,0,"_socket"],[8,13,2,0],[8,16,2,0,"require"],[8,23,2,0],[8,24,2,0,"_dependencyMap"],[8,38,2,0],[9,2,3,0],[9,6,3,0,"parser"],[9,12,3,0],[9,15,3,0,"_interopRequireWildcard"],[9,38,3,0],[9,39,3,0,"require"],[9,46,3,0],[9,47,3,0,"_dependencyMap"],[9,61,3,0],[10,2,4,0],[10,6,4,0,"_on"],[10,9,4,0],[10,12,4,0,"require"],[10,19,4,0],[10,20,4,0,"_dependencyMap"],[10,34,4,0],[11,2,5,0],[11,6,5,0,"_backo"],[11,12,5,0],[11,15,5,0,"require"],[11,22,5,0],[11,23,5,0,"_dependencyMap"],[11,37,5,0],[12,2,6,0],[12,6,6,0,"_componentEmitter"],[12,23,6,0],[12,26,6,0,"require"],[12,33,6,0],[12,34,6,0,"_dependencyMap"],[12,48,6,0],[13,2,7,0],[13,6,7,0,"_debug"],[13,12,7,0],[13,15,7,0,"_interopRequireDefault"],[13,37,7,0],[13,38,7,0,"require"],[13,45,7,0],[13,46,7,0,"_dependencyMap"],[13,60,7,0],[14,2,7,32],[14,11,7,32,"_interopRequireWildcard"],[14,35,7,32,"e"],[14,36,7,32],[14,38,7,32,"t"],[14,39,7,32],[14,68,7,32,"WeakMap"],[14,75,7,32],[14,81,7,32,"r"],[14,82,7,32],[14,89,7,32,"WeakMap"],[14,96,7,32],[14,100,7,32,"n"],[14,101,7,32],[14,108,7,32,"WeakMap"],[14,115,7,32],[14,127,7,32,"_interopRequireWildcard"],[14,150,7,32],[14,162,7,32,"_interopRequireWildcard"],[14,163,7,32,"e"],[14,164,7,32],[14,166,7,32,"t"],[14,167,7,32],[14,176,7,32,"t"],[14,177,7,32],[14,181,7,32,"e"],[14,182,7,32],[14,186,7,32,"e"],[14,187,7,32],[14,188,7,32,"__esModule"],[14,198,7,32],[14,207,7,32,"e"],[14,208,7,32],[14,214,7,32,"o"],[14,215,7,32],[14,217,7,32,"i"],[14,218,7,32],[14,220,7,32,"f"],[14,221,7,32],[14,226,7,32,"__proto__"],[14,235,7,32],[14,243,7,32,"default"],[14,250,7,32],[14,252,7,32,"e"],[14,253,7,32],[14,270,7,32,"e"],[14,271,7,32],[14,294,7,32,"e"],[14,295,7,32],[14,320,7,32,"e"],[14,321,7,32],[14,330,7,32,"f"],[14,331,7,32],[14,337,7,32,"o"],[14,338,7,32],[14,341,7,32,"t"],[14,342,7,32],[14,345,7,32,"n"],[14,346,7,32],[14,349,7,32,"r"],[14,350,7,32],[14,358,7,32,"o"],[14,359,7,32],[14,360,7,32,"has"],[14,363,7,32],[14,364,7,32,"e"],[14,365,7,32],[14,375,7,32,"o"],[14,376,7,32],[14,377,7,32,"get"],[14,380,7,32],[14,381,7,32,"e"],[14,382,7,32],[14,385,7,32,"o"],[14,386,7,32],[14,387,7,32,"set"],[14,390,7,32],[14,391,7,32,"e"],[14,392,7,32],[14,394,7,32,"f"],[14,395,7,32],[14,411,7,32,"t"],[14,412,7,32],[14,416,7,32,"e"],[14,417,7,32],[14,433,7,32,"t"],[14,434,7,32],[14,441,7,32,"hasOwnProperty"],[14,455,7,32],[14,456,7,32,"call"],[14,460,7,32],[14,461,7,32,"e"],[14,462,7,32],[14,464,7,32,"t"],[14,465,7,32],[14,472,7,32,"i"],[14,473,7,32],[14,477,7,32,"o"],[14,478,7,32],[14,481,7,32,"Object"],[14,487,7,32],[14,488,7,32,"defineProperty"],[14,502,7,32],[14,507,7,32,"Object"],[14,513,7,32],[14,514,7,32,"getOwnPropertyDescriptor"],[14,538,7,32],[14,539,7,32,"e"],[14,540,7,32],[14,542,7,32,"t"],[14,543,7,32],[14,550,7,32,"i"],[14,551,7,32],[14,552,7,32,"get"],[14,555,7,32],[14,559,7,32,"i"],[14,560,7,32],[14,561,7,32,"set"],[14,564,7,32],[14,568,7,32,"o"],[14,569,7,32],[14,570,7,32,"f"],[14,571,7,32],[14,573,7,32,"t"],[14,574,7,32],[14,576,7,32,"i"],[14,577,7,32],[14,581,7,32,"f"],[14,582,7,32],[14,583,7,32,"t"],[14,584,7,32],[14,588,7,32,"e"],[14,589,7,32],[14,590,7,32,"t"],[14,591,7,32],[14,602,7,32,"f"],[14,603,7,32],[14,608,7,32,"e"],[14,609,7,32],[14,611,7,32,"t"],[14,612,7,32],[15,2,7,33],[16,2,8,0],[16,8,8,6,"debug"],[16,13,8,11],[16,16,8,14],[16,20,8,14,"debugModule"],[16,34,8,25],[16,36,8,26],[16,62,8,52],[16,63,8,53],[16,64,8,54],[16,65,8,55],[17,2,9,7],[17,8,9,13,"Manager"],[17,15,9,20],[17,24,9,29,"Emitter"],[17,49,9,36],[17,50,9,37],[18,4,10,4,"constructor"],[18,15,10,15,"constructor"],[18,16,10,16,"uri"],[18,19,10,19],[18,21,10,21,"opts"],[18,25,10,25],[18,27,10,27],[19,6,11,8],[19,10,11,12,"_a"],[19,12,11,14],[20,6,12,8],[20,11,12,13],[20,12,12,14],[20,13,12,15],[21,6,13,8],[21,10,13,12],[21,11,13,13,"nsps"],[21,15,13,17],[21,18,13,20],[21,19,13,21],[21,20,13,22],[22,6,14,8],[22,10,14,12],[22,11,14,13,"subs"],[22,15,14,17],[22,18,14,20],[22,20,14,22],[23,6,15,8],[23,10,15,12,"uri"],[23,13,15,15],[23,17,15,19],[23,25,15,27],[23,30,15,32],[23,37,15,39,"uri"],[23,40,15,42],[23,42,15,44],[24,8,16,12,"opts"],[24,12,16,16],[24,15,16,19,"uri"],[24,18,16,22],[25,8,17,12,"uri"],[25,11,17,15],[25,14,17,18,"undefined"],[25,23,17,27],[26,6,18,8],[27,6,19,8,"opts"],[27,10,19,12],[27,13,19,15,"opts"],[27,17,19,19],[27,21,19,23],[27,22,19,24],[27,23,19,25],[28,6,20,8,"opts"],[28,10,20,12],[28,11,20,13,"path"],[28,15,20,17],[28,18,20,20,"opts"],[28,22,20,24],[28,23,20,25,"path"],[28,27,20,29],[28,31,20,33],[28,43,20,45],[29,6,21,8],[29,10,21,12],[29,11,21,13,"opts"],[29,15,21,17],[29,18,21,20,"opts"],[29,22,21,24],[30,6,22,8],[30,10,22,8,"installTimerFunctions"],[30,39,22,29],[30,41,22,30],[30,45,22,34],[30,47,22,36,"opts"],[30,51,22,40],[30,52,22,41],[31,6,23,8],[31,10,23,12],[31,11,23,13,"reconnection"],[31,23,23,25],[31,24,23,26,"opts"],[31,28,23,30],[31,29,23,31,"reconnection"],[31,41,23,43],[31,46,23,48],[31,51,23,53],[31,52,23,54],[32,6,24,8],[32,10,24,12],[32,11,24,13,"reconnectionAttempts"],[32,31,24,33],[32,32,24,34,"opts"],[32,36,24,38],[32,37,24,39,"reconnectionAttempts"],[32,57,24,59],[32,61,24,63,"Infinity"],[32,69,24,71],[32,70,24,72],[33,6,25,8],[33,10,25,12],[33,11,25,13,"reconnectionDelay"],[33,28,25,30],[33,29,25,31,"opts"],[33,33,25,35],[33,34,25,36,"reconnectionDelay"],[33,51,25,53],[33,55,25,57],[33,59,25,61],[33,60,25,62],[34,6,26,8],[34,10,26,12],[34,11,26,13,"reconnectionDelayMax"],[34,31,26,33],[34,32,26,34,"opts"],[34,36,26,38],[34,37,26,39,"reconnectionDelayMax"],[34,57,26,59],[34,61,26,63],[34,65,26,67],[34,66,26,68],[35,6,27,8],[35,10,27,12],[35,11,27,13,"randomizationFactor"],[35,30,27,32],[35,31,27,33],[35,32,27,34,"_a"],[35,34,27,36],[35,37,27,39,"opts"],[35,41,27,43],[35,42,27,44,"randomizationFactor"],[35,61,27,63],[35,67,27,69],[35,71,27,73],[35,75,27,77,"_a"],[35,77,27,79],[35,82,27,84],[35,87,27,89],[35,88,27,90],[35,91,27,93,"_a"],[35,93,27,95],[35,96,27,98],[35,99,27,101],[35,100,27,102],[36,6,28,8],[36,10,28,12],[36,11,28,13,"backoff"],[36,18,28,20],[36,21,28,23],[36,25,28,27,"Backoff"],[36,39,28,34],[36,40,28,35],[37,8,29,12,"min"],[37,11,29,15],[37,13,29,17],[37,17,29,21],[37,18,29,22,"reconnectionDelay"],[37,35,29,39],[37,36,29,40],[37,37,29,41],[38,8,30,12,"max"],[38,11,30,15],[38,13,30,17],[38,17,30,21],[38,18,30,22,"reconnectionDelayMax"],[38,38,30,42],[38,39,30,43],[38,40,30,44],[39,8,31,12,"jitter"],[39,14,31,18],[39,16,31,20],[39,20,31,24],[39,21,31,25,"randomizationFactor"],[39,40,31,44],[39,41,31,45],[40,6,32,8],[40,7,32,9],[40,8,32,10],[41,6,33,8],[41,10,33,12],[41,11,33,13,"timeout"],[41,18,33,20],[41,19,33,21],[41,23,33,25],[41,27,33,29,"opts"],[41,31,33,33],[41,32,33,34,"timeout"],[41,39,33,41],[41,42,33,44],[41,47,33,49],[41,50,33,52,"opts"],[41,54,33,56],[41,55,33,57,"timeout"],[41,62,33,64],[41,63,33,65],[42,6,34,8],[42,10,34,12],[42,11,34,13,"_readyState"],[42,22,34,24],[42,25,34,27],[42,33,34,35],[43,6,35,8],[43,10,35,12],[43,11,35,13,"uri"],[43,14,35,16],[43,17,35,19,"uri"],[43,20,35,22],[44,6,36,8],[44,12,36,14,"_parser"],[44,19,36,21],[44,22,36,24,"opts"],[44,26,36,28],[44,27,36,29,"parser"],[44,33,36,35],[44,37,36,39,"parser"],[44,43,36,45],[45,6,37,8],[45,10,37,12],[45,11,37,13,"encoder"],[45,18,37,20],[45,21,37,23],[45,25,37,27,"_parser"],[45,32,37,34],[45,33,37,35,"Encoder"],[45,40,37,42],[45,41,37,43],[45,42,37,44],[46,6,38,8],[46,10,38,12],[46,11,38,13,"decoder"],[46,18,38,20],[46,21,38,23],[46,25,38,27,"_parser"],[46,32,38,34],[46,33,38,35,"Decoder"],[46,40,38,42],[46,41,38,43],[46,42,38,44],[47,6,39,8],[47,10,39,12],[47,11,39,13,"_autoConnect"],[47,23,39,25],[47,26,39,28,"opts"],[47,30,39,32],[47,31,39,33,"autoConnect"],[47,42,39,44],[47,47,39,49],[47,52,39,54],[48,6,40,8],[48,10,40,12],[48,14,40,16],[48,15,40,17,"_autoConnect"],[48,27,40,29],[48,29,41,12],[48,33,41,16],[48,34,41,17,"open"],[48,38,41,21],[48,39,41,22],[48,40,41,23],[49,4,42,4],[50,4,43,4,"reconnection"],[50,16,43,16,"reconnection"],[50,17,43,17,"v"],[50,18,43,18],[50,20,43,20],[51,6,44,8],[51,10,44,12],[51,11,44,13,"arguments"],[51,20,44,22],[51,21,44,23,"length"],[51,27,44,29],[51,29,45,12],[51,36,45,19],[51,40,45,23],[51,41,45,24,"_reconnection"],[51,54,45,37],[52,6,46,8],[52,10,46,12],[52,11,46,13,"_reconnection"],[52,24,46,26],[52,27,46,29],[52,28,46,30],[52,29,46,31,"v"],[52,30,46,32],[53,6,47,8],[53,10,47,12],[53,11,47,13,"v"],[53,12,47,14],[53,14,47,16],[54,8,48,12],[54,12,48,16],[54,13,48,17,"skipReconnect"],[54,26,48,30],[54,29,48,33],[54,33,48,37],[55,6,49,8],[56,6,50,8],[56,13,50,15],[56,17,50,19],[57,4,51,4],[58,4,52,4,"reconnectionAttempts"],[58,24,52,24,"reconnectionAttempts"],[58,25,52,25,"v"],[58,26,52,26],[58,28,52,28],[59,6,53,8],[59,10,53,12,"v"],[59,11,53,13],[59,16,53,18,"undefined"],[59,25,53,27],[59,27,54,12],[59,34,54,19],[59,38,54,23],[59,39,54,24,"_reconnectionAttempts"],[59,60,54,45],[60,6,55,8],[60,10,55,12],[60,11,55,13,"_reconnectionAttempts"],[60,32,55,34],[60,35,55,37,"v"],[60,36,55,38],[61,6,56,8],[61,13,56,15],[61,17,56,19],[62,4,57,4],[63,4,58,4,"reconnectionDelay"],[63,21,58,21,"reconnectionDelay"],[63,22,58,22,"v"],[63,23,58,23],[63,25,58,25],[64,6,59,8],[64,10,59,12,"_a"],[64,12,59,14],[65,6,60,8],[65,10,60,12,"v"],[65,11,60,13],[65,16,60,18,"undefined"],[65,25,60,27],[65,27,61,12],[65,34,61,19],[65,38,61,23],[65,39,61,24,"_reconnectionDelay"],[65,57,61,42],[66,6,62,8],[66,10,62,12],[66,11,62,13,"_reconnectionDelay"],[66,29,62,31],[66,32,62,34,"v"],[66,33,62,35],[67,6,63,8],[67,7,63,9,"_a"],[67,9,63,11],[67,12,63,14],[67,16,63,18],[67,17,63,19,"backoff"],[67,24,63,26],[67,30,63,32],[67,34,63,36],[67,38,63,40,"_a"],[67,40,63,42],[67,45,63,47],[67,50,63,52],[67,51,63,53],[67,54,63,56],[67,59,63,61],[67,60,63,62],[67,63,63,65,"_a"],[67,65,63,67],[67,66,63,68,"setMin"],[67,72,63,74],[67,73,63,75,"v"],[67,74,63,76],[67,75,63,77],[68,6,64,8],[68,13,64,15],[68,17,64,19],[69,4,65,4],[70,4,66,4,"randomizationFactor"],[70,23,66,23,"randomizationFactor"],[70,24,66,24,"v"],[70,25,66,25],[70,27,66,27],[71,6,67,8],[71,10,67,12,"_a"],[71,12,67,14],[72,6,68,8],[72,10,68,12,"v"],[72,11,68,13],[72,16,68,18,"undefined"],[72,25,68,27],[72,27,69,12],[72,34,69,19],[72,38,69,23],[72,39,69,24,"_randomizationFactor"],[72,59,69,44],[73,6,70,8],[73,10,70,12],[73,11,70,13,"_randomizationFactor"],[73,31,70,33],[73,34,70,36,"v"],[73,35,70,37],[74,6,71,8],[74,7,71,9,"_a"],[74,9,71,11],[74,12,71,14],[74,16,71,18],[74,17,71,19,"backoff"],[74,24,71,26],[74,30,71,32],[74,34,71,36],[74,38,71,40,"_a"],[74,40,71,42],[74,45,71,47],[74,50,71,52],[74,51,71,53],[74,54,71,56],[74,59,71,61],[74,60,71,62],[74,63,71,65,"_a"],[74,65,71,67],[74,66,71,68,"setJitter"],[74,75,71,77],[74,76,71,78,"v"],[74,77,71,79],[74,78,71,80],[75,6,72,8],[75,13,72,15],[75,17,72,19],[76,4,73,4],[77,4,74,4,"reconnectionDelayMax"],[77,24,74,24,"reconnectionDelayMax"],[77,25,74,25,"v"],[77,26,74,26],[77,28,74,28],[78,6,75,8],[78,10,75,12,"_a"],[78,12,75,14],[79,6,76,8],[79,10,76,12,"v"],[79,11,76,13],[79,16,76,18,"undefined"],[79,25,76,27],[79,27,77,12],[79,34,77,19],[79,38,77,23],[79,39,77,24,"_reconnectionDelayMax"],[79,60,77,45],[80,6,78,8],[80,10,78,12],[80,11,78,13,"_reconnectionDelayMax"],[80,32,78,34],[80,35,78,37,"v"],[80,36,78,38],[81,6,79,8],[81,7,79,9,"_a"],[81,9,79,11],[81,12,79,14],[81,16,79,18],[81,17,79,19,"backoff"],[81,24,79,26],[81,30,79,32],[81,34,79,36],[81,38,79,40,"_a"],[81,40,79,42],[81,45,79,47],[81,50,79,52],[81,51,79,53],[81,54,79,56],[81,59,79,61],[81,60,79,62],[81,63,79,65,"_a"],[81,65,79,67],[81,66,79,68,"setMax"],[81,72,79,74],[81,73,79,75,"v"],[81,74,79,76],[81,75,79,77],[82,6,80,8],[82,13,80,15],[82,17,80,19],[83,4,81,4],[84,4,82,4,"timeout"],[84,11,82,11,"timeout"],[84,12,82,12,"v"],[84,13,82,13],[84,15,82,15],[85,6,83,8],[85,10,83,12],[85,11,83,13,"arguments"],[85,20,83,22],[85,21,83,23,"length"],[85,27,83,29],[85,29,84,12],[85,36,84,19],[85,40,84,23],[85,41,84,24,"_timeout"],[85,49,84,32],[86,6,85,8],[86,10,85,12],[86,11,85,13,"_timeout"],[86,19,85,21],[86,22,85,24,"v"],[86,23,85,25],[87,6,86,8],[87,13,86,15],[87,17,86,19],[88,4,87,4],[89,4,88,4],[90,0,89,0],[91,0,90,0],[92,0,91,0],[93,0,92,0],[94,0,93,0],[95,4,94,4,"maybeReconnectOnOpen"],[95,24,94,24,"maybeReconnectOnOpen"],[95,25,94,24],[95,27,94,27],[96,6,95,8],[97,6,96,8],[97,10,96,12],[97,11,96,13],[97,15,96,17],[97,16,96,18,"_reconnecting"],[97,29,96,31],[97,33,97,12],[97,37,97,16],[97,38,97,17,"_reconnection"],[97,51,97,30],[97,55,98,12],[97,59,98,16],[97,60,98,17,"backoff"],[97,67,98,24],[97,68,98,25,"attempts"],[97,76,98,33],[97,81,98,38],[97,82,98,39],[97,84,98,41],[98,8,99,12],[99,8,100,12],[99,12,100,16],[99,13,100,17,"reconnect"],[99,22,100,26],[99,23,100,27],[99,24,100,28],[100,6,101,8],[101,4,102,4],[102,4,103,4],[103,0,104,0],[104,0,105,0],[105,0,106,0],[106,0,107,0],[107,0,108,0],[108,0,109,0],[109,4,110,4,"open"],[109,8,110,8,"open"],[109,9,110,9,"fn"],[109,11,110,11],[109,13,110,13],[110,6,111,8,"debug"],[110,11,111,13],[110,12,111,14],[110,27,111,29],[110,29,111,31],[110,33,111,35],[110,34,111,36,"_readyState"],[110,45,111,47],[110,46,111,48],[111,6,112,8],[111,10,112,12],[111,11,112,13],[111,15,112,17],[111,16,112,18,"_readyState"],[111,27,112,29],[111,28,112,30,"indexOf"],[111,35,112,37],[111,36,112,38],[111,42,112,44],[111,43,112,45],[111,45,113,12],[111,52,113,19],[111,56,113,23],[112,6,114,8,"debug"],[112,11,114,13],[112,12,114,14],[112,24,114,26],[112,26,114,28],[112,30,114,32],[112,31,114,33,"uri"],[112,34,114,36],[112,35,114,37],[113,6,115,8],[113,10,115,12],[113,11,115,13,"engine"],[113,17,115,19],[113,20,115,22],[113,24,115,26,"Engine"],[113,38,115,32],[113,39,115,33],[113,43,115,37],[113,44,115,38,"uri"],[113,47,115,41],[113,49,115,43],[113,53,115,47],[113,54,115,48,"opts"],[113,58,115,52],[113,59,115,53],[114,6,116,8],[114,12,116,14,"socket"],[114,18,116,20],[114,21,116,23],[114,25,116,27],[114,26,116,28,"engine"],[114,32,116,34],[115,6,117,8],[115,12,117,14,"self"],[115,16,117,18],[115,19,117,21],[115,23,117,25],[116,6,118,8],[116,10,118,12],[116,11,118,13,"_readyState"],[116,22,118,24],[116,25,118,27],[116,34,118,36],[117,6,119,8],[117,10,119,12],[117,11,119,13,"skipReconnect"],[117,24,119,26],[117,27,119,29],[117,32,119,34],[118,6,120,8],[119,6,121,8],[119,12,121,14,"openSubDestroy"],[119,26,121,28],[119,29,121,31],[119,33,121,31,"on"],[119,39,121,33],[119,41,121,34,"socket"],[119,47,121,40],[119,49,121,42],[119,55,121,48],[119,57,121,50],[119,69,121,62],[120,8,122,12,"self"],[120,12,122,16],[120,13,122,17,"onopen"],[120,19,122,23],[120,20,122,24],[120,21,122,25],[121,8,123,12,"fn"],[121,10,123,14],[121,14,123,18,"fn"],[121,16,123,20],[121,17,123,21],[121,18,123,22],[122,6,124,8],[122,7,124,9],[122,8,124,10],[123,6,125,8],[123,12,125,14,"onError"],[123,19,125,21],[123,22,125,25,"err"],[123,25,125,28],[123,29,125,33],[124,8,126,12,"debug"],[124,13,126,17],[124,14,126,18],[124,21,126,25],[124,22,126,26],[125,8,127,12],[125,12,127,16],[125,13,127,17,"cleanup"],[125,20,127,24],[125,21,127,25],[125,22,127,26],[126,8,128,12],[126,12,128,16],[126,13,128,17,"_readyState"],[126,24,128,28],[126,27,128,31],[126,35,128,39],[127,8,129,12],[127,12,129,16],[127,13,129,17,"emitReserved"],[127,25,129,29],[127,26,129,30],[127,33,129,37],[127,35,129,39,"err"],[127,38,129,42],[127,39,129,43],[128,8,130,12],[128,12,130,16,"fn"],[128,14,130,18],[128,16,130,20],[129,10,131,16,"fn"],[129,12,131,18],[129,13,131,19,"err"],[129,16,131,22],[129,17,131,23],[130,8,132,12],[130,9,132,13],[130,15,133,17],[131,10,134,16],[132,10,135,16],[132,14,135,20],[132,15,135,21,"maybeReconnectOnOpen"],[132,35,135,41],[132,36,135,42],[132,37,135,43],[133,8,136,12],[134,6,137,8],[134,7,137,9],[135,6,138,8],[136,6,139,8],[136,12,139,14,"errorSub"],[136,20,139,22],[136,23,139,25],[136,27,139,25,"on"],[136,33,139,27],[136,35,139,28,"socket"],[136,41,139,34],[136,43,139,36],[136,50,139,43],[136,52,139,45,"onError"],[136,59,139,52],[136,60,139,53],[137,6,140,8],[137,10,140,12],[137,15,140,17],[137,20,140,22],[137,24,140,26],[137,25,140,27,"_timeout"],[137,33,140,35],[137,35,140,37],[138,8,141,12],[138,14,141,18,"timeout"],[138,21,141,25],[138,24,141,28],[138,28,141,32],[138,29,141,33,"_timeout"],[138,37,141,41],[139,8,142,12,"debug"],[139,13,142,17],[139,14,142,18],[139,53,142,57],[139,55,142,59,"timeout"],[139,62,142,66],[139,63,142,67],[140,8,143,12],[141,8,144,12],[141,14,144,18,"timer"],[141,19,144,23],[141,22,144,26],[141,26,144,30],[141,27,144,31,"setTimeoutFn"],[141,39,144,43],[141,40,144,44],[141,46,144,50],[142,10,145,16,"debug"],[142,15,145,21],[142,16,145,22],[142,52,145,58],[142,54,145,60,"timeout"],[142,61,145,67],[142,62,145,68],[143,10,146,16,"openSubDestroy"],[143,24,146,30],[143,25,146,31],[143,26,146,32],[144,10,147,16,"onError"],[144,17,147,23],[144,18,147,24],[144,22,147,28,"Error"],[144,27,147,33],[144,28,147,34],[144,37,147,43],[144,38,147,44],[144,39,147,45],[145,10,148,16,"socket"],[145,16,148,22],[145,17,148,23,"close"],[145,22,148,28],[145,23,148,29],[145,24,148,30],[146,8,149,12],[146,9,149,13],[146,11,149,15,"timeout"],[146,18,149,22],[146,19,149,23],[147,8,150,12],[147,12,150,16],[147,16,150,20],[147,17,150,21,"opts"],[147,21,150,25],[147,22,150,26,"autoUnref"],[147,31,150,35],[147,33,150,37],[148,10,151,16,"timer"],[148,15,151,21],[148,16,151,22,"unref"],[148,21,151,27],[148,22,151,28],[148,23,151,29],[149,8,152,12],[150,8,153,12],[150,12,153,16],[150,13,153,17,"subs"],[150,17,153,21],[150,18,153,22,"push"],[150,22,153,26],[150,23,153,27],[150,29,153,33],[151,10,154,16],[151,14,154,20],[151,15,154,21,"clearTimeoutFn"],[151,29,154,35],[151,30,154,36,"timer"],[151,35,154,41],[151,36,154,42],[152,8,155,12],[152,9,155,13],[152,10,155,14],[153,6,156,8],[154,6,157,8],[154,10,157,12],[154,11,157,13,"subs"],[154,15,157,17],[154,16,157,18,"push"],[154,20,157,22],[154,21,157,23,"openSubDestroy"],[154,35,157,37],[154,36,157,38],[155,6,158,8],[155,10,158,12],[155,11,158,13,"subs"],[155,15,158,17],[155,16,158,18,"push"],[155,20,158,22],[155,21,158,23,"errorSub"],[155,29,158,31],[155,30,158,32],[156,6,159,8],[156,13,159,15],[156,17,159,19],[157,4,160,4],[158,4,161,4],[159,0,162,0],[160,0,163,0],[161,0,164,0],[162,0,165,0],[163,0,166,0],[164,4,167,4,"connect"],[164,11,167,11,"connect"],[164,12,167,12,"fn"],[164,14,167,14],[164,16,167,16],[165,6,168,8],[165,13,168,15],[165,17,168,19],[165,18,168,20,"open"],[165,22,168,24],[165,23,168,25,"fn"],[165,25,168,27],[165,26,168,28],[166,4,169,4],[167,4,170,4],[168,0,171,0],[169,0,172,0],[170,0,173,0],[171,0,174,0],[172,4,175,4,"onopen"],[172,10,175,10,"onopen"],[172,11,175,10],[172,13,175,13],[173,6,176,8,"debug"],[173,11,176,13],[173,12,176,14],[173,18,176,20],[173,19,176,21],[174,6,177,8],[175,6,178,8],[175,10,178,12],[175,11,178,13,"cleanup"],[175,18,178,20],[175,19,178,21],[175,20,178,22],[176,6,179,8],[177,6,180,8],[177,10,180,12],[177,11,180,13,"_readyState"],[177,22,180,24],[177,25,180,27],[177,31,180,33],[178,6,181,8],[178,10,181,12],[178,11,181,13,"emitReserved"],[178,23,181,25],[178,24,181,26],[178,30,181,32],[178,31,181,33],[179,6,182,8],[180,6,183,8],[180,12,183,14,"socket"],[180,18,183,20],[180,21,183,23],[180,25,183,27],[180,26,183,28,"engine"],[180,32,183,34],[181,6,184,8],[181,10,184,12],[181,11,184,13,"subs"],[181,15,184,17],[181,16,184,18,"push"],[181,20,184,22],[181,21,184,23],[181,25,184,23,"on"],[181,31,184,25],[181,33,184,26,"socket"],[181,39,184,32],[181,41,184,34],[181,47,184,40],[181,49,184,42],[181,53,184,46],[181,54,184,47,"onping"],[181,60,184,53],[181,61,184,54,"bind"],[181,65,184,58],[181,66,184,59],[181,70,184,63],[181,71,184,64],[181,72,184,65],[181,74,184,67],[181,78,184,67,"on"],[181,84,184,69],[181,86,184,70,"socket"],[181,92,184,76],[181,94,184,78],[181,100,184,84],[181,102,184,86],[181,106,184,90],[181,107,184,91,"ondata"],[181,113,184,97],[181,114,184,98,"bind"],[181,118,184,102],[181,119,184,103],[181,123,184,107],[181,124,184,108],[181,125,184,109],[181,127,184,111],[181,131,184,111,"on"],[181,137,184,113],[181,139,184,114,"socket"],[181,145,184,120],[181,147,184,122],[181,154,184,129],[181,156,184,131],[181,160,184,135],[181,161,184,136,"onerror"],[181,168,184,143],[181,169,184,144,"bind"],[181,173,184,148],[181,174,184,149],[181,178,184,153],[181,179,184,154],[181,180,184,155],[181,182,184,157],[181,186,184,157,"on"],[181,192,184,159],[181,194,184,160,"socket"],[181,200,184,166],[181,202,184,168],[181,209,184,175],[181,211,184,177],[181,215,184,181],[181,216,184,182,"onclose"],[181,223,184,189],[181,224,184,190,"bind"],[181,228,184,194],[181,229,184,195],[181,233,184,199],[181,234,184,200],[181,235,184,201],[182,6,185,8],[183,6,186,8],[183,10,186,8,"on"],[183,16,186,10],[183,18,186,11],[183,22,186,15],[183,23,186,16,"decoder"],[183,30,186,23],[183,32,186,25],[183,41,186,34],[183,43,186,36],[183,47,186,40],[183,48,186,41,"ondecoded"],[183,57,186,50],[183,58,186,51,"bind"],[183,62,186,55],[183,63,186,56],[183,67,186,60],[183,68,186,61],[183,69,186,62],[183,70,186,63],[184,4,187,4],[185,4,188,4],[186,0,189,0],[187,0,190,0],[188,0,191,0],[189,0,192,0],[190,4,193,4,"onping"],[190,10,193,10,"onping"],[190,11,193,10],[190,13,193,13],[191,6,194,8],[191,10,194,12],[191,11,194,13,"emitReserved"],[191,23,194,25],[191,24,194,26],[191,30,194,32],[191,31,194,33],[192,4,195,4],[193,4,196,4],[194,0,197,0],[195,0,198,0],[196,0,199,0],[197,0,200,0],[198,4,201,4,"ondata"],[198,10,201,10,"ondata"],[198,11,201,11,"data"],[198,15,201,15],[198,17,201,17],[199,6,202,8],[199,10,202,12],[200,8,203,12],[200,12,203,16],[200,13,203,17,"decoder"],[200,20,203,24],[200,21,203,25,"add"],[200,24,203,28],[200,25,203,29,"data"],[200,29,203,33],[200,30,203,34],[201,6,204,8],[201,7,204,9],[201,8,205,8],[201,15,205,15,"e"],[201,16,205,16],[201,18,205,18],[202,8,206,12],[202,12,206,16],[202,13,206,17,"onclose"],[202,20,206,24],[202,21,206,25],[202,34,206,38],[202,36,206,40,"e"],[202,37,206,41],[202,38,206,42],[203,6,207,8],[204,4,208,4],[205,4,209,4],[206,0,210,0],[207,0,211,0],[208,0,212,0],[209,0,213,0],[210,4,214,4,"ondecoded"],[210,13,214,13,"ondecoded"],[210,14,214,14,"packet"],[210,20,214,20],[210,22,214,22],[211,6,215,8],[212,6,216,8],[212,10,216,8,"nextTick"],[212,26,216,16],[212,28,216,17],[212,34,216,23],[213,8,217,12],[213,12,217,16],[213,13,217,17,"emitReserved"],[213,25,217,29],[213,26,217,30],[213,34,217,38],[213,36,217,40,"packet"],[213,42,217,46],[213,43,217,47],[214,6,218,8],[214,7,218,9],[214,9,218,11],[214,13,218,15],[214,14,218,16,"setTimeoutFn"],[214,26,218,28],[214,27,218,29],[215,4,219,4],[216,4,220,4],[217,0,221,0],[218,0,222,0],[219,0,223,0],[220,0,224,0],[221,4,225,4,"onerror"],[221,11,225,11,"onerror"],[221,12,225,12,"err"],[221,15,225,15],[221,17,225,17],[222,6,226,8,"debug"],[222,11,226,13],[222,12,226,14],[222,19,226,21],[222,21,226,23,"err"],[222,24,226,26],[222,25,226,27],[223,6,227,8],[223,10,227,12],[223,11,227,13,"emitReserved"],[223,23,227,25],[223,24,227,26],[223,31,227,33],[223,33,227,35,"err"],[223,36,227,38],[223,37,227,39],[224,4,228,4],[225,4,229,4],[226,0,230,0],[227,0,231,0],[228,0,232,0],[229,0,233,0],[230,0,234,0],[231,4,235,4,"socket"],[231,10,235,10,"socket"],[231,11,235,11,"nsp"],[231,14,235,14],[231,16,235,16,"opts"],[231,20,235,20],[231,22,235,22],[232,6,236,8],[232,10,236,12,"socket"],[232,16,236,18],[232,19,236,21],[232,23,236,25],[232,24,236,26,"nsps"],[232,28,236,30],[232,29,236,31,"nsp"],[232,32,236,34],[232,33,236,35],[233,6,237,8],[233,10,237,12],[233,11,237,13,"socket"],[233,17,237,19],[233,19,237,21],[234,8,238,12,"socket"],[234,14,238,18],[234,17,238,21],[234,21,238,25,"Socket"],[234,35,238,31],[234,36,238,32],[234,40,238,36],[234,42,238,38,"nsp"],[234,45,238,41],[234,47,238,43,"opts"],[234,51,238,47],[234,52,238,48],[235,8,239,12],[235,12,239,16],[235,13,239,17,"nsps"],[235,17,239,21],[235,18,239,22,"nsp"],[235,21,239,25],[235,22,239,26],[235,25,239,29,"socket"],[235,31,239,35],[236,6,240,8],[236,7,240,9],[236,13,241,13],[236,17,241,17],[236,21,241,21],[236,22,241,22,"_autoConnect"],[236,34,241,34],[236,38,241,38],[236,39,241,39,"socket"],[236,45,241,45],[236,46,241,46,"active"],[236,52,241,52],[236,54,241,54],[237,8,242,12,"socket"],[237,14,242,18],[237,15,242,19,"connect"],[237,22,242,26],[237,23,242,27],[237,24,242,28],[238,6,243,8],[239,6,244,8],[239,13,244,15,"socket"],[239,19,244,21],[240,4,245,4],[241,4,246,4],[242,0,247,0],[243,0,248,0],[244,0,249,0],[245,0,250,0],[246,0,251,0],[247,4,252,4,"_destroy"],[247,12,252,12,"_destroy"],[247,13,252,13,"socket"],[247,19,252,19],[247,21,252,21],[248,6,253,8],[248,12,253,14,"nsps"],[248,16,253,18],[248,19,253,21,"Object"],[248,25,253,27],[248,26,253,28,"keys"],[248,30,253,32],[248,31,253,33],[248,35,253,37],[248,36,253,38,"nsps"],[248,40,253,42],[248,41,253,43],[249,6,254,8],[249,11,254,13],[249,17,254,19,"nsp"],[249,20,254,22],[249,24,254,26,"nsps"],[249,28,254,30],[249,30,254,32],[250,8,255,12],[250,14,255,18,"socket"],[250,20,255,24],[250,23,255,27],[250,27,255,31],[250,28,255,32,"nsps"],[250,32,255,36],[250,33,255,37,"nsp"],[250,36,255,40],[250,37,255,41],[251,8,256,12],[251,12,256,16,"socket"],[251,18,256,22],[251,19,256,23,"active"],[251,25,256,29],[251,27,256,31],[252,10,257,16,"debug"],[252,15,257,21],[252,16,257,22],[252,59,257,65],[252,61,257,67,"nsp"],[252,64,257,70],[252,65,257,71],[253,10,258,16],[254,8,259,12],[255,6,260,8],[256,6,261,8],[256,10,261,12],[256,11,261,13,"_close"],[256,17,261,19],[256,18,261,20],[256,19,261,21],[257,4,262,4],[258,4,263,4],[259,0,264,0],[260,0,265,0],[261,0,266,0],[262,0,267,0],[263,0,268,0],[264,4,269,4,"_packet"],[264,11,269,11,"_packet"],[264,12,269,12,"packet"],[264,18,269,18],[264,20,269,20],[265,6,270,8,"debug"],[265,11,270,13],[265,12,270,14],[265,31,270,33],[265,33,270,35,"packet"],[265,39,270,41],[265,40,270,42],[266,6,271,8],[266,12,271,14,"encodedPackets"],[266,26,271,28],[266,29,271,31],[266,33,271,35],[266,34,271,36,"encoder"],[266,41,271,43],[266,42,271,44,"encode"],[266,48,271,50],[266,49,271,51,"packet"],[266,55,271,57],[266,56,271,58],[267,6,272,8],[267,11,272,13],[267,15,272,17,"i"],[267,16,272,18],[267,19,272,21],[267,20,272,22],[267,22,272,24,"i"],[267,23,272,25],[267,26,272,28,"encodedPackets"],[267,40,272,42],[267,41,272,43,"length"],[267,47,272,49],[267,49,272,51,"i"],[267,50,272,52],[267,52,272,54],[267,54,272,56],[268,8,273,12],[268,12,273,16],[268,13,273,17,"engine"],[268,19,273,23],[268,20,273,24,"write"],[268,25,273,29],[268,26,273,30,"encodedPackets"],[268,40,273,44],[268,41,273,45,"i"],[268,42,273,46],[268,43,273,47],[268,45,273,49,"packet"],[268,51,273,55],[268,52,273,56,"options"],[268,59,273,63],[268,60,273,64],[269,6,274,8],[270,4,275,4],[271,4,276,4],[272,0,277,0],[273,0,278,0],[274,0,279,0],[275,0,280,0],[276,4,281,4,"cleanup"],[276,11,281,11,"cleanup"],[276,12,281,11],[276,14,281,14],[277,6,282,8,"debug"],[277,11,282,13],[277,12,282,14],[277,21,282,23],[277,22,282,24],[278,6,283,8],[278,10,283,12],[278,11,283,13,"subs"],[278,15,283,17],[278,16,283,18,"forEach"],[278,23,283,25],[278,24,283,27,"subDestroy"],[278,34,283,37],[278,38,283,42,"subDestroy"],[278,48,283,52],[278,49,283,53],[278,50,283,54],[278,51,283,55],[279,6,284,8],[279,10,284,12],[279,11,284,13,"subs"],[279,15,284,17],[279,16,284,18,"length"],[279,22,284,24],[279,25,284,27],[279,26,284,28],[280,6,285,8],[280,10,285,12],[280,11,285,13,"decoder"],[280,18,285,20],[280,19,285,21,"destroy"],[280,26,285,28],[280,27,285,29],[280,28,285,30],[281,4,286,4],[282,4,287,4],[283,0,288,0],[284,0,289,0],[285,0,290,0],[286,0,291,0],[287,4,292,4,"_close"],[287,10,292,10,"_close"],[287,11,292,10],[287,13,292,13],[288,6,293,8,"debug"],[288,11,293,13],[288,12,293,14],[288,24,293,26],[288,25,293,27],[289,6,294,8],[289,10,294,12],[289,11,294,13,"skipReconnect"],[289,24,294,26],[289,27,294,29],[289,31,294,33],[290,6,295,8],[290,10,295,12],[290,11,295,13,"_reconnecting"],[290,24,295,26],[290,27,295,29],[290,32,295,34],[291,6,296,8],[291,10,296,12],[291,11,296,13,"onclose"],[291,18,296,20],[291,19,296,21],[291,33,296,35],[291,34,296,36],[292,4,297,4],[293,4,298,4],[294,0,299,0],[295,0,300,0],[296,0,301,0],[297,0,302,0],[298,4,303,4,"disconnect"],[298,14,303,14,"disconnect"],[298,15,303,14],[298,17,303,17],[299,6,304,8],[299,13,304,15],[299,17,304,19],[299,18,304,20,"_close"],[299,24,304,26],[299,25,304,27],[299,26,304,28],[300,4,305,4],[301,4,306,4],[302,0,307,0],[303,0,308,0],[304,0,309,0],[305,0,310,0],[306,0,311,0],[307,0,312,0],[308,0,313,0],[309,0,314,0],[310,4,315,4,"onclose"],[310,11,315,11,"onclose"],[310,12,315,12,"reason"],[310,18,315,18],[310,20,315,20,"description"],[310,31,315,31],[310,33,315,33],[311,6,316,8],[311,10,316,12,"_a"],[311,12,316,14],[312,6,317,8,"debug"],[312,11,317,13],[312,12,317,14],[312,30,317,32],[312,32,317,34,"reason"],[312,38,317,40],[312,39,317,41],[313,6,318,8],[313,10,318,12],[313,11,318,13,"cleanup"],[313,18,318,20],[313,19,318,21],[313,20,318,22],[314,6,319,8],[314,7,319,9,"_a"],[314,9,319,11],[314,12,319,14],[314,16,319,18],[314,17,319,19,"engine"],[314,23,319,25],[314,29,319,31],[314,33,319,35],[314,37,319,39,"_a"],[314,39,319,41],[314,44,319,46],[314,49,319,51],[314,50,319,52],[314,53,319,55],[314,58,319,60],[314,59,319,61],[314,62,319,64,"_a"],[314,64,319,66],[314,65,319,67,"close"],[314,70,319,72],[314,71,319,73],[314,72,319,74],[315,6,320,8],[315,10,320,12],[315,11,320,13,"backoff"],[315,18,320,20],[315,19,320,21,"reset"],[315,24,320,26],[315,25,320,27],[315,26,320,28],[316,6,321,8],[316,10,321,12],[316,11,321,13,"_readyState"],[316,22,321,24],[316,25,321,27],[316,33,321,35],[317,6,322,8],[317,10,322,12],[317,11,322,13,"emitReserved"],[317,23,322,25],[317,24,322,26],[317,31,322,33],[317,33,322,35,"reason"],[317,39,322,41],[317,41,322,43,"description"],[317,52,322,54],[317,53,322,55],[318,6,323,8],[318,10,323,12],[318,14,323,16],[318,15,323,17,"_reconnection"],[318,28,323,30],[318,32,323,34],[318,33,323,35],[318,37,323,39],[318,38,323,40,"skipReconnect"],[318,51,323,53],[318,53,323,55],[319,8,324,12],[319,12,324,16],[319,13,324,17,"reconnect"],[319,22,324,26],[319,23,324,27],[319,24,324,28],[320,6,325,8],[321,4,326,4],[322,4,327,4],[323,0,328,0],[324,0,329,0],[325,0,330,0],[326,0,331,0],[327,4,332,4,"reconnect"],[327,13,332,13,"reconnect"],[327,14,332,13],[327,16,332,16],[328,6,333,8],[328,10,333,12],[328,14,333,16],[328,15,333,17,"_reconnecting"],[328,28,333,30],[328,32,333,34],[328,36,333,38],[328,37,333,39,"skipReconnect"],[328,50,333,52],[328,52,334,12],[328,59,334,19],[328,63,334,23],[329,6,335,8],[329,12,335,14,"self"],[329,16,335,18],[329,19,335,21],[329,23,335,25],[330,6,336,8],[330,10,336,12],[330,14,336,16],[330,15,336,17,"backoff"],[330,22,336,24],[330,23,336,25,"attempts"],[330,31,336,33],[330,35,336,37],[330,39,336,41],[330,40,336,42,"_reconnectionAttempts"],[330,61,336,63],[330,63,336,65],[331,8,337,12,"debug"],[331,13,337,17],[331,14,337,18],[331,32,337,36],[331,33,337,37],[332,8,338,12],[332,12,338,16],[332,13,338,17,"backoff"],[332,20,338,24],[332,21,338,25,"reset"],[332,26,338,30],[332,27,338,31],[332,28,338,32],[333,8,339,12],[333,12,339,16],[333,13,339,17,"emitReserved"],[333,25,339,29],[333,26,339,30],[333,44,339,48],[333,45,339,49],[334,8,340,12],[334,12,340,16],[334,13,340,17,"_reconnecting"],[334,26,340,30],[334,29,340,33],[334,34,340,38],[335,6,341,8],[335,7,341,9],[335,13,342,13],[336,8,343,12],[336,14,343,18,"delay"],[336,19,343,23],[336,22,343,26],[336,26,343,30],[336,27,343,31,"backoff"],[336,34,343,38],[336,35,343,39,"duration"],[336,43,343,47],[336,44,343,48],[336,45,343,49],[337,8,344,12,"debug"],[337,13,344,17],[337,14,344,18],[337,55,344,59],[337,57,344,61,"delay"],[337,62,344,66],[337,63,344,67],[338,8,345,12],[338,12,345,16],[338,13,345,17,"_reconnecting"],[338,26,345,30],[338,29,345,33],[338,33,345,37],[339,8,346,12],[339,14,346,18,"timer"],[339,19,346,23],[339,22,346,26],[339,26,346,30],[339,27,346,31,"setTimeoutFn"],[339,39,346,43],[339,40,346,44],[339,46,346,50],[340,10,347,16],[340,14,347,20,"self"],[340,18,347,24],[340,19,347,25,"skipReconnect"],[340,32,347,38],[340,34,348,20],[341,10,349,16,"debug"],[341,15,349,21],[341,16,349,22],[341,38,349,44],[341,39,349,45],[342,10,350,16],[342,14,350,20],[342,15,350,21,"emitReserved"],[342,27,350,33],[342,28,350,34],[342,47,350,53],[342,49,350,55,"self"],[342,53,350,59],[342,54,350,60,"backoff"],[342,61,350,67],[342,62,350,68,"attempts"],[342,70,350,76],[342,71,350,77],[343,10,351,16],[344,10,352,16],[344,14,352,20,"self"],[344,18,352,24],[344,19,352,25,"skipReconnect"],[344,32,352,38],[344,34,353,20],[345,10,354,16,"self"],[345,14,354,20],[345,15,354,21,"open"],[345,19,354,25],[345,20,354,27,"err"],[345,23,354,30],[345,27,354,35],[346,12,355,20],[346,16,355,24,"err"],[346,19,355,27],[346,21,355,29],[347,14,356,24,"debug"],[347,19,356,29],[347,20,356,30],[347,45,356,55],[347,46,356,56],[348,14,357,24,"self"],[348,18,357,28],[348,19,357,29,"_reconnecting"],[348,32,357,42],[348,35,357,45],[348,40,357,50],[349,14,358,24,"self"],[349,18,358,28],[349,19,358,29,"reconnect"],[349,28,358,38],[349,29,358,39],[349,30,358,40],[350,14,359,24],[350,18,359,28],[350,19,359,29,"emitReserved"],[350,31,359,41],[350,32,359,42],[350,49,359,59],[350,51,359,61,"err"],[350,54,359,64],[350,55,359,65],[351,12,360,20],[351,13,360,21],[351,19,361,25],[352,14,362,24,"debug"],[352,19,362,29],[352,20,362,30],[352,39,362,49],[352,40,362,50],[353,14,363,24,"self"],[353,18,363,28],[353,19,363,29,"onreconnect"],[353,30,363,40],[353,31,363,41],[353,32,363,42],[354,12,364,20],[355,10,365,16],[355,11,365,17],[355,12,365,18],[356,8,366,12],[356,9,366,13],[356,11,366,15,"delay"],[356,16,366,20],[356,17,366,21],[357,8,367,12],[357,12,367,16],[357,16,367,20],[357,17,367,21,"opts"],[357,21,367,25],[357,22,367,26,"autoUnref"],[357,31,367,35],[357,33,367,37],[358,10,368,16,"timer"],[358,15,368,21],[358,16,368,22,"unref"],[358,21,368,27],[358,22,368,28],[358,23,368,29],[359,8,369,12],[360,8,370,12],[360,12,370,16],[360,13,370,17,"subs"],[360,17,370,21],[360,18,370,22,"push"],[360,22,370,26],[360,23,370,27],[360,29,370,33],[361,10,371,16],[361,14,371,20],[361,15,371,21,"clearTimeoutFn"],[361,29,371,35],[361,30,371,36,"timer"],[361,35,371,41],[361,36,371,42],[362,8,372,12],[362,9,372,13],[362,10,372,14],[363,6,373,8],[364,4,374,4],[365,4,375,4],[366,0,376,0],[367,0,377,0],[368,0,378,0],[369,0,379,0],[370,4,380,4,"onreconnect"],[370,15,380,15,"onreconnect"],[370,16,380,15],[370,18,380,18],[371,6,381,8],[371,12,381,14,"attempt"],[371,19,381,21],[371,22,381,24],[371,26,381,28],[371,27,381,29,"backoff"],[371,34,381,36],[371,35,381,37,"attempts"],[371,43,381,45],[372,6,382,8],[372,10,382,12],[372,11,382,13,"_reconnecting"],[372,24,382,26],[372,27,382,29],[372,32,382,34],[373,6,383,8],[373,10,383,12],[373,11,383,13,"backoff"],[373,18,383,20],[373,19,383,21,"reset"],[373,24,383,26],[373,25,383,27],[373,26,383,28],[374,6,384,8],[374,10,384,12],[374,11,384,13,"emitReserved"],[374,23,384,25],[374,24,384,26],[374,35,384,37],[374,37,384,39,"attempt"],[374,44,384,46],[374,45,384,47],[375,4,385,4],[376,2,386,0],[377,2,386,1,"exports"],[377,9,386,1],[377,10,386,1,"Manager"],[377,17,386,1],[377,20,386,1,"Manager"],[377,27,386,1],[378,0,386,1],[378,3]],"functionMap":{"names":["<global>","Manager","Manager#constructor","Manager#reconnection","Manager#reconnectionAttempts","Manager#reconnectionDelay","Manager#randomizationFactor","Manager#reconnectionDelayMax","Manager#timeout","Manager#maybeReconnectOnOpen","Manager#open","on$argument_2","onError","setTimeoutFn$argument_0","subs.push$argument_0","Manager#connect","Manager#onopen","Manager#onping","Manager#ondata","Manager#ondecoded","nextTick$argument_0","Manager#onerror","Manager#socket","Manager#_destroy","Manager#_packet","Manager#cleanup","subs.forEach$argument_0","Manager#_close","Manager#disconnect","Manager#onclose","Manager#reconnect","self.open$argument_0","Manager#onreconnect"],"mappings":"AAA;OCQ;ICC;KDgC;IEC;KFQ;IGC;KHK;IIC;KJO;IKC;KLO;IMC;KNO;IOC;KPK;IQO;KRQ;ISQ;kDCW;SDG;wBEC;SFY;4CGO;aHK;2BII;aJE;KTK;IcO;KdE;IeM;KfY;IgBM;KhBE;IiBM;KjBO;IkBM;iBCE;SDE;KlBC;IoBM;KpBG;IqBO;KrBU;IsBO;KtBU;IuBO;KvBM;IwBM;0BCE,4BD;KxBG;I0BM;K1BK;I2BM;K3BE;I4BU;K5BW;I6BM;4CjBc;0BkBQ;iBlBW;aiBC;2BhBI;agBE;K7BE;I+BM;K/BK;CDC"}},"type":"js/module"}]}