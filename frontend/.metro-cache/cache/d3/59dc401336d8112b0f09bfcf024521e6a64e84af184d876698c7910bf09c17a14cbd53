{"dependencies":[{"name":"../transport.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"q68AWRvh2qc0QUlp41HSOL9aMUA=","exportNames":["*"]}},{"name":"../util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":42,"index":87}}],"key":"kanFP5HUYYYoVhDf3d7saim1ZXY=","exportNames":["*"]}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":88},"end":{"line":3,"column":64,"index":152}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Polling = void 0;\n  var _transport = require(_dependencyMap[0], \"../transport.js\");\n  var _util = require(_dependencyMap[1], \"../util.js\");\n  var _engine = require(_dependencyMap[2], \"engine.io-parser\");\n  class Polling extends _transport.Transport {\n    constructor() {\n      super(...arguments);\n      this._polling = false;\n    }\n    get name() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n      this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n      this.readyState = \"pausing\";\n      const pause = () => {\n        this.readyState = \"paused\";\n        onPause();\n      };\n      if (this._polling || !this.writable) {\n        let total = 0;\n        if (this._polling) {\n          total++;\n          this.once(\"pollComplete\", function () {\n            --total || pause();\n          });\n        }\n        if (!this.writable) {\n          total++;\n          this.once(\"drain\", function () {\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n      this._polling = true;\n      this.doPoll();\n      this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n      const callback = packet => {\n        // if its the first message we consider the transport open\n        if (\"opening\" === this.readyState && packet.type === \"open\") {\n          this.onOpen();\n        }\n        // if its a close packet, we close the ongoing requests\n        if (\"close\" === packet.type) {\n          this.onClose({\n            description: \"transport closed by the server\"\n          });\n          return false;\n        }\n        // otherwise bypass onData and handle the message\n        this.onPacket(packet);\n      };\n      // decode payload\n      (0, _engine.decodePayload)(data, this.socket.binaryType).forEach(callback);\n      // if an event did not trigger closing\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this._polling = false;\n        this.emitReserved(\"pollComplete\");\n        if (\"open\" === this.readyState) {\n          this._poll();\n        } else {}\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n      const close = () => {\n        this.write([{\n          type: \"close\"\n        }]);\n      };\n      if (\"open\" === this.readyState) {\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n      this.writable = false;\n      (0, _engine.encodePayload)(packets, data => {\n        this.doWrite(data, () => {\n          this.writable = true;\n          this.emitReserved(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n      const schema = this.opts.secure ? \"https\" : \"http\";\n      const query = this.query || {};\n      // cache busting is forced\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = (0, _util.randomString)();\n      }\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n      return this.createUri(schema, query);\n    }\n  }\n  exports.Polling = Polling;\n});","lineCount":152,"map":[[6,2,1,0],[6,6,1,0,"_transport"],[6,16,1,0],[6,19,1,0,"require"],[6,26,1,0],[6,27,1,0,"_dependencyMap"],[6,41,1,0],[7,2,2,0],[7,6,2,0,"_util"],[7,11,2,0],[7,14,2,0,"require"],[7,21,2,0],[7,22,2,0,"_dependencyMap"],[7,36,2,0],[8,2,3,0],[8,6,3,0,"_engine"],[8,13,3,0],[8,16,3,0,"require"],[8,23,3,0],[8,24,3,0,"_dependencyMap"],[8,38,3,0],[9,2,4,7],[9,8,4,13,"Polling"],[9,15,4,20],[9,24,4,29,"Transport"],[9,44,4,38],[9,45,4,39],[10,4,5,4,"constructor"],[10,15,5,15,"constructor"],[10,16,5,15],[10,18,5,18],[11,6,6,8],[11,11,6,13],[11,12,6,14],[11,15,6,17,"arguments"],[11,24,6,26],[11,25,6,27],[12,6,7,8],[12,10,7,12],[12,11,7,13,"_polling"],[12,19,7,21],[12,22,7,24],[12,27,7,29],[13,4,8,4],[14,4,9,4],[14,8,9,8,"name"],[14,12,9,12,"name"],[14,13,9,12],[14,15,9,15],[15,6,10,8],[15,13,10,15],[15,22,10,24],[16,4,11,4],[17,4,12,4],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,4,18,4,"doOpen"],[23,10,18,10,"doOpen"],[23,11,18,10],[23,13,18,13],[24,6,19,8],[24,10,19,12],[24,11,19,13,"_poll"],[24,16,19,18],[24,17,19,19],[24,18,19,20],[25,4,20,4],[26,4,21,4],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,4,27,4,"pause"],[32,9,27,9,"pause"],[32,10,27,10,"onPause"],[32,17,27,17],[32,19,27,19],[33,6,28,8],[33,10,28,12],[33,11,28,13,"readyState"],[33,21,28,23],[33,24,28,26],[33,33,28,35],[34,6,29,8],[34,12,29,14,"pause"],[34,17,29,19],[34,20,29,22,"pause"],[34,21,29,22],[34,26,29,28],[35,8,30,12],[35,12,30,16],[35,13,30,17,"readyState"],[35,23,30,27],[35,26,30,30],[35,34,30,38],[36,8,31,12,"onPause"],[36,15,31,19],[36,16,31,20],[36,17,31,21],[37,6,32,8],[37,7,32,9],[38,6,33,8],[38,10,33,12],[38,14,33,16],[38,15,33,17,"_polling"],[38,23,33,25],[38,27,33,29],[38,28,33,30],[38,32,33,34],[38,33,33,35,"writable"],[38,41,33,43],[38,43,33,45],[39,8,34,12],[39,12,34,16,"total"],[39,17,34,21],[39,20,34,24],[39,21,34,25],[40,8,35,12],[40,12,35,16],[40,16,35,20],[40,17,35,21,"_polling"],[40,25,35,29],[40,27,35,31],[41,10,36,16,"total"],[41,15,36,21],[41,17,36,23],[42,10,37,16],[42,14,37,20],[42,15,37,21,"once"],[42,19,37,25],[42,20,37,26],[42,34,37,40],[42,36,37,42],[42,48,37,54],[43,12,38,20],[43,14,38,22,"total"],[43,19,38,27],[43,23,38,31,"pause"],[43,28,38,36],[43,29,38,37],[43,30,38,38],[44,10,39,16],[44,11,39,17],[44,12,39,18],[45,8,40,12],[46,8,41,12],[46,12,41,16],[46,13,41,17],[46,17,41,21],[46,18,41,22,"writable"],[46,26,41,30],[46,28,41,32],[47,10,42,16,"total"],[47,15,42,21],[47,17,42,23],[48,10,43,16],[48,14,43,20],[48,15,43,21,"once"],[48,19,43,25],[48,20,43,26],[48,27,43,33],[48,29,43,35],[48,41,43,47],[49,12,44,20],[49,14,44,22,"total"],[49,19,44,27],[49,23,44,31,"pause"],[49,28,44,36],[49,29,44,37],[49,30,44,38],[50,10,45,16],[50,11,45,17],[50,12,45,18],[51,8,46,12],[52,6,47,8],[52,7,47,9],[52,13,48,13],[53,8,49,12,"pause"],[53,13,49,17],[53,14,49,18],[53,15,49,19],[54,6,50,8],[55,4,51,4],[56,4,52,4],[57,0,53,0],[58,0,54,0],[59,0,55,0],[60,0,56,0],[61,4,57,4,"_poll"],[61,9,57,9,"_poll"],[61,10,57,9],[61,12,57,12],[62,6,58,8],[62,10,58,12],[62,11,58,13,"_polling"],[62,19,58,21],[62,22,58,24],[62,26,58,28],[63,6,59,8],[63,10,59,12],[63,11,59,13,"doPoll"],[63,17,59,19],[63,18,59,20],[63,19,59,21],[64,6,60,8],[64,10,60,12],[64,11,60,13,"emitReserved"],[64,23,60,25],[64,24,60,26],[64,30,60,32],[64,31,60,33],[65,4,61,4],[66,4,62,4],[67,0,63,0],[68,0,64,0],[69,0,65,0],[70,0,66,0],[71,4,67,4,"onData"],[71,10,67,10,"onData"],[71,11,67,11,"data"],[71,15,67,15],[71,17,67,17],[72,6,68,8],[72,12,68,14,"callback"],[72,20,68,22],[72,23,68,26,"packet"],[72,29,68,32],[72,33,68,37],[73,8,69,12],[74,8,70,12],[74,12,70,16],[74,21,70,25],[74,26,70,30],[74,30,70,34],[74,31,70,35,"readyState"],[74,41,70,45],[74,45,70,49,"packet"],[74,51,70,55],[74,52,70,56,"type"],[74,56,70,60],[74,61,70,65],[74,67,70,71],[74,69,70,73],[75,10,71,16],[75,14,71,20],[75,15,71,21,"onOpen"],[75,21,71,27],[75,22,71,28],[75,23,71,29],[76,8,72,12],[77,8,73,12],[78,8,74,12],[78,12,74,16],[78,19,74,23],[78,24,74,28,"packet"],[78,30,74,34],[78,31,74,35,"type"],[78,35,74,39],[78,37,74,41],[79,10,75,16],[79,14,75,20],[79,15,75,21,"onClose"],[79,22,75,28],[79,23,75,29],[80,12,75,31,"description"],[80,23,75,42],[80,25,75,44],[81,10,75,77],[81,11,75,78],[81,12,75,79],[82,10,76,16],[82,17,76,23],[82,22,76,28],[83,8,77,12],[84,8,78,12],[85,8,79,12],[85,12,79,16],[85,13,79,17,"onPacket"],[85,21,79,25],[85,22,79,26,"packet"],[85,28,79,32],[85,29,79,33],[86,6,80,8],[86,7,80,9],[87,6,81,8],[88,6,82,8],[88,10,82,8,"decodePayload"],[88,31,82,21],[88,33,82,22,"data"],[88,37,82,26],[88,39,82,28],[88,43,82,32],[88,44,82,33,"socket"],[88,50,82,39],[88,51,82,40,"binaryType"],[88,61,82,50],[88,62,82,51],[88,63,82,52,"forEach"],[88,70,82,59],[88,71,82,60,"callback"],[88,79,82,68],[88,80,82,69],[89,6,83,8],[90,6,84,8],[90,10,84,12],[90,18,84,20],[90,23,84,25],[90,27,84,29],[90,28,84,30,"readyState"],[90,38,84,40],[90,40,84,42],[91,8,85,12],[92,8,86,12],[92,12,86,16],[92,13,86,17,"_polling"],[92,21,86,25],[92,24,86,28],[92,29,86,33],[93,8,87,12],[93,12,87,16],[93,13,87,17,"emitReserved"],[93,25,87,29],[93,26,87,30],[93,40,87,44],[93,41,87,45],[94,8,88,12],[94,12,88,16],[94,18,88,22],[94,23,88,27],[94,27,88,31],[94,28,88,32,"readyState"],[94,38,88,42],[94,40,88,44],[95,10,89,16],[95,14,89,20],[95,15,89,21,"_poll"],[95,20,89,26],[95,21,89,27],[95,22,89,28],[96,8,90,12],[96,9,90,13],[96,15,91,17],[96,16,92,12],[97,6,93,8],[98,4,94,4],[99,4,95,4],[100,0,96,0],[101,0,97,0],[102,0,98,0],[103,0,99,0],[104,4,100,4,"doClose"],[104,11,100,11,"doClose"],[104,12,100,11],[104,14,100,14],[105,6,101,8],[105,12,101,14,"close"],[105,17,101,19],[105,20,101,22,"close"],[105,21,101,22],[105,26,101,28],[106,8,102,12],[106,12,102,16],[106,13,102,17,"write"],[106,18,102,22],[106,19,102,23],[106,20,102,24],[107,10,102,26,"type"],[107,14,102,30],[107,16,102,32],[108,8,102,40],[108,9,102,41],[108,10,102,42],[108,11,102,43],[109,6,103,8],[109,7,103,9],[110,6,104,8],[110,10,104,12],[110,16,104,18],[110,21,104,23],[110,25,104,27],[110,26,104,28,"readyState"],[110,36,104,38],[110,38,104,40],[111,8,105,12,"close"],[111,13,105,17],[111,14,105,18],[111,15,105,19],[112,6,106,8],[112,7,106,9],[112,13,107,13],[113,8,108,12],[114,8,109,12],[115,8,110,12],[115,12,110,16],[115,13,110,17,"once"],[115,17,110,21],[115,18,110,22],[115,24,110,28],[115,26,110,30,"close"],[115,31,110,35],[115,32,110,36],[116,6,111,8],[117,4,112,4],[118,4,113,4],[119,0,114,0],[120,0,115,0],[121,0,116,0],[122,0,117,0],[123,0,118,0],[124,4,119,4,"write"],[124,9,119,9,"write"],[124,10,119,10,"packets"],[124,17,119,17],[124,19,119,19],[125,6,120,8],[125,10,120,12],[125,11,120,13,"writable"],[125,19,120,21],[125,22,120,24],[125,27,120,29],[126,6,121,8],[126,10,121,8,"encodePayload"],[126,31,121,21],[126,33,121,22,"packets"],[126,40,121,29],[126,42,121,32,"data"],[126,46,121,36],[126,50,121,41],[127,8,122,12],[127,12,122,16],[127,13,122,17,"doWrite"],[127,20,122,24],[127,21,122,25,"data"],[127,25,122,29],[127,27,122,31],[127,33,122,37],[128,10,123,16],[128,14,123,20],[128,15,123,21,"writable"],[128,23,123,29],[128,26,123,32],[128,30,123,36],[129,10,124,16],[129,14,124,20],[129,15,124,21,"emitReserved"],[129,27,124,33],[129,28,124,34],[129,35,124,41],[129,36,124,42],[130,8,125,12],[130,9,125,13],[130,10,125,14],[131,6,126,8],[131,7,126,9],[131,8,126,10],[132,4,127,4],[133,4,128,4],[134,0,129,0],[135,0,130,0],[136,0,131,0],[137,0,132,0],[138,4,133,4,"uri"],[138,7,133,7,"uri"],[138,8,133,7],[138,10,133,10],[139,6,134,8],[139,12,134,14,"schema"],[139,18,134,20],[139,21,134,23],[139,25,134,27],[139,26,134,28,"opts"],[139,30,134,32],[139,31,134,33,"secure"],[139,37,134,39],[139,40,134,42],[139,47,134,49],[139,50,134,52],[139,56,134,58],[140,6,135,8],[140,12,135,14,"query"],[140,17,135,19],[140,20,135,22],[140,24,135,26],[140,25,135,27,"query"],[140,30,135,32],[140,34,135,36],[140,35,135,37],[140,36,135,38],[141,6,136,8],[142,6,137,8],[142,10,137,12],[142,15,137,17],[142,20,137,22],[142,24,137,26],[142,25,137,27,"opts"],[142,29,137,31],[142,30,137,32,"timestampRequests"],[142,47,137,49],[142,49,137,51],[143,8,138,12,"query"],[143,13,138,17],[143,14,138,18],[143,18,138,22],[143,19,138,23,"opts"],[143,23,138,27],[143,24,138,28,"timestampParam"],[143,38,138,42],[143,39,138,43],[143,42,138,46],[143,46,138,46,"randomString"],[143,64,138,58],[143,66,138,59],[143,67,138,60],[144,6,139,8],[145,6,140,8],[145,10,140,12],[145,11,140,13],[145,15,140,17],[145,16,140,18,"supportsBinary"],[145,30,140,32],[145,34,140,36],[145,35,140,37,"query"],[145,40,140,42],[145,41,140,43,"sid"],[145,44,140,46],[145,46,140,48],[146,8,141,12,"query"],[146,13,141,17],[146,14,141,18,"b64"],[146,17,141,21],[146,20,141,24],[146,21,141,25],[147,6,142,8],[148,6,143,8],[148,13,143,15],[148,17,143,19],[148,18,143,20,"createUri"],[148,27,143,29],[148,28,143,30,"schema"],[148,34,143,36],[148,36,143,38,"query"],[148,41,143,43],[148,42,143,44],[149,4,144,4],[150,2,145,0],[151,2,145,1,"exports"],[151,9,145,1],[151,10,145,1,"Polling"],[151,17,145,1],[151,20,145,1,"Polling"],[151,27,145,1],[152,0,145,1],[152,3]],"functionMap":{"names":["<global>","Polling","Polling#constructor","Polling#get__name","Polling#doOpen","Polling#pause","pause","once$argument_1","Polling#_poll","Polling#onData","callback","Polling#doClose","close","Polling#write","encodePayload$argument_1","doWrite$argument_1","Polling#uri"],"mappings":"AAA;OCG;ICC;KDG;IEC;KFE;IGO;KHE;IIO;sBCE;SDG;0CEK;iBFE;mCEI;iBFE;KJM;IOM;KPI;IQM;yBCC;SDY;KRc;IUM;sBCC;SDE;KVS;IYO;+BCE;+BCC;aDG;SDC;KZC;IeM;KfW;CDC"}},"type":"js/module"}]}