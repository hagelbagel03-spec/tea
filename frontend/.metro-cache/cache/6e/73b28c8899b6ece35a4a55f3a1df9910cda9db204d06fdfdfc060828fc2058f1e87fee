{"dependencies":[{"name":"./commons.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"glGFVKq6JnHqcEVNii1WndfU66Y=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.encodePacket = void 0;\n  exports.encodePacketToBinary = encodePacketToBinary;\n  var _commons = require(_dependencyMap[0], \"./commons.js\");\n  const encodePacket = ({\n    type,\n    data\n  }, supportsBinary, callback) => {\n    if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n      return callback(supportsBinary ? data : \"b\" + toBuffer(data, true).toString(\"base64\"));\n    }\n    // plain string\n    return callback(_commons.PACKET_TYPES[type] + (data || \"\"));\n  };\n  exports.encodePacket = encodePacket;\n  const toBuffer = (data, forceBufferConversion) => {\n    if (Buffer.isBuffer(data) || data instanceof Uint8Array && !forceBufferConversion) {\n      return data;\n    } else if (data instanceof ArrayBuffer) {\n      return Buffer.from(data);\n    } else {\n      return Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    }\n  };\n  let TEXT_ENCODER;\n  function encodePacketToBinary(packet, callback) {\n    if (packet.data instanceof ArrayBuffer || ArrayBuffer.isView(packet.data)) {\n      return callback(toBuffer(packet.data, false));\n    }\n    encodePacket(packet, true, encoded => {\n      if (!TEXT_ENCODER) {\n        // lazily created for compatibility with Node.js 10\n        TEXT_ENCODER = new TextEncoder();\n      }\n      callback(TEXT_ENCODER.encode(encoded));\n    });\n  }\n});","lineCount":41,"map":[[7,2,1,0],[7,6,1,0,"_commons"],[7,14,1,0],[7,17,1,0,"require"],[7,24,1,0],[7,25,1,0,"_dependencyMap"],[7,39,1,0],[8,2,2,7],[8,8,2,13,"encodePacket"],[8,20,2,25],[8,23,2,28,"encodePacket"],[8,24,2,29],[9,4,2,31,"type"],[9,8,2,35],[10,4,2,37,"data"],[11,2,2,42],[11,3,2,43],[11,5,2,45,"supportsBinary"],[11,19,2,59],[11,21,2,61,"callback"],[11,29,2,69],[11,34,2,74],[12,4,3,4],[12,8,3,8,"data"],[12,12,3,12],[12,24,3,24,"ArrayBuffer"],[12,35,3,35],[12,39,3,39,"ArrayBuffer"],[12,50,3,50],[12,51,3,51,"isView"],[12,57,3,57],[12,58,3,58,"data"],[12,62,3,62],[12,63,3,63],[12,65,3,65],[13,6,4,8],[13,13,4,15,"callback"],[13,21,4,23],[13,22,4,24,"supportsBinary"],[13,36,4,38],[13,39,4,41,"data"],[13,43,4,45],[13,46,4,48],[13,49,4,51],[13,52,4,54,"toBuffer"],[13,60,4,62],[13,61,4,63,"data"],[13,65,4,67],[13,67,4,69],[13,71,4,73],[13,72,4,74],[13,73,4,75,"toString"],[13,81,4,83],[13,82,4,84],[13,90,4,92],[13,91,4,93],[13,92,4,94],[14,4,5,4],[15,4,6,4],[16,4,7,4],[16,11,7,11,"callback"],[16,19,7,19],[16,20,7,20,"PACKET_TYPES"],[16,41,7,32],[16,42,7,33,"type"],[16,46,7,37],[16,47,7,38],[16,51,7,42,"data"],[16,55,7,46],[16,59,7,50],[16,61,7,52],[16,62,7,53],[16,63,7,54],[17,2,8,0],[17,3,8,1],[18,2,8,2,"exports"],[18,9,8,2],[18,10,8,2,"encodePacket"],[18,22,8,2],[18,25,8,2,"encodePacket"],[18,37,8,2],[19,2,9,0],[19,8,9,6,"toBuffer"],[19,16,9,14],[19,19,9,17,"toBuffer"],[19,20,9,18,"data"],[19,24,9,22],[19,26,9,24,"forceBufferConversion"],[19,47,9,45],[19,52,9,50],[20,4,10,4],[20,8,10,8,"Buffer"],[20,14,10,14],[20,15,10,15,"isBuffer"],[20,23,10,23],[20,24,10,24,"data"],[20,28,10,28],[20,29,10,29],[20,33,11,9,"data"],[20,37,11,13],[20,49,11,25,"Uint8Array"],[20,59,11,35],[20,63,11,39],[20,64,11,40,"forceBufferConversion"],[20,85,11,62],[20,87,11,64],[21,6,12,8],[21,13,12,15,"data"],[21,17,12,19],[22,4,13,4],[22,5,13,5],[22,11,14,9],[22,15,14,13,"data"],[22,19,14,17],[22,31,14,29,"ArrayBuffer"],[22,42,14,40],[22,44,14,42],[23,6,15,8],[23,13,15,15,"Buffer"],[23,19,15,21],[23,20,15,22,"from"],[23,24,15,26],[23,25,15,27,"data"],[23,29,15,31],[23,30,15,32],[24,4,16,4],[24,5,16,5],[24,11,17,9],[25,6,18,8],[25,13,18,15,"Buffer"],[25,19,18,21],[25,20,18,22,"from"],[25,24,18,26],[25,25,18,27,"data"],[25,29,18,31],[25,30,18,32,"buffer"],[25,36,18,38],[25,38,18,40,"data"],[25,42,18,44],[25,43,18,45,"byteOffset"],[25,53,18,55],[25,55,18,57,"data"],[25,59,18,61],[25,60,18,62,"byteLength"],[25,70,18,72],[25,71,18,73],[26,4,19,4],[27,2,20,0],[27,3,20,1],[28,2,21,0],[28,6,21,4,"TEXT_ENCODER"],[28,18,21,16],[29,2,22,7],[29,11,22,16,"encodePacketToBinary"],[29,31,22,36,"encodePacketToBinary"],[29,32,22,37,"packet"],[29,38,22,43],[29,40,22,45,"callback"],[29,48,22,53],[29,50,22,55],[30,4,23,4],[30,8,23,8,"packet"],[30,14,23,14],[30,15,23,15,"data"],[30,19,23,19],[30,31,23,31,"ArrayBuffer"],[30,42,23,42],[30,46,23,46,"ArrayBuffer"],[30,57,23,57],[30,58,23,58,"isView"],[30,64,23,64],[30,65,23,65,"packet"],[30,71,23,71],[30,72,23,72,"data"],[30,76,23,76],[30,77,23,77],[30,79,23,79],[31,6,24,8],[31,13,24,15,"callback"],[31,21,24,23],[31,22,24,24,"toBuffer"],[31,30,24,32],[31,31,24,33,"packet"],[31,37,24,39],[31,38,24,40,"data"],[31,42,24,44],[31,44,24,46],[31,49,24,51],[31,50,24,52],[31,51,24,53],[32,4,25,4],[33,4,26,4,"encodePacket"],[33,16,26,16],[33,17,26,17,"packet"],[33,23,26,23],[33,25,26,25],[33,29,26,29],[33,31,26,32,"encoded"],[33,38,26,39],[33,42,26,44],[34,6,27,8],[34,10,27,12],[34,11,27,13,"TEXT_ENCODER"],[34,23,27,25],[34,25,27,27],[35,8,28,12],[36,8,29,12,"TEXT_ENCODER"],[36,20,29,24],[36,23,29,27],[36,27,29,31,"TextEncoder"],[36,38,29,42],[36,39,29,43],[36,40,29,44],[37,6,30,8],[38,6,31,8,"callback"],[38,14,31,16],[38,15,31,17,"TEXT_ENCODER"],[38,27,31,29],[38,28,31,30,"encode"],[38,34,31,36],[38,35,31,37,"encoded"],[38,42,31,44],[38,43,31,45],[38,44,31,46],[39,4,32,4],[39,5,32,5],[39,6,32,6],[40,2,33,0],[41,0,33,1],[41,3]],"functionMap":{"names":["<global>","encodePacket","toBuffer","encodePacketToBinary","encodePacket$argument_2"],"mappings":"AAA;4BCC;CDM;iBEC;CFW;OGE;+BCI;KDM;CHC"}},"type":"js/module"}]}