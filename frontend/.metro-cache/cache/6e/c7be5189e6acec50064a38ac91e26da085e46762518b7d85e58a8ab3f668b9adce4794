{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}},{"name":"./binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":67,"index":123}}],"key":"n3k3ricg147CfAsjRPov5+2UD6U=","exportNames":["*"]}},{"name":"./is-binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":124},"end":{"line":3,"column":53,"index":177}}],"key":"nI6Cd4R9sJDIQIUaBK8/eqMqCAI=","exportNames":["*"]}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":178},"end":{"line":4,"column":32,"index":210}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.protocol = exports.PacketType = exports.Encoder = exports.Decoder = void 0;\n  var _componentEmitter = require(_dependencyMap[1], \"@socket.io/component-emitter\");\n  var _binary = require(_dependencyMap[2], \"./binary.js\");\n  var _isBinary = require(_dependencyMap[3], \"./is-binary.js\");\n  var _debug = _interopRequireDefault(require(_dependencyMap[4], \"debug\"));\n  // debug()\n  const debug = (0, _debug.default)(\"socket.io-parser\"); // debug()\n  /**\n   * These strings must not be used as event names, as they have a special meaning.\n   */\n  const RESERVED_EVENTS = [\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\" // used by the Node.js EventEmitter\n  ];\n  /**\n   * Protocol version.\n   *\n   * @public\n   */\n  const protocol = exports.protocol = 5;\n  var PacketType;\n  (function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n  })(PacketType || (exports.PacketType = PacketType = {}));\n  /**\n   * A socket.io Encoder instance\n   */\n  class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n      this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n      debug(\"encoding packet %j\", obj);\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if ((0, _isBinary.hasBinary)(obj)) {\n          return this.encodeAsBinary({\n            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n            nsp: obj.nsp,\n            data: obj.data,\n            id: obj.id\n          });\n        }\n      }\n      return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n      // first is type\n      let str = \"\" + obj.type;\n      // attachments if we have them\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      }\n      // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      }\n      // immediately followed by the id\n      if (null != obj.id) {\n        str += obj.id;\n      }\n      // json data\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data, this.replacer);\n      }\n      debug(\"encoded %j as %s\", obj, str);\n      return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n      const deconstruction = (0, _binary.deconstructPacket)(obj);\n      const pack = this.encodeAsString(deconstruction.packet);\n      const buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n      return buffers; // write all the buffers\n    }\n  }\n  // see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\n  exports.Encoder = Encoder;\n  function isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n  }\n  /**\n   * A socket.io Decoder instance\n   *\n   * @return {Object} decoder\n   */\n  class Decoder extends _componentEmitter.Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n      super();\n      this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n      let packet;\n      if (typeof obj === \"string\") {\n        if (this.reconstructor) {\n          throw new Error(\"got plaintext data when reconstructing a packet\");\n        }\n        packet = this.decodeString(obj);\n        const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet);\n          // no attachments, labeled binary but no binary data to follow\n          if (packet.attachments === 0) {\n            super.emitReserved(\"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          super.emitReserved(\"decoded\", packet);\n        }\n      } else if ((0, _isBinary.isBinary)(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n            super.emitReserved(\"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n      let i = 0;\n      // look up type\n      const p = {\n        type: Number(str.charAt(0))\n      };\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      }\n      // look up attachments if type binary\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        const start = i + 1;\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n        const buf = str.substring(start, i);\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n        p.attachments = Number(buf);\n      }\n      // look up namespace (if any)\n      if (\"/\" === str.charAt(i + 1)) {\n        const start = i + 1;\n        while (++i) {\n          const c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n        p.nsp = str.substring(start, i);\n      } else {\n        p.nsp = \"/\";\n      }\n      // look up id\n      const next = str.charAt(i + 1);\n      if (\"\" !== next && Number(next) == next) {\n        const start = i + 1;\n        while (++i) {\n          const c = str.charAt(i);\n          if (null == c || Number(c) != c) {\n            --i;\n            break;\n          }\n          if (i === str.length) break;\n        }\n        p.id = Number(str.substring(start, i + 1));\n      }\n      // look up json data\n      if (str.charAt(++i)) {\n        const payload = this.tryParse(str.substr(i));\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n      debug(\"decoded %s as %j\", str, p);\n      return p;\n    }\n    tryParse(str) {\n      try {\n        return JSON.parse(str, this.reviver);\n      } catch (e) {\n        return false;\n      }\n    }\n    static isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return isObject(payload);\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || isObject(payload);\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS.indexOf(payload[0]) === -1);\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n        this.reconstructor = null;\n      }\n    }\n  }\n  /**\n   * A manager of a binary event's 'buffer sequence'. Should\n   * be constructed whenever a packet of type BINARY_EVENT is\n   * decoded.\n   *\n   * @param {Object} packet\n   * @return {BinaryReconstructor} initialized reconstructor\n   */\n  exports.Decoder = Decoder;\n  class BinaryReconstructor {\n    constructor(packet) {\n      this.packet = packet;\n      this.buffers = [];\n      this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n      this.buffers.push(binData);\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        const packet = (0, _binary.reconstructPacket)(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n      return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }\n});","lineCount":303,"map":[[7,2,1,0],[7,6,1,0,"_componentEmitter"],[7,23,1,0],[7,26,1,0,"require"],[7,33,1,0],[7,34,1,0,"_dependencyMap"],[7,48,1,0],[8,2,2,0],[8,6,2,0,"_binary"],[8,13,2,0],[8,16,2,0,"require"],[8,23,2,0],[8,24,2,0,"_dependencyMap"],[8,38,2,0],[9,2,3,0],[9,6,3,0,"_isBinary"],[9,15,3,0],[9,18,3,0,"require"],[9,25,3,0],[9,26,3,0,"_dependencyMap"],[9,40,3,0],[10,2,4,0],[10,6,4,0,"_debug"],[10,12,4,0],[10,15,4,0,"_interopRequireDefault"],[10,37,4,0],[10,38,4,0,"require"],[10,45,4,0],[10,46,4,0,"_dependencyMap"],[10,60,4,0],[11,2,4,33],[12,2,5,0],[12,8,5,6,"debug"],[12,13,5,11],[12,16,5,14],[12,20,5,14,"debugModule"],[12,34,5,25],[12,36,5,26],[12,54,5,44],[12,55,5,45],[12,56,5,46],[12,57,5,47],[13,2,6,0],[14,0,7,0],[15,0,8,0],[16,2,9,0],[16,8,9,6,"RESERVED_EVENTS"],[16,23,9,21],[16,26,9,24],[16,27,10,4],[16,36,10,13],[16,38,11,4],[16,53,11,19],[16,55,12,4],[16,67,12,16],[16,69,13,4],[16,84,13,19],[16,86,14,4],[16,99,14,17],[16,101,15,4],[16,117,15,20],[16,118,15,22],[17,2,15,22],[17,3,16,1],[18,2,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,2,22,7],[23,8,22,13,"protocol"],[23,16,22,21],[23,19,22,21,"exports"],[23,26,22,21],[23,27,22,21,"protocol"],[23,35,22,21],[23,38,22,24],[23,39,22,25],[24,2,23,7],[24,6,23,11,"PacketType"],[24,16,23,21],[25,2,24,0],[25,3,24,1],[25,13,24,11,"PacketType"],[25,23,24,21],[25,25,24,23],[26,4,25,4,"PacketType"],[26,14,25,14],[26,15,25,15,"PacketType"],[26,25,25,25],[26,26,25,26],[26,35,25,35],[26,36,25,36],[26,39,25,39],[26,40,25,40],[26,41,25,41],[26,44,25,44],[26,53,25,53],[27,4,26,4,"PacketType"],[27,14,26,14],[27,15,26,15,"PacketType"],[27,25,26,25],[27,26,26,26],[27,38,26,38],[27,39,26,39],[27,42,26,42],[27,43,26,43],[27,44,26,44],[27,47,26,47],[27,59,26,59],[28,4,27,4,"PacketType"],[28,14,27,14],[28,15,27,15,"PacketType"],[28,25,27,25],[28,26,27,26],[28,33,27,33],[28,34,27,34],[28,37,27,37],[28,38,27,38],[28,39,27,39],[28,42,27,42],[28,49,27,49],[29,4,28,4,"PacketType"],[29,14,28,14],[29,15,28,15,"PacketType"],[29,25,28,25],[29,26,28,26],[29,31,28,31],[29,32,28,32],[29,35,28,35],[29,36,28,36],[29,37,28,37],[29,40,28,40],[29,45,28,45],[30,4,29,4,"PacketType"],[30,14,29,14],[30,15,29,15,"PacketType"],[30,25,29,25],[30,26,29,26],[30,41,29,41],[30,42,29,42],[30,45,29,45],[30,46,29,46],[30,47,29,47],[30,50,29,50],[30,65,29,65],[31,4,30,4,"PacketType"],[31,14,30,14],[31,15,30,15,"PacketType"],[31,25,30,25],[31,26,30,26],[31,40,30,40],[31,41,30,41],[31,44,30,44],[31,45,30,45],[31,46,30,46],[31,49,30,49],[31,63,30,63],[32,4,31,4,"PacketType"],[32,14,31,14],[32,15,31,15,"PacketType"],[32,25,31,25],[32,26,31,26],[32,38,31,38],[32,39,31,39],[32,42,31,42],[32,43,31,43],[32,44,31,44],[32,47,31,47],[32,59,31,59],[33,2,32,0],[33,3,32,1],[33,5,32,3,"PacketType"],[33,15,32,13],[33,20,32,13,"exports"],[33,27,32,13],[33,28,32,13,"PacketType"],[33,38,32,13],[33,41,32,18,"PacketType"],[33,51,32,28],[33,54,32,31],[33,55,32,32],[33,56,32,33],[33,57,32,34],[33,58,32,35],[34,2,33,0],[35,0,34,0],[36,0,35,0],[37,2,36,7],[37,8,36,13,"Encoder"],[37,15,36,20],[37,16,36,21],[38,4,37,4],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,4,42,4,"constructor"],[43,15,42,15,"constructor"],[43,16,42,16,"replacer"],[43,24,42,24],[43,26,42,26],[44,6,43,8],[44,10,43,12],[44,11,43,13,"replacer"],[44,19,43,21],[44,22,43,24,"replacer"],[44,30,43,32],[45,4,44,4],[46,4,45,4],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,0,49,0],[51,0,50,0],[52,4,51,4,"encode"],[52,10,51,10,"encode"],[52,11,51,11,"obj"],[52,14,51,14],[52,16,51,16],[53,6,52,8,"debug"],[53,11,52,13],[53,12,52,14],[53,32,52,34],[53,34,52,36,"obj"],[53,37,52,39],[53,38,52,40],[54,6,53,8],[54,10,53,12,"obj"],[54,13,53,15],[54,14,53,16,"type"],[54,18,53,20],[54,23,53,25,"PacketType"],[54,33,53,35],[54,34,53,36,"EVENT"],[54,39,53,41],[54,43,53,45,"obj"],[54,46,53,48],[54,47,53,49,"type"],[54,51,53,53],[54,56,53,58,"PacketType"],[54,66,53,68],[54,67,53,69,"ACK"],[54,70,53,72],[54,72,53,74],[55,8,54,12],[55,12,54,16],[55,16,54,16,"hasBinary"],[55,35,54,25],[55,37,54,26,"obj"],[55,40,54,29],[55,41,54,30],[55,43,54,32],[56,10,55,16],[56,17,55,23],[56,21,55,27],[56,22,55,28,"encodeAsBinary"],[56,36,55,42],[56,37,55,43],[57,12,56,20,"type"],[57,16,56,24],[57,18,56,26,"obj"],[57,21,56,29],[57,22,56,30,"type"],[57,26,56,34],[57,31,56,39,"PacketType"],[57,41,56,49],[57,42,56,50,"EVENT"],[57,47,56,55],[57,50,57,26,"PacketType"],[57,60,57,36],[57,61,57,37,"BINARY_EVENT"],[57,73,57,49],[57,76,58,26,"PacketType"],[57,86,58,36],[57,87,58,37,"BINARY_ACK"],[57,97,58,47],[58,12,59,20,"nsp"],[58,15,59,23],[58,17,59,25,"obj"],[58,20,59,28],[58,21,59,29,"nsp"],[58,24,59,32],[59,12,60,20,"data"],[59,16,60,24],[59,18,60,26,"obj"],[59,21,60,29],[59,22,60,30,"data"],[59,26,60,34],[60,12,61,20,"id"],[60,14,61,22],[60,16,61,24,"obj"],[60,19,61,27],[60,20,61,28,"id"],[61,10,62,16],[61,11,62,17],[61,12,62,18],[62,8,63,12],[63,6,64,8],[64,6,65,8],[64,13,65,15],[64,14,65,16],[64,18,65,20],[64,19,65,21,"encodeAsString"],[64,33,65,35],[64,34,65,36,"obj"],[64,37,65,39],[64,38,65,40],[64,39,65,41],[65,4,66,4],[66,4,67,4],[67,0,68,0],[68,0,69,0],[69,4,70,4,"encodeAsString"],[69,18,70,18,"encodeAsString"],[69,19,70,19,"obj"],[69,22,70,22],[69,24,70,24],[70,6,71,8],[71,6,72,8],[71,10,72,12,"str"],[71,13,72,15],[71,16,72,18],[71,18,72,20],[71,21,72,23,"obj"],[71,24,72,26],[71,25,72,27,"type"],[71,29,72,31],[72,6,73,8],[73,6,74,8],[73,10,74,12,"obj"],[73,13,74,15],[73,14,74,16,"type"],[73,18,74,20],[73,23,74,25,"PacketType"],[73,33,74,35],[73,34,74,36,"BINARY_EVENT"],[73,46,74,48],[73,50,75,12,"obj"],[73,53,75,15],[73,54,75,16,"type"],[73,58,75,20],[73,63,75,25,"PacketType"],[73,73,75,35],[73,74,75,36,"BINARY_ACK"],[73,84,75,46],[73,86,75,48],[74,8,76,12,"str"],[74,11,76,15],[74,15,76,19,"obj"],[74,18,76,22],[74,19,76,23,"attachments"],[74,30,76,34],[74,33,76,37],[74,36,76,40],[75,6,77,8],[76,6,78,8],[77,6,79,8],[78,6,80,8],[78,10,80,12,"obj"],[78,13,80,15],[78,14,80,16,"nsp"],[78,17,80,19],[78,21,80,23],[78,24,80,26],[78,29,80,31,"obj"],[78,32,80,34],[78,33,80,35,"nsp"],[78,36,80,38],[78,38,80,40],[79,8,81,12,"str"],[79,11,81,15],[79,15,81,19,"obj"],[79,18,81,22],[79,19,81,23,"nsp"],[79,22,81,26],[79,25,81,29],[79,28,81,32],[80,6,82,8],[81,6,83,8],[82,6,84,8],[82,10,84,12],[82,14,84,16],[82,18,84,20,"obj"],[82,21,84,23],[82,22,84,24,"id"],[82,24,84,26],[82,26,84,28],[83,8,85,12,"str"],[83,11,85,15],[83,15,85,19,"obj"],[83,18,85,22],[83,19,85,23,"id"],[83,21,85,25],[84,6,86,8],[85,6,87,8],[86,6,88,8],[86,10,88,12],[86,14,88,16],[86,18,88,20,"obj"],[86,21,88,23],[86,22,88,24,"data"],[86,26,88,28],[86,28,88,30],[87,8,89,12,"str"],[87,11,89,15],[87,15,89,19,"JSON"],[87,19,89,23],[87,20,89,24,"stringify"],[87,29,89,33],[87,30,89,34,"obj"],[87,33,89,37],[87,34,89,38,"data"],[87,38,89,42],[87,40,89,44],[87,44,89,48],[87,45,89,49,"replacer"],[87,53,89,57],[87,54,89,58],[88,6,90,8],[89,6,91,8,"debug"],[89,11,91,13],[89,12,91,14],[89,30,91,32],[89,32,91,34,"obj"],[89,35,91,37],[89,37,91,39,"str"],[89,40,91,42],[89,41,91,43],[90,6,92,8],[90,13,92,15,"str"],[90,16,92,18],[91,4,93,4],[92,4,94,4],[93,0,95,0],[94,0,96,0],[95,0,97,0],[96,0,98,0],[97,4,99,4,"encodeAsBinary"],[97,18,99,18,"encodeAsBinary"],[97,19,99,19,"obj"],[97,22,99,22],[97,24,99,24],[98,6,100,8],[98,12,100,14,"deconstruction"],[98,26,100,28],[98,29,100,31],[98,33,100,31,"deconstructPacket"],[98,58,100,48],[98,60,100,49,"obj"],[98,63,100,52],[98,64,100,53],[99,6,101,8],[99,12,101,14,"pack"],[99,16,101,18],[99,19,101,21],[99,23,101,25],[99,24,101,26,"encodeAsString"],[99,38,101,40],[99,39,101,41,"deconstruction"],[99,53,101,55],[99,54,101,56,"packet"],[99,60,101,62],[99,61,101,63],[100,6,102,8],[100,12,102,14,"buffers"],[100,19,102,21],[100,22,102,24,"deconstruction"],[100,36,102,38],[100,37,102,39,"buffers"],[100,44,102,46],[101,6,103,8,"buffers"],[101,13,103,15],[101,14,103,16,"unshift"],[101,21,103,23],[101,22,103,24,"pack"],[101,26,103,28],[101,27,103,29],[101,28,103,30],[101,29,103,31],[102,6,104,8],[102,13,104,15,"buffers"],[102,20,104,22],[102,21,104,23],[102,22,104,24],[103,4,105,4],[104,2,106,0],[105,2,107,0],[106,2,107,0,"exports"],[106,9,107,0],[106,10,107,0,"Encoder"],[106,17,107,0],[106,20,107,0,"Encoder"],[106,27,107,0],[107,2,108,0],[107,11,108,9,"isObject"],[107,19,108,17,"isObject"],[107,20,108,18,"value"],[107,25,108,23],[107,27,108,25],[108,4,109,4],[108,11,109,11,"Object"],[108,17,109,17],[108,18,109,18,"prototype"],[108,27,109,27],[108,28,109,28,"toString"],[108,36,109,36],[108,37,109,37,"call"],[108,41,109,41],[108,42,109,42,"value"],[108,47,109,47],[108,48,109,48],[108,53,109,53],[108,70,109,70],[109,2,110,0],[110,2,111,0],[111,0,112,0],[112,0,113,0],[113,0,114,0],[114,0,115,0],[115,2,116,7],[115,8,116,13,"Decoder"],[115,15,116,20],[115,24,116,29,"Emitter"],[115,49,116,36],[115,50,116,37],[116,4,117,4],[117,0,118,0],[118,0,119,0],[119,0,120,0],[120,0,121,0],[121,4,122,4,"constructor"],[121,15,122,15,"constructor"],[121,16,122,16,"reviver"],[121,23,122,23],[121,25,122,25],[122,6,123,8],[122,11,123,13],[122,12,123,14],[122,13,123,15],[123,6,124,8],[123,10,124,12],[123,11,124,13,"reviver"],[123,18,124,20],[123,21,124,23,"reviver"],[123,28,124,30],[124,4,125,4],[125,4,126,4],[126,0,127,0],[127,0,128,0],[128,0,129,0],[129,0,130,0],[130,4,131,4,"add"],[130,7,131,7,"add"],[130,8,131,8,"obj"],[130,11,131,11],[130,13,131,13],[131,6,132,8],[131,10,132,12,"packet"],[131,16,132,18],[132,6,133,8],[132,10,133,12],[132,17,133,19,"obj"],[132,20,133,22],[132,25,133,27],[132,33,133,35],[132,35,133,37],[133,8,134,12],[133,12,134,16],[133,16,134,20],[133,17,134,21,"reconstructor"],[133,30,134,34],[133,32,134,36],[134,10,135,16],[134,16,135,22],[134,20,135,26,"Error"],[134,25,135,31],[134,26,135,32],[134,75,135,81],[134,76,135,82],[135,8,136,12],[136,8,137,12,"packet"],[136,14,137,18],[136,17,137,21],[136,21,137,25],[136,22,137,26,"decodeString"],[136,34,137,38],[136,35,137,39,"obj"],[136,38,137,42],[136,39,137,43],[137,8,138,12],[137,14,138,18,"isBinaryEvent"],[137,27,138,31],[137,30,138,34,"packet"],[137,36,138,40],[137,37,138,41,"type"],[137,41,138,45],[137,46,138,50,"PacketType"],[137,56,138,60],[137,57,138,61,"BINARY_EVENT"],[137,69,138,73],[138,8,139,12],[138,12,139,16,"isBinaryEvent"],[138,25,139,29],[138,29,139,33,"packet"],[138,35,139,39],[138,36,139,40,"type"],[138,40,139,44],[138,45,139,49,"PacketType"],[138,55,139,59],[138,56,139,60,"BINARY_ACK"],[138,66,139,70],[138,68,139,72],[139,10,140,16,"packet"],[139,16,140,22],[139,17,140,23,"type"],[139,21,140,27],[139,24,140,30,"isBinaryEvent"],[139,37,140,43],[139,40,140,46,"PacketType"],[139,50,140,56],[139,51,140,57,"EVENT"],[139,56,140,62],[139,59,140,65,"PacketType"],[139,69,140,75],[139,70,140,76,"ACK"],[139,73,140,79],[140,10,141,16],[141,10,142,16],[141,14,142,20],[141,15,142,21,"reconstructor"],[141,28,142,34],[141,31,142,37],[141,35,142,41,"BinaryReconstructor"],[141,54,142,60],[141,55,142,61,"packet"],[141,61,142,67],[141,62,142,68],[142,10,143,16],[143,10,144,16],[143,14,144,20,"packet"],[143,20,144,26],[143,21,144,27,"attachments"],[143,32,144,38],[143,37,144,43],[143,38,144,44],[143,40,144,46],[144,12,145,20],[144,17,145,25],[144,18,145,26,"emitReserved"],[144,30,145,38],[144,31,145,39],[144,40,145,48],[144,42,145,50,"packet"],[144,48,145,56],[144,49,145,57],[145,10,146,16],[146,8,147,12],[146,9,147,13],[146,15,148,17],[147,10,149,16],[148,10,150,16],[148,15,150,21],[148,16,150,22,"emitReserved"],[148,28,150,34],[148,29,150,35],[148,38,150,44],[148,40,150,46,"packet"],[148,46,150,52],[148,47,150,53],[149,8,151,12],[150,6,152,8],[150,7,152,9],[150,13,153,13],[150,17,153,17],[150,21,153,17,"isBinary"],[150,39,153,25],[150,41,153,26,"obj"],[150,44,153,29],[150,45,153,30],[150,49,153,34,"obj"],[150,52,153,37],[150,53,153,38,"base64"],[150,59,153,44],[150,61,153,46],[151,8,154,12],[152,8,155,12],[152,12,155,16],[152,13,155,17],[152,17,155,21],[152,18,155,22,"reconstructor"],[152,31,155,35],[152,33,155,37],[153,10,156,16],[153,16,156,22],[153,20,156,26,"Error"],[153,25,156,31],[153,26,156,32],[153,76,156,82],[153,77,156,83],[154,8,157,12],[154,9,157,13],[154,15,158,17],[155,10,159,16,"packet"],[155,16,159,22],[155,19,159,25],[155,23,159,29],[155,24,159,30,"reconstructor"],[155,37,159,43],[155,38,159,44,"takeBinaryData"],[155,52,159,58],[155,53,159,59,"obj"],[155,56,159,62],[155,57,159,63],[156,10,160,16],[156,14,160,20,"packet"],[156,20,160,26],[156,22,160,28],[157,12,161,20],[158,12,162,20],[158,16,162,24],[158,17,162,25,"reconstructor"],[158,30,162,38],[158,33,162,41],[158,37,162,45],[159,12,163,20],[159,17,163,25],[159,18,163,26,"emitReserved"],[159,30,163,38],[159,31,163,39],[159,40,163,48],[159,42,163,50,"packet"],[159,48,163,56],[159,49,163,57],[160,10,164,16],[161,8,165,12],[162,6,166,8],[162,7,166,9],[162,13,167,13],[163,8,168,12],[163,14,168,18],[163,18,168,22,"Error"],[163,23,168,27],[163,24,168,28],[163,40,168,44],[163,43,168,47,"obj"],[163,46,168,50],[163,47,168,51],[164,6,169,8],[165,4,170,4],[166,4,171,4],[167,0,172,0],[168,0,173,0],[169,0,174,0],[170,0,175,0],[171,0,176,0],[172,4,177,4,"decodeString"],[172,16,177,16,"decodeString"],[172,17,177,17,"str"],[172,20,177,20],[172,22,177,22],[173,6,178,8],[173,10,178,12,"i"],[173,11,178,13],[173,14,178,16],[173,15,178,17],[174,6,179,8],[175,6,180,8],[175,12,180,14,"p"],[175,13,180,15],[175,16,180,18],[176,8,181,12,"type"],[176,12,181,16],[176,14,181,18,"Number"],[176,20,181,24],[176,21,181,25,"str"],[176,24,181,28],[176,25,181,29,"charAt"],[176,31,181,35],[176,32,181,36],[176,33,181,37],[176,34,181,38],[177,6,182,8],[177,7,182,9],[178,6,183,8],[178,10,183,12,"PacketType"],[178,20,183,22],[178,21,183,23,"p"],[178,22,183,24],[178,23,183,25,"type"],[178,27,183,29],[178,28,183,30],[178,33,183,35,"undefined"],[178,42,183,44],[178,44,183,46],[179,8,184,12],[179,14,184,18],[179,18,184,22,"Error"],[179,23,184,27],[179,24,184,28],[179,46,184,50],[179,49,184,53,"p"],[179,50,184,54],[179,51,184,55,"type"],[179,55,184,59],[179,56,184,60],[180,6,185,8],[181,6,186,8],[182,6,187,8],[182,10,187,12,"p"],[182,11,187,13],[182,12,187,14,"type"],[182,16,187,18],[182,21,187,23,"PacketType"],[182,31,187,33],[182,32,187,34,"BINARY_EVENT"],[182,44,187,46],[182,48,188,12,"p"],[182,49,188,13],[182,50,188,14,"type"],[182,54,188,18],[182,59,188,23,"PacketType"],[182,69,188,33],[182,70,188,34,"BINARY_ACK"],[182,80,188,44],[182,82,188,46],[183,8,189,12],[183,14,189,18,"start"],[183,19,189,23],[183,22,189,26,"i"],[183,23,189,27],[183,26,189,30],[183,27,189,31],[184,8,190,12],[184,15,190,19,"str"],[184,18,190,22],[184,19,190,23,"charAt"],[184,25,190,29],[184,26,190,30],[184,28,190,32,"i"],[184,29,190,33],[184,30,190,34],[184,35,190,39],[184,38,190,42],[184,42,190,46,"i"],[184,43,190,47],[184,47,190,51,"str"],[184,50,190,54],[184,51,190,55,"length"],[184,57,190,61],[184,59,190,63],[184,60,190,65],[185,8,191,12],[185,14,191,18,"buf"],[185,17,191,21],[185,20,191,24,"str"],[185,23,191,27],[185,24,191,28,"substring"],[185,33,191,37],[185,34,191,38,"start"],[185,39,191,43],[185,41,191,45,"i"],[185,42,191,46],[185,43,191,47],[186,8,192,12],[186,12,192,16,"buf"],[186,15,192,19],[186,19,192,23,"Number"],[186,25,192,29],[186,26,192,30,"buf"],[186,29,192,33],[186,30,192,34],[186,34,192,38,"str"],[186,37,192,41],[186,38,192,42,"charAt"],[186,44,192,48],[186,45,192,49,"i"],[186,46,192,50],[186,47,192,51],[186,52,192,56],[186,55,192,59],[186,57,192,61],[187,10,193,16],[187,16,193,22],[187,20,193,26,"Error"],[187,25,193,31],[187,26,193,32],[187,47,193,53],[187,48,193,54],[188,8,194,12],[189,8,195,12,"p"],[189,9,195,13],[189,10,195,14,"attachments"],[189,21,195,25],[189,24,195,28,"Number"],[189,30,195,34],[189,31,195,35,"buf"],[189,34,195,38],[189,35,195,39],[190,6,196,8],[191,6,197,8],[192,6,198,8],[192,10,198,12],[192,13,198,15],[192,18,198,20,"str"],[192,21,198,23],[192,22,198,24,"charAt"],[192,28,198,30],[192,29,198,31,"i"],[192,30,198,32],[192,33,198,35],[192,34,198,36],[192,35,198,37],[192,37,198,39],[193,8,199,12],[193,14,199,18,"start"],[193,19,199,23],[193,22,199,26,"i"],[193,23,199,27],[193,26,199,30],[193,27,199,31],[194,8,200,12],[194,15,200,19],[194,17,200,21,"i"],[194,18,200,22],[194,20,200,24],[195,10,201,16],[195,16,201,22,"c"],[195,17,201,23],[195,20,201,26,"str"],[195,23,201,29],[195,24,201,30,"charAt"],[195,30,201,36],[195,31,201,37,"i"],[195,32,201,38],[195,33,201,39],[196,10,202,16],[196,14,202,20],[196,17,202,23],[196,22,202,28,"c"],[196,23,202,29],[196,25,203,20],[197,10,204,16],[197,14,204,20,"i"],[197,15,204,21],[197,20,204,26,"str"],[197,23,204,29],[197,24,204,30,"length"],[197,30,204,36],[197,32,205,20],[198,8,206,12],[199,8,207,12,"p"],[199,9,207,13],[199,10,207,14,"nsp"],[199,13,207,17],[199,16,207,20,"str"],[199,19,207,23],[199,20,207,24,"substring"],[199,29,207,33],[199,30,207,34,"start"],[199,35,207,39],[199,37,207,41,"i"],[199,38,207,42],[199,39,207,43],[200,6,208,8],[200,7,208,9],[200,13,209,13],[201,8,210,12,"p"],[201,9,210,13],[201,10,210,14,"nsp"],[201,13,210,17],[201,16,210,20],[201,19,210,23],[202,6,211,8],[203,6,212,8],[204,6,213,8],[204,12,213,14,"next"],[204,16,213,18],[204,19,213,21,"str"],[204,22,213,24],[204,23,213,25,"charAt"],[204,29,213,31],[204,30,213,32,"i"],[204,31,213,33],[204,34,213,36],[204,35,213,37],[204,36,213,38],[205,6,214,8],[205,10,214,12],[205,12,214,14],[205,17,214,19,"next"],[205,21,214,23],[205,25,214,27,"Number"],[205,31,214,33],[205,32,214,34,"next"],[205,36,214,38],[205,37,214,39],[205,41,214,43,"next"],[205,45,214,47],[205,47,214,49],[206,8,215,12],[206,14,215,18,"start"],[206,19,215,23],[206,22,215,26,"i"],[206,23,215,27],[206,26,215,30],[206,27,215,31],[207,8,216,12],[207,15,216,19],[207,17,216,21,"i"],[207,18,216,22],[207,20,216,24],[208,10,217,16],[208,16,217,22,"c"],[208,17,217,23],[208,20,217,26,"str"],[208,23,217,29],[208,24,217,30,"charAt"],[208,30,217,36],[208,31,217,37,"i"],[208,32,217,38],[208,33,217,39],[209,10,218,16],[209,14,218,20],[209,18,218,24],[209,22,218,28,"c"],[209,23,218,29],[209,27,218,33,"Number"],[209,33,218,39],[209,34,218,40,"c"],[209,35,218,41],[209,36,218,42],[209,40,218,46,"c"],[209,41,218,47],[209,43,218,49],[210,12,219,20],[210,14,219,22,"i"],[210,15,219,23],[211,12,220,20],[212,10,221,16],[213,10,222,16],[213,14,222,20,"i"],[213,15,222,21],[213,20,222,26,"str"],[213,23,222,29],[213,24,222,30,"length"],[213,30,222,36],[213,32,223,20],[214,8,224,12],[215,8,225,12,"p"],[215,9,225,13],[215,10,225,14,"id"],[215,12,225,16],[215,15,225,19,"Number"],[215,21,225,25],[215,22,225,26,"str"],[215,25,225,29],[215,26,225,30,"substring"],[215,35,225,39],[215,36,225,40,"start"],[215,41,225,45],[215,43,225,47,"i"],[215,44,225,48],[215,47,225,51],[215,48,225,52],[215,49,225,53],[215,50,225,54],[216,6,226,8],[217,6,227,8],[218,6,228,8],[218,10,228,12,"str"],[218,13,228,15],[218,14,228,16,"charAt"],[218,20,228,22],[218,21,228,23],[218,23,228,25,"i"],[218,24,228,26],[218,25,228,27],[218,27,228,29],[219,8,229,12],[219,14,229,18,"payload"],[219,21,229,25],[219,24,229,28],[219,28,229,32],[219,29,229,33,"tryParse"],[219,37,229,41],[219,38,229,42,"str"],[219,41,229,45],[219,42,229,46,"substr"],[219,48,229,52],[219,49,229,53,"i"],[219,50,229,54],[219,51,229,55],[219,52,229,56],[220,8,230,12],[220,12,230,16,"Decoder"],[220,19,230,23],[220,20,230,24,"isPayloadValid"],[220,34,230,38],[220,35,230,39,"p"],[220,36,230,40],[220,37,230,41,"type"],[220,41,230,45],[220,43,230,47,"payload"],[220,50,230,54],[220,51,230,55],[220,53,230,57],[221,10,231,16,"p"],[221,11,231,17],[221,12,231,18,"data"],[221,16,231,22],[221,19,231,25,"payload"],[221,26,231,32],[222,8,232,12],[222,9,232,13],[222,15,233,17],[223,10,234,16],[223,16,234,22],[223,20,234,26,"Error"],[223,25,234,31],[223,26,234,32],[223,43,234,49],[223,44,234,50],[224,8,235,12],[225,6,236,8],[226,6,237,8,"debug"],[226,11,237,13],[226,12,237,14],[226,30,237,32],[226,32,237,34,"str"],[226,35,237,37],[226,37,237,39,"p"],[226,38,237,40],[226,39,237,41],[227,6,238,8],[227,13,238,15,"p"],[227,14,238,16],[228,4,239,4],[229,4,240,4,"tryParse"],[229,12,240,12,"tryParse"],[229,13,240,13,"str"],[229,16,240,16],[229,18,240,18],[230,6,241,8],[230,10,241,12],[231,8,242,12],[231,15,242,19,"JSON"],[231,19,242,23],[231,20,242,24,"parse"],[231,25,242,29],[231,26,242,30,"str"],[231,29,242,33],[231,31,242,35],[231,35,242,39],[231,36,242,40,"reviver"],[231,43,242,47],[231,44,242,48],[232,6,243,8],[232,7,243,9],[232,8,244,8],[232,15,244,15,"e"],[232,16,244,16],[232,18,244,18],[233,8,245,12],[233,15,245,19],[233,20,245,24],[234,6,246,8],[235,4,247,4],[236,4,248,4],[236,11,248,11,"isPayloadValid"],[236,25,248,25,"isPayloadValid"],[236,26,248,26,"type"],[236,30,248,30],[236,32,248,32,"payload"],[236,39,248,39],[236,41,248,41],[237,6,249,8],[237,14,249,16,"type"],[237,18,249,20],[238,8,250,12],[238,13,250,17,"PacketType"],[238,23,250,27],[238,24,250,28,"CONNECT"],[238,31,250,35],[239,10,251,16],[239,17,251,23,"isObject"],[239,25,251,31],[239,26,251,32,"payload"],[239,33,251,39],[239,34,251,40],[240,8,252,12],[240,13,252,17,"PacketType"],[240,23,252,27],[240,24,252,28,"DISCONNECT"],[240,34,252,38],[241,10,253,16],[241,17,253,23,"payload"],[241,24,253,30],[241,29,253,35,"undefined"],[241,38,253,44],[242,8,254,12],[242,13,254,17,"PacketType"],[242,23,254,27],[242,24,254,28,"CONNECT_ERROR"],[242,37,254,41],[243,10,255,16],[243,17,255,23],[243,24,255,30,"payload"],[243,31,255,37],[243,36,255,42],[243,44,255,50],[243,48,255,54,"isObject"],[243,56,255,62],[243,57,255,63,"payload"],[243,64,255,70],[243,65,255,71],[244,8,256,12],[244,13,256,17,"PacketType"],[244,23,256,27],[244,24,256,28,"EVENT"],[244,29,256,33],[245,8,257,12],[245,13,257,17,"PacketType"],[245,23,257,27],[245,24,257,28,"BINARY_EVENT"],[245,36,257,40],[246,10,258,16],[246,17,258,24,"Array"],[246,22,258,29],[246,23,258,30,"isArray"],[246,30,258,37],[246,31,258,38,"payload"],[246,38,258,45],[246,39,258,46],[246,44,259,21],[246,51,259,28,"payload"],[246,58,259,35],[246,59,259,36],[246,60,259,37],[246,61,259,38],[246,66,259,43],[246,74,259,51],[246,78,260,25],[246,85,260,32,"payload"],[246,92,260,39],[246,93,260,40],[246,94,260,41],[246,95,260,42],[246,100,260,47],[246,108,260,55],[246,112,261,28,"RESERVED_EVENTS"],[246,127,261,43],[246,128,261,44,"indexOf"],[246,135,261,51],[246,136,261,52,"payload"],[246,143,261,59],[246,144,261,60],[246,145,261,61],[246,146,261,62],[246,147,261,63],[246,152,261,68],[246,153,261,69],[246,154,261,71],[246,155,261,72],[247,8,262,12],[247,13,262,17,"PacketType"],[247,23,262,27],[247,24,262,28,"ACK"],[247,27,262,31],[248,8,263,12],[248,13,263,17,"PacketType"],[248,23,263,27],[248,24,263,28,"BINARY_ACK"],[248,34,263,38],[249,10,264,16],[249,17,264,23,"Array"],[249,22,264,28],[249,23,264,29,"isArray"],[249,30,264,36],[249,31,264,37,"payload"],[249,38,264,44],[249,39,264,45],[250,6,265,8],[251,4,266,4],[252,4,267,4],[253,0,268,0],[254,0,269,0],[255,4,270,4,"destroy"],[255,11,270,11,"destroy"],[255,12,270,11],[255,14,270,14],[256,6,271,8],[256,10,271,12],[256,14,271,16],[256,15,271,17,"reconstructor"],[256,28,271,30],[256,30,271,32],[257,8,272,12],[257,12,272,16],[257,13,272,17,"reconstructor"],[257,26,272,30],[257,27,272,31,"finishedReconstruction"],[257,49,272,53],[257,50,272,54],[257,51,272,55],[258,8,273,12],[258,12,273,16],[258,13,273,17,"reconstructor"],[258,26,273,30],[258,29,273,33],[258,33,273,37],[259,6,274,8],[260,4,275,4],[261,2,276,0],[262,2,277,0],[263,0,278,0],[264,0,279,0],[265,0,280,0],[266,0,281,0],[267,0,282,0],[268,0,283,0],[269,0,284,0],[270,2,277,0,"exports"],[270,9,277,0],[270,10,277,0,"Decoder"],[270,17,277,0],[270,20,277,0,"Decoder"],[270,27,277,0],[271,2,285,0],[271,8,285,6,"BinaryReconstructor"],[271,27,285,25],[271,28,285,26],[272,4,286,4,"constructor"],[272,15,286,15,"constructor"],[272,16,286,16,"packet"],[272,22,286,22],[272,24,286,24],[273,6,287,8],[273,10,287,12],[273,11,287,13,"packet"],[273,17,287,19],[273,20,287,22,"packet"],[273,26,287,28],[274,6,288,8],[274,10,288,12],[274,11,288,13,"buffers"],[274,18,288,20],[274,21,288,23],[274,23,288,25],[275,6,289,8],[275,10,289,12],[275,11,289,13,"reconPack"],[275,20,289,22],[275,23,289,25,"packet"],[275,29,289,31],[276,4,290,4],[277,4,291,4],[278,0,292,0],[279,0,293,0],[280,0,294,0],[281,0,295,0],[282,0,296,0],[283,0,297,0],[284,0,298,0],[285,4,299,4,"takeBinaryData"],[285,18,299,18,"takeBinaryData"],[285,19,299,19,"binData"],[285,26,299,26],[285,28,299,28],[286,6,300,8],[286,10,300,12],[286,11,300,13,"buffers"],[286,18,300,20],[286,19,300,21,"push"],[286,23,300,25],[286,24,300,26,"binData"],[286,31,300,33],[286,32,300,34],[287,6,301,8],[287,10,301,12],[287,14,301,16],[287,15,301,17,"buffers"],[287,22,301,24],[287,23,301,25,"length"],[287,29,301,31],[287,34,301,36],[287,38,301,40],[287,39,301,41,"reconPack"],[287,48,301,50],[287,49,301,51,"attachments"],[287,60,301,62],[287,62,301,64],[288,8,302,12],[289,8,303,12],[289,14,303,18,"packet"],[289,20,303,24],[289,23,303,27],[289,27,303,27,"reconstructPacket"],[289,52,303,44],[289,54,303,45],[289,58,303,49],[289,59,303,50,"reconPack"],[289,68,303,59],[289,70,303,61],[289,74,303,65],[289,75,303,66,"buffers"],[289,82,303,73],[289,83,303,74],[290,8,304,12],[290,12,304,16],[290,13,304,17,"finishedReconstruction"],[290,35,304,39],[290,36,304,40],[290,37,304,41],[291,8,305,12],[291,15,305,19,"packet"],[291,21,305,25],[292,6,306,8],[293,6,307,8],[293,13,307,15],[293,17,307,19],[294,4,308,4],[295,4,309,4],[296,0,310,0],[297,0,311,0],[298,4,312,4,"finishedReconstruction"],[298,26,312,26,"finishedReconstruction"],[298,27,312,26],[298,29,312,29],[299,6,313,8],[299,10,313,12],[299,11,313,13,"reconPack"],[299,20,313,22],[299,23,313,25],[299,27,313,29],[300,6,314,8],[300,10,314,12],[300,11,314,13,"buffers"],[300,18,314,20],[300,21,314,23],[300,23,314,25],[301,4,315,4],[302,2,316,0],[303,0,316,1],[303,3]],"functionMap":{"names":["<global>","<anonymous>","Encoder","Encoder#constructor","Encoder#encode","Encoder#encodeAsString","Encoder#encodeAsBinary","isObject","Decoder","Decoder#constructor","Decoder#add","Decoder#decodeString","Decoder#tryParse","Decoder.isPayloadValid","Decoder#destroy","BinaryReconstructor","BinaryReconstructor#constructor","BinaryReconstructor#takeBinaryData","BinaryReconstructor#finishedReconstruction"],"mappings":"AAA;CCuB;CDQ;OEI;ICM;KDE;IEO;KFe;IGI;KHuB;IIM;KJM;CFC;AOE;CPE;OQM;ICM;KDG;IEM;KFuC;IGO;KH8D;IIC;KJO;IKC;KLkB;IMI;KNK;CRC;AeS;ICC;KDI;IES;KFS;IGI;KHG;CfC"}},"type":"js/module"}]}