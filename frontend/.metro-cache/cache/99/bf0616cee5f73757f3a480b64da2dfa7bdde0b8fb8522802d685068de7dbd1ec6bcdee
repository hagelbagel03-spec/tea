{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"./transports/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":73,"index":73}}],"key":"7CLKJUHLWOUmn3xjjCK2YLx/ESU=","exportNames":["*"]}},{"name":"./util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":74},"end":{"line":2,"column":62,"index":136}}],"key":"+UpHPazG/Yk8JnTjB6d2Eo+vUl4=","exportNames":["*"]}},{"name":"./contrib/parseqs.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":137},"end":{"line":3,"column":46,"index":183}}],"key":"BJ+q1MtlpK8TmoXWscM6udPVjkM=","exportNames":["*"]}},{"name":"./contrib/parseuri.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":46,"index":230}}],"key":"5FHL6vc7rbDf51XGIsZLRdNOJXo=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":231},"end":{"line":5,"column":55,"index":286}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":287},"end":{"line":6,"column":44,"index":331}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"]}},{"name":"./globals.node.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":332},"end":{"line":7,"column":82,"index":414}}],"key":"9IvwYHBhshdIr/kWH4ou0H+0FaM=","exportNames":["*"]}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":415},"end":{"line":8,"column":32,"index":447}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.SocketWithoutUpgrade = exports.SocketWithUpgrade = exports.Socket = void 0;\n  var _index = require(_dependencyMap[1], \"./transports/index.js\");\n  var _util = require(_dependencyMap[2], \"./util.js\");\n  var _parseqs = require(_dependencyMap[3], \"./contrib/parseqs.js\");\n  var _parseuri = require(_dependencyMap[4], \"./contrib/parseuri.js\");\n  var _componentEmitter = require(_dependencyMap[5], \"@socket.io/component-emitter\");\n  var _engine = require(_dependencyMap[6], \"engine.io-parser\");\n  var _globalsNode = require(_dependencyMap[7], \"./globals.node.js\");\n  var _debug = _interopRequireDefault(require(_dependencyMap[8], \"debug\"));\n  // debug()\n  const debug = (0, _debug.default)(\"engine.io-client:socket\"); // debug()\n  const withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\n  const OFFLINE_EVENT_LISTENERS = [];\n  if (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n      debug(\"closing %d connection(s) because the network was lost\", OFFLINE_EVENT_LISTENERS.length);\n      OFFLINE_EVENT_LISTENERS.forEach(listener => listener());\n    }, false);\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n   * successfully establishes the connection.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithoutUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithUpgrade\n   * @see Socket\n   */\n  class SocketWithoutUpgrade extends _componentEmitter.Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n      super();\n      this.binaryType = _globalsNode.defaultBinaryType;\n      this.writeBuffer = [];\n      this._prevBufferLen = 0;\n      this._pingInterval = -1;\n      this._pingTimeout = -1;\n      this._maxPayload = -1;\n      /**\n       * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n       * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n       */\n      this._pingTimeoutTime = Infinity;\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = null;\n      }\n      if (uri) {\n        const parsedUri = (0, _parseuri.parse)(uri);\n        opts.hostname = parsedUri.host;\n        opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n        opts.port = parsedUri.port;\n        if (parsedUri.query) opts.query = parsedUri.query;\n      } else if (opts.host) {\n        opts.hostname = (0, _parseuri.parse)(opts.host).host;\n      }\n      (0, _util.installTimerFunctions)(this, opts);\n      this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n      if (opts.hostname && !opts.port) {\n        // if no port is specified manually, use the protocol default\n        opts.port = this.secure ? \"443\" : \"80\";\n      }\n      this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n      this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n      this.transports = [];\n      this._transportsByName = {};\n      opts.transports.forEach(t => {\n        const transportName = t.prototype.name;\n        this.transports.push(transportName);\n        this._transportsByName[transportName] = t;\n      });\n      this.opts = Object.assign({\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        addTrailingSlash: true,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {},\n        closeOnBeforeunload: false\n      }, opts);\n      this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\");\n      if (typeof this.opts.query === \"string\") {\n        this.opts.query = (0, _parseqs.decode)(this.opts.query);\n      }\n      if (withEventListeners) {\n        if (this.opts.closeOnBeforeunload) {\n          // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n          // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n          // closed/reloaded)\n          this._beforeunloadEventListener = () => {\n            if (this.transport) {\n              // silently close the transport\n              this.transport.removeAllListeners();\n              this.transport.close();\n            }\n          };\n          addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n        }\n        if (this.hostname !== \"localhost\") {\n          debug(\"adding listener for the 'offline' event\");\n          this._offlineEventListener = () => {\n            this._onClose(\"transport close\", {\n              description: \"network connection lost\"\n            });\n          };\n          OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n        }\n      }\n      if (this.opts.withCredentials) {\n        this._cookieJar = (0, _globalsNode.createCookieJar)();\n      }\n      this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n      debug('creating transport \"%s\"', name);\n      const query = Object.assign({}, this.opts.query);\n      // append engine.io protocol identifier\n      query.EIO = _engine.protocol;\n      // transport name\n      query.transport = name;\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      const opts = Object.assign({}, this.opts, {\n        query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }, this.opts.transportOptions[name]);\n      debug(\"options: %j\", opts);\n      return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n      if (this.transports.length === 0) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(() => {\n          this.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      }\n      const transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n      this.readyState = \"opening\";\n      const transport = this.createTransport(transportName);\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n      debug(\"setting transport %s\", transport.name);\n      if (this.transport) {\n        debug(\"clearing existing transport %s\", this.transport.name);\n        this.transport.removeAllListeners();\n      }\n      // set up transport\n      this.transport = transport;\n      // set up transport listeners\n      transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", reason => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n      debug(\"socket open\");\n      this.readyState = \"open\";\n      SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n        this.emitReserved(\"packet\", packet);\n        // Socket is live - any packet counts\n        this.emitReserved(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this._sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            this._resetPingTimeout();\n            break;\n          case \"error\":\n            const err = new Error(\"server error\");\n            // @ts-ignore\n            err.code = packet.data;\n            this._onError(err);\n            break;\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {\n        debug('packet received with socket readyState \"%s\"', this.readyState);\n      }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this._pingInterval = data.pingInterval;\n      this._pingTimeout = data.pingTimeout;\n      this._maxPayload = data.maxPayload;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n      this.clearTimeoutFn(this._pingTimeoutTimer);\n      const delay = this._pingInterval + this._pingTimeout;\n      this._pingTimeoutTime = Date.now() + delay;\n      this._pingTimeoutTimer = this.setTimeoutFn(() => {\n        this._onClose(\"ping timeout\");\n      }, delay);\n      if (this.opts.autoUnref) {\n        this._pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n      this.writeBuffer.splice(0, this._prevBufferLen);\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this._prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        const packets = this._getWritablePackets();\n        debug(\"flushing %d packets in socket\", packets.length);\n        this.transport.send(packets);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this._prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n      const shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n      let payloadSize = 1; // first packet type\n      for (let i = 0; i < this.writeBuffer.length; i++) {\n        const data = this.writeBuffer[i].data;\n        if (data) {\n          payloadSize += (0, _util.byteLength)(data);\n        }\n        if (i > 0 && payloadSize > this._maxPayload) {\n          debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n          return this.writeBuffer.slice(0, i);\n        }\n        payloadSize += 2; // separator + packet type\n      }\n      debug(\"payload size is %d (max: %d)\", payloadSize, this._maxPayload);\n      return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */\n    _hasPingExpired() {\n      if (!this._pingTimeoutTime) return true;\n      const hasExpired = Date.now() > this._pingTimeoutTime;\n      if (hasExpired) {\n        debug(\"throttled timer detected, scheduling connection close\");\n        this._pingTimeoutTime = 0;\n        (0, _globalsNode.nextTick)(() => {\n          this._onClose(\"ping timeout\");\n        }, this.setTimeoutFn);\n      }\n      return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      const packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n      const close = () => {\n        this._onClose(\"forced close\");\n        debug(\"socket closing - telling transport to close\");\n        this.transport.close();\n      };\n      const cleanupAndClose = () => {\n        this.off(\"upgrade\", cleanupAndClose);\n        this.off(\"upgradeError\", cleanupAndClose);\n        close();\n      };\n      const waitForUpgrade = () => {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        this.once(\"upgrade\", cleanupAndClose);\n        this.once(\"upgradeError\", cleanupAndClose);\n      };\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", () => {\n            if (this.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n      debug(\"socket error %j\", err);\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n        debug(\"trying next transport\");\n        this.transports.shift();\n        return this._open();\n      }\n      this.emitReserved(\"error\", err);\n      this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket close with reason: \"%s\"', reason);\n        // clear timers\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n        // ensure transport won't stay open\n        this.transport.close();\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n        if (withEventListeners) {\n          if (this._beforeunloadEventListener) {\n            removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n          }\n          if (this._offlineEventListener) {\n            const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n            if (i !== -1) {\n              debug(\"removing listener for the 'offline' event\");\n              OFFLINE_EVENT_LISTENERS.splice(i, 1);\n            }\n          }\n        }\n        // set ready state\n        this.readyState = \"closed\";\n        // clear session id\n        this.id = null;\n        // emit close event\n        this.emitReserved(\"close\", reason, description);\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n      }\n    }\n  }\n  exports.SocketWithoutUpgrade = SocketWithoutUpgrade;\n  SocketWithoutUpgrade.protocol = _engine.protocol;\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see Socket\n   */\n  class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n      super(...arguments);\n      this._upgrades = [];\n    }\n    onOpen() {\n      super.onOpen();\n      if (\"open\" === this.readyState && this.opts.upgrade) {\n        debug(\"starting upgrade probes\");\n        for (let i = 0; i < this._upgrades.length; i++) {\n          this._probe(this._upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n      debug('probing transport \"%s\"', name);\n      let transport = this.createTransport(name);\n      let failed = false;\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      const onTransportOpen = () => {\n        if (failed) return;\n        debug('probe transport \"%s\" opened', name);\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", msg => {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            debug('probe transport \"%s\" pong', name);\n            this.upgrading = true;\n            this.emitReserved(\"upgrading\", transport);\n            if (!transport) return;\n            SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n            debug('pausing current transport \"%s\"', this.transport.name);\n            this.transport.pause(() => {\n              if (failed) return;\n              if (\"closed\" === this.readyState) return;\n              debug(\"changing transport and sending upgrade packet\");\n              cleanup();\n              this.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              this.emitReserved(\"upgrade\", transport);\n              transport = null;\n              this.upgrading = false;\n              this.flush();\n            });\n          } else {\n            debug('probe transport \"%s\" failed', name);\n            const err = new Error(\"probe error\");\n            // @ts-ignore\n            err.transport = transport.name;\n            this.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n      function freezeTransport() {\n        if (failed) return;\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n      // Handle any error that happens while probing\n      const onerror = err => {\n        const error = new Error(\"probe error: \" + err);\n        // @ts-ignore\n        error.transport = transport.name;\n        freezeTransport();\n        debug('probe transport \"%s\" failed because of error: %s', name, err);\n        this.emitReserved(\"upgradeError\", error);\n      };\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n          freezeTransport();\n        }\n      }\n      // Remove all listeners on the transport and on self\n      const cleanup = () => {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        this.off(\"close\", onclose);\n        this.off(\"upgrading\", onupgrade);\n      };\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n        // favor WebTransport\n        this.setTimeoutFn(() => {\n          if (!failed) {\n            transport.open();\n          }\n        }, 200);\n      } else {\n        transport.open();\n      }\n    }\n    onHandshake(data) {\n      this._upgrades = this._filterUpgrades(data.upgrades);\n      super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n      const filteredUpgrades = [];\n      for (let i = 0; i < upgrades.length; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    }\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * @example\n   * import { Socket } from \"engine.io-client\";\n   *\n   * const socket = new Socket();\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see SocketWithUpgrade\n   */\n  exports.SocketWithUpgrade = SocketWithUpgrade;\n  class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n      const o = typeof uri === \"object\" ? uri : opts;\n      if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n        o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(transportName => _index.transports[transportName]).filter(t => !!t);\n      }\n      super(uri, o);\n    }\n  }\n  exports.Socket = Socket;\n});","lineCount":713,"map":[[7,2,1,0],[7,6,1,0,"_index"],[7,12,1,0],[7,15,1,0,"require"],[7,22,1,0],[7,23,1,0,"_dependencyMap"],[7,37,1,0],[8,2,2,0],[8,6,2,0,"_util"],[8,11,2,0],[8,14,2,0,"require"],[8,21,2,0],[8,22,2,0,"_dependencyMap"],[8,36,2,0],[9,2,3,0],[9,6,3,0,"_parseqs"],[9,14,3,0],[9,17,3,0,"require"],[9,24,3,0],[9,25,3,0,"_dependencyMap"],[9,39,3,0],[10,2,4,0],[10,6,4,0,"_parseuri"],[10,15,4,0],[10,18,4,0,"require"],[10,25,4,0],[10,26,4,0,"_dependencyMap"],[10,40,4,0],[11,2,5,0],[11,6,5,0,"_componentEmitter"],[11,23,5,0],[11,26,5,0,"require"],[11,33,5,0],[11,34,5,0,"_dependencyMap"],[11,48,5,0],[12,2,6,0],[12,6,6,0,"_engine"],[12,13,6,0],[12,16,6,0,"require"],[12,23,6,0],[12,24,6,0,"_dependencyMap"],[12,38,6,0],[13,2,7,0],[13,6,7,0,"_globalsNode"],[13,18,7,0],[13,21,7,0,"require"],[13,28,7,0],[13,29,7,0,"_dependencyMap"],[13,43,7,0],[14,2,8,0],[14,6,8,0,"_debug"],[14,12,8,0],[14,15,8,0,"_interopRequireDefault"],[14,37,8,0],[14,38,8,0,"require"],[14,45,8,0],[14,46,8,0,"_dependencyMap"],[14,60,8,0],[15,2,8,33],[16,2,9,0],[16,8,9,6,"debug"],[16,13,9,11],[16,16,9,14],[16,20,9,14,"debugModule"],[16,34,9,25],[16,36,9,26],[16,61,9,51],[16,62,9,52],[16,63,9,53],[16,64,9,54],[17,2,10,0],[17,8,10,6,"withEventListeners"],[17,26,10,24],[17,29,10,27],[17,36,10,34,"addEventListener"],[17,52,10,50],[17,57,10,55],[17,67,10,65],[17,71,11,4],[17,78,11,11,"removeEventListener"],[17,97,11,30],[17,102,11,35],[17,112,11,45],[18,2,12,0],[18,8,12,6,"OFFLINE_EVENT_LISTENERS"],[18,31,12,29],[18,34,12,32],[18,36,12,34],[19,2,13,0],[19,6,13,4,"withEventListeners"],[19,24,13,22],[19,26,13,24],[20,4,14,4],[21,4,15,4],[22,4,16,4,"addEventListener"],[22,20,16,20],[22,21,16,21],[22,30,16,30],[22,32,16,32],[22,38,16,38],[23,6,17,8,"debug"],[23,11,17,13],[23,12,17,14],[23,67,17,69],[23,69,17,71,"OFFLINE_EVENT_LISTENERS"],[23,92,17,94],[23,93,17,95,"length"],[23,99,17,101],[23,100,17,102],[24,6,18,8,"OFFLINE_EVENT_LISTENERS"],[24,29,18,31],[24,30,18,32,"forEach"],[24,37,18,39],[24,38,18,41,"listener"],[24,46,18,49],[24,50,18,54,"listener"],[24,58,18,62],[24,59,18,63],[24,60,18,64],[24,61,18,65],[25,4,19,4],[25,5,19,5],[25,7,19,7],[25,12,19,12],[25,13,19,13],[26,2,20,0],[27,2,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,0,40,0],[47,0,41,0],[48,0,42,0],[49,0,43,0],[50,2,44,7],[50,8,44,13,"SocketWithoutUpgrade"],[50,28,44,33],[50,37,44,42,"Emitter"],[50,62,44,49],[50,63,44,50],[51,4,45,4],[52,0,46,0],[53,0,47,0],[54,0,48,0],[55,0,49,0],[56,0,50,0],[57,4,51,4,"constructor"],[57,15,51,15,"constructor"],[57,16,51,16,"uri"],[57,19,51,19],[57,21,51,21,"opts"],[57,25,51,25],[57,27,51,27],[58,6,52,8],[58,11,52,13],[58,12,52,14],[58,13,52,15],[59,6,53,8],[59,10,53,12],[59,11,53,13,"binaryType"],[59,21,53,23],[59,24,53,26,"defaultBinaryType"],[59,54,53,43],[60,6,54,8],[60,10,54,12],[60,11,54,13,"writeBuffer"],[60,22,54,24],[60,25,54,27],[60,27,54,29],[61,6,55,8],[61,10,55,12],[61,11,55,13,"_prevBufferLen"],[61,25,55,27],[61,28,55,30],[61,29,55,31],[62,6,56,8],[62,10,56,12],[62,11,56,13,"_pingInterval"],[62,24,56,26],[62,27,56,29],[62,28,56,30],[62,29,56,31],[63,6,57,8],[63,10,57,12],[63,11,57,13,"_pingTimeout"],[63,23,57,25],[63,26,57,28],[63,27,57,29],[63,28,57,30],[64,6,58,8],[64,10,58,12],[64,11,58,13,"_maxPayload"],[64,22,58,24],[64,25,58,27],[64,26,58,28],[64,27,58,29],[65,6,59,8],[66,0,60,0],[67,0,61,0],[68,0,62,0],[69,6,63,8],[69,10,63,12],[69,11,63,13,"_pingTimeoutTime"],[69,27,63,29],[69,30,63,32,"Infinity"],[69,38,63,40],[70,6,64,8],[70,10,64,12,"uri"],[70,13,64,15],[70,17,64,19],[70,25,64,27],[70,30,64,32],[70,37,64,39,"uri"],[70,40,64,42],[70,42,64,44],[71,8,65,12,"opts"],[71,12,65,16],[71,15,65,19,"uri"],[71,18,65,22],[72,8,66,12,"uri"],[72,11,66,15],[72,14,66,18],[72,18,66,22],[73,6,67,8],[74,6,68,8],[74,10,68,12,"uri"],[74,13,68,15],[74,15,68,17],[75,8,69,12],[75,14,69,18,"parsedUri"],[75,23,69,27],[75,26,69,30],[75,30,69,30,"parse"],[75,45,69,35],[75,47,69,36,"uri"],[75,50,69,39],[75,51,69,40],[76,8,70,12,"opts"],[76,12,70,16],[76,13,70,17,"hostname"],[76,21,70,25],[76,24,70,28,"parsedUri"],[76,33,70,37],[76,34,70,38,"host"],[76,38,70,42],[77,8,71,12,"opts"],[77,12,71,16],[77,13,71,17,"secure"],[77,19,71,23],[77,22,72,16,"parsedUri"],[77,31,72,25],[77,32,72,26,"protocol"],[77,40,72,34],[77,45,72,39],[77,52,72,46],[77,56,72,50,"parsedUri"],[77,65,72,59],[77,66,72,60,"protocol"],[77,74,72,68],[77,79,72,73],[77,84,72,78],[78,8,73,12,"opts"],[78,12,73,16],[78,13,73,17,"port"],[78,17,73,21],[78,20,73,24,"parsedUri"],[78,29,73,33],[78,30,73,34,"port"],[78,34,73,38],[79,8,74,12],[79,12,74,16,"parsedUri"],[79,21,74,25],[79,22,74,26,"query"],[79,27,74,31],[79,29,75,16,"opts"],[79,33,75,20],[79,34,75,21,"query"],[79,39,75,26],[79,42,75,29,"parsedUri"],[79,51,75,38],[79,52,75,39,"query"],[79,57,75,44],[80,6,76,8],[80,7,76,9],[80,13,77,13],[80,17,77,17,"opts"],[80,21,77,21],[80,22,77,22,"host"],[80,26,77,26],[80,28,77,28],[81,8,78,12,"opts"],[81,12,78,16],[81,13,78,17,"hostname"],[81,21,78,25],[81,24,78,28],[81,28,78,28,"parse"],[81,43,78,33],[81,45,78,34,"opts"],[81,49,78,38],[81,50,78,39,"host"],[81,54,78,43],[81,55,78,44],[81,56,78,45,"host"],[81,60,78,49],[82,6,79,8],[83,6,80,8],[83,10,80,8,"installTimerFunctions"],[83,37,80,29],[83,39,80,30],[83,43,80,34],[83,45,80,36,"opts"],[83,49,80,40],[83,50,80,41],[84,6,81,8],[84,10,81,12],[84,11,81,13,"secure"],[84,17,81,19],[84,20,82,12],[84,24,82,16],[84,28,82,20,"opts"],[84,32,82,24],[84,33,82,25,"secure"],[84,39,82,31],[84,42,83,18,"opts"],[84,46,83,22],[84,47,83,23,"secure"],[84,53,83,29],[84,56,84,18],[84,63,84,25,"location"],[84,71,84,33],[84,76,84,38],[84,87,84,49],[84,91,84,53],[84,99,84,61],[84,104,84,66,"location"],[84,112,84,74],[84,113,84,75,"protocol"],[84,121,84,83],[85,6,85,8],[85,10,85,12,"opts"],[85,14,85,16],[85,15,85,17,"hostname"],[85,23,85,25],[85,27,85,29],[85,28,85,30,"opts"],[85,32,85,34],[85,33,85,35,"port"],[85,37,85,39],[85,39,85,41],[86,8,86,12],[87,8,87,12,"opts"],[87,12,87,16],[87,13,87,17,"port"],[87,17,87,21],[87,20,87,24],[87,24,87,28],[87,25,87,29,"secure"],[87,31,87,35],[87,34,87,38],[87,39,87,43],[87,42,87,46],[87,46,87,50],[88,6,88,8],[89,6,89,8],[89,10,89,12],[89,11,89,13,"hostname"],[89,19,89,21],[89,22,90,12,"opts"],[89,26,90,16],[89,27,90,17,"hostname"],[89,35,90,25],[89,40,91,17],[89,47,91,24,"location"],[89,55,91,32],[89,60,91,37],[89,71,91,48],[89,74,91,51,"location"],[89,82,91,59],[89,83,91,60,"hostname"],[89,91,91,68],[89,94,91,71],[89,105,91,82],[89,106,91,83],[90,6,92,8],[90,10,92,12],[90,11,92,13,"port"],[90,15,92,17],[90,18,93,12,"opts"],[90,22,93,16],[90,23,93,17,"port"],[90,27,93,21],[90,32,94,17],[90,39,94,24,"location"],[90,47,94,32],[90,52,94,37],[90,63,94,48],[90,67,94,52,"location"],[90,75,94,60],[90,76,94,61,"port"],[90,80,94,65],[90,83,95,22,"location"],[90,91,95,30],[90,92,95,31,"port"],[90,96,95,35],[90,99,96,22],[90,103,96,26],[90,104,96,27,"secure"],[90,110,96,33],[90,113,97,26],[90,118,97,31],[90,121,98,26],[90,125,98,30],[90,126,98,31],[91,6,99,8],[91,10,99,12],[91,11,99,13,"transports"],[91,21,99,23],[91,24,99,26],[91,26,99,28],[92,6,100,8],[92,10,100,12],[92,11,100,13,"_transportsByName"],[92,28,100,30],[92,31,100,33],[92,32,100,34],[92,33,100,35],[93,6,101,8,"opts"],[93,10,101,12],[93,11,101,13,"transports"],[93,21,101,23],[93,22,101,24,"forEach"],[93,29,101,31],[93,30,101,33,"t"],[93,31,101,34],[93,35,101,39],[94,8,102,12],[94,14,102,18,"transportName"],[94,27,102,31],[94,30,102,34,"t"],[94,31,102,35],[94,32,102,36,"prototype"],[94,41,102,45],[94,42,102,46,"name"],[94,46,102,50],[95,8,103,12],[95,12,103,16],[95,13,103,17,"transports"],[95,23,103,27],[95,24,103,28,"push"],[95,28,103,32],[95,29,103,33,"transportName"],[95,42,103,46],[95,43,103,47],[96,8,104,12],[96,12,104,16],[96,13,104,17,"_transportsByName"],[96,30,104,34],[96,31,104,35,"transportName"],[96,44,104,48],[96,45,104,49],[96,48,104,52,"t"],[96,49,104,53],[97,6,105,8],[97,7,105,9],[97,8,105,10],[98,6,106,8],[98,10,106,12],[98,11,106,13,"opts"],[98,15,106,17],[98,18,106,20,"Object"],[98,24,106,26],[98,25,106,27,"assign"],[98,31,106,33],[98,32,106,34],[99,8,107,12,"path"],[99,12,107,16],[99,14,107,18],[99,26,107,30],[100,8,108,12,"agent"],[100,13,108,17],[100,15,108,19],[100,20,108,24],[101,8,109,12,"withCredentials"],[101,23,109,27],[101,25,109,29],[101,30,109,34],[102,8,110,12,"upgrade"],[102,15,110,19],[102,17,110,21],[102,21,110,25],[103,8,111,12,"timestampParam"],[103,22,111,26],[103,24,111,28],[103,27,111,31],[104,8,112,12,"rememberUpgrade"],[104,23,112,27],[104,25,112,29],[104,30,112,34],[105,8,113,12,"addTrailingSlash"],[105,24,113,28],[105,26,113,30],[105,30,113,34],[106,8,114,12,"rejectUnauthorized"],[106,26,114,30],[106,28,114,32],[106,32,114,36],[107,8,115,12,"perMessageDeflate"],[107,25,115,29],[107,27,115,31],[108,10,116,16,"threshold"],[108,19,116,25],[108,21,116,27],[109,8,117,12],[109,9,117,13],[110,8,118,12,"transportOptions"],[110,24,118,28],[110,26,118,30],[110,27,118,31],[110,28,118,32],[111,8,119,12,"closeOnBeforeunload"],[111,27,119,31],[111,29,119,33],[112,6,120,8],[112,7,120,9],[112,9,120,11,"opts"],[112,13,120,15],[112,14,120,16],[113,6,121,8],[113,10,121,12],[113,11,121,13,"opts"],[113,15,121,17],[113,16,121,18,"path"],[113,20,121,22],[113,23,122,12],[113,27,122,16],[113,28,122,17,"opts"],[113,32,122,21],[113,33,122,22,"path"],[113,37,122,26],[113,38,122,27,"replace"],[113,45,122,34],[113,46,122,35],[113,51,122,40],[113,53,122,42],[113,55,122,44],[113,56,122,45],[113,60,123,17],[113,64,123,21],[113,65,123,22,"opts"],[113,69,123,26],[113,70,123,27,"addTrailingSlash"],[113,86,123,43],[113,89,123,46],[113,92,123,49],[113,95,123,52],[113,97,123,54],[113,98,123,55],[114,6,124,8],[114,10,124,12],[114,17,124,19],[114,21,124,23],[114,22,124,24,"opts"],[114,26,124,28],[114,27,124,29,"query"],[114,32,124,34],[114,37,124,39],[114,45,124,47],[114,47,124,49],[115,8,125,12],[115,12,125,16],[115,13,125,17,"opts"],[115,17,125,21],[115,18,125,22,"query"],[115,23,125,27],[115,26,125,30],[115,30,125,30,"decode"],[115,45,125,36],[115,47,125,37],[115,51,125,41],[115,52,125,42,"opts"],[115,56,125,46],[115,57,125,47,"query"],[115,62,125,52],[115,63,125,53],[116,6,126,8],[117,6,127,8],[117,10,127,12,"withEventListeners"],[117,28,127,30],[117,30,127,32],[118,8,128,12],[118,12,128,16],[118,16,128,20],[118,17,128,21,"opts"],[118,21,128,25],[118,22,128,26,"closeOnBeforeunload"],[118,41,128,45],[118,43,128,47],[119,10,129,16],[120,10,130,16],[121,10,131,16],[122,10,132,16],[122,14,132,20],[122,15,132,21,"_beforeunloadEventListener"],[122,41,132,47],[122,44,132,50],[122,50,132,56],[123,12,133,20],[123,16,133,24],[123,20,133,28],[123,21,133,29,"transport"],[123,30,133,38],[123,32,133,40],[124,14,134,24],[125,14,135,24],[125,18,135,28],[125,19,135,29,"transport"],[125,28,135,38],[125,29,135,39,"removeAllListeners"],[125,47,135,57],[125,48,135,58],[125,49,135,59],[126,14,136,24],[126,18,136,28],[126,19,136,29,"transport"],[126,28,136,38],[126,29,136,39,"close"],[126,34,136,44],[126,35,136,45],[126,36,136,46],[127,12,137,20],[128,10,138,16],[128,11,138,17],[129,10,139,16,"addEventListener"],[129,26,139,32],[129,27,139,33],[129,41,139,47],[129,43,139,49],[129,47,139,53],[129,48,139,54,"_beforeunloadEventListener"],[129,74,139,80],[129,76,139,82],[129,81,139,87],[129,82,139,88],[130,8,140,12],[131,8,141,12],[131,12,141,16],[131,16,141,20],[131,17,141,21,"hostname"],[131,25,141,29],[131,30,141,34],[131,41,141,45],[131,43,141,47],[132,10,142,16,"debug"],[132,15,142,21],[132,16,142,22],[132,57,142,63],[132,58,142,64],[133,10,143,16],[133,14,143,20],[133,15,143,21,"_offlineEventListener"],[133,36,143,42],[133,39,143,45],[133,45,143,51],[134,12,144,20],[134,16,144,24],[134,17,144,25,"_onClose"],[134,25,144,33],[134,26,144,34],[134,43,144,51],[134,45,144,53],[135,14,145,24,"description"],[135,25,145,35],[135,27,145,37],[136,12,146,20],[136,13,146,21],[136,14,146,22],[137,10,147,16],[137,11,147,17],[138,10,148,16,"OFFLINE_EVENT_LISTENERS"],[138,33,148,39],[138,34,148,40,"push"],[138,38,148,44],[138,39,148,45],[138,43,148,49],[138,44,148,50,"_offlineEventListener"],[138,65,148,71],[138,66,148,72],[139,8,149,12],[140,6,150,8],[141,6,151,8],[141,10,151,12],[141,14,151,16],[141,15,151,17,"opts"],[141,19,151,21],[141,20,151,22,"withCredentials"],[141,35,151,37],[141,37,151,39],[142,8,152,12],[142,12,152,16],[142,13,152,17,"_cookieJar"],[142,23,152,27],[142,26,152,30],[142,30,152,30,"createCookieJar"],[142,58,152,45],[142,60,152,46],[142,61,152,47],[143,6,153,8],[144,6,154,8],[144,10,154,12],[144,11,154,13,"_open"],[144,16,154,18],[144,17,154,19],[144,18,154,20],[145,4,155,4],[146,4,156,4],[147,0,157,0],[148,0,158,0],[149,0,159,0],[150,0,160,0],[151,0,161,0],[152,0,162,0],[153,4,163,4,"createTransport"],[153,19,163,19,"createTransport"],[153,20,163,20,"name"],[153,24,163,24],[153,26,163,26],[154,6,164,8,"debug"],[154,11,164,13],[154,12,164,14],[154,37,164,39],[154,39,164,41,"name"],[154,43,164,45],[154,44,164,46],[155,6,165,8],[155,12,165,14,"query"],[155,17,165,19],[155,20,165,22,"Object"],[155,26,165,28],[155,27,165,29,"assign"],[155,33,165,35],[155,34,165,36],[155,35,165,37],[155,36,165,38],[155,38,165,40],[155,42,165,44],[155,43,165,45,"opts"],[155,47,165,49],[155,48,165,50,"query"],[155,53,165,55],[155,54,165,56],[156,6,166,8],[157,6,167,8,"query"],[157,11,167,13],[157,12,167,14,"EIO"],[157,15,167,17],[157,18,167,20,"protocol"],[157,34,167,28],[158,6,168,8],[159,6,169,8,"query"],[159,11,169,13],[159,12,169,14,"transport"],[159,21,169,23],[159,24,169,26,"name"],[159,28,169,30],[160,6,170,8],[161,6,171,8],[161,10,171,12],[161,14,171,16],[161,15,171,17,"id"],[161,17,171,19],[161,19,172,12,"query"],[161,24,172,17],[161,25,172,18,"sid"],[161,28,172,21],[161,31,172,24],[161,35,172,28],[161,36,172,29,"id"],[161,38,172,31],[162,6,173,8],[162,12,173,14,"opts"],[162,16,173,18],[162,19,173,21,"Object"],[162,25,173,27],[162,26,173,28,"assign"],[162,32,173,34],[162,33,173,35],[162,34,173,36],[162,35,173,37],[162,37,173,39],[162,41,173,43],[162,42,173,44,"opts"],[162,46,173,48],[162,48,173,50],[163,8,174,12,"query"],[163,13,174,17],[164,8,175,12,"socket"],[164,14,175,18],[164,16,175,20],[164,20,175,24],[165,8,176,12,"hostname"],[165,16,176,20],[165,18,176,22],[165,22,176,26],[165,23,176,27,"hostname"],[165,31,176,35],[166,8,177,12,"secure"],[166,14,177,18],[166,16,177,20],[166,20,177,24],[166,21,177,25,"secure"],[166,27,177,31],[167,8,178,12,"port"],[167,12,178,16],[167,14,178,18],[167,18,178,22],[167,19,178,23,"port"],[168,6,179,8],[168,7,179,9],[168,9,179,11],[168,13,179,15],[168,14,179,16,"opts"],[168,18,179,20],[168,19,179,21,"transportOptions"],[168,35,179,37],[168,36,179,38,"name"],[168,40,179,42],[168,41,179,43],[168,42,179,44],[169,6,180,8,"debug"],[169,11,180,13],[169,12,180,14],[169,25,180,27],[169,27,180,29,"opts"],[169,31,180,33],[169,32,180,34],[170,6,181,8],[170,13,181,15],[170,17,181,19],[170,21,181,23],[170,22,181,24,"_transportsByName"],[170,39,181,41],[170,40,181,42,"name"],[170,44,181,46],[170,45,181,47],[170,46,181,48,"opts"],[170,50,181,52],[170,51,181,53],[171,4,182,4],[172,4,183,4],[173,0,184,0],[174,0,185,0],[175,0,186,0],[176,0,187,0],[177,4,188,4,"_open"],[177,9,188,9,"_open"],[177,10,188,9],[177,12,188,12],[178,6,189,8],[178,10,189,12],[178,14,189,16],[178,15,189,17,"transports"],[178,25,189,27],[178,26,189,28,"length"],[178,32,189,34],[178,37,189,39],[178,38,189,40],[178,40,189,42],[179,8,190,12],[180,8,191,12],[180,12,191,16],[180,13,191,17,"setTimeoutFn"],[180,25,191,29],[180,26,191,30],[180,32,191,36],[181,10,192,16],[181,14,192,20],[181,15,192,21,"emitReserved"],[181,27,192,33],[181,28,192,34],[181,35,192,41],[181,37,192,43],[181,62,192,68],[181,63,192,69],[182,8,193,12],[182,9,193,13],[182,11,193,15],[182,12,193,16],[182,13,193,17],[183,8,194,12],[184,6,195,8],[185,6,196,8],[185,12,196,14,"transportName"],[185,25,196,27],[185,28,196,30],[185,32,196,34],[185,33,196,35,"opts"],[185,37,196,39],[185,38,196,40,"rememberUpgrade"],[185,53,196,55],[185,57,197,12,"SocketWithoutUpgrade"],[185,77,197,32],[185,78,197,33,"priorWebsocketSuccess"],[185,99,197,54],[185,103,198,12],[185,107,198,16],[185,108,198,17,"transports"],[185,118,198,27],[185,119,198,28,"indexOf"],[185,126,198,35],[185,127,198,36],[185,138,198,47],[185,139,198,48],[185,144,198,53],[185,145,198,54],[185,146,198,55],[185,149,199,14],[185,160,199,25],[185,163,200,14],[185,167,200,18],[185,168,200,19,"transports"],[185,178,200,29],[185,179,200,30],[185,180,200,31],[185,181,200,32],[186,6,201,8],[186,10,201,12],[186,11,201,13,"readyState"],[186,21,201,23],[186,24,201,26],[186,33,201,35],[187,6,202,8],[187,12,202,14,"transport"],[187,21,202,23],[187,24,202,26],[187,28,202,30],[187,29,202,31,"createTransport"],[187,44,202,46],[187,45,202,47,"transportName"],[187,58,202,60],[187,59,202,61],[188,6,203,8,"transport"],[188,15,203,17],[188,16,203,18,"open"],[188,20,203,22],[188,21,203,23],[188,22,203,24],[189,6,204,8],[189,10,204,12],[189,11,204,13,"setTransport"],[189,23,204,25],[189,24,204,26,"transport"],[189,33,204,35],[189,34,204,36],[190,4,205,4],[191,4,206,4],[192,0,207,0],[193,0,208,0],[194,0,209,0],[195,0,210,0],[196,4,211,4,"setTransport"],[196,16,211,16,"setTransport"],[196,17,211,17,"transport"],[196,26,211,26],[196,28,211,28],[197,6,212,8,"debug"],[197,11,212,13],[197,12,212,14],[197,34,212,36],[197,36,212,38,"transport"],[197,45,212,47],[197,46,212,48,"name"],[197,50,212,52],[197,51,212,53],[198,6,213,8],[198,10,213,12],[198,14,213,16],[198,15,213,17,"transport"],[198,24,213,26],[198,26,213,28],[199,8,214,12,"debug"],[199,13,214,17],[199,14,214,18],[199,46,214,50],[199,48,214,52],[199,52,214,56],[199,53,214,57,"transport"],[199,62,214,66],[199,63,214,67,"name"],[199,67,214,71],[199,68,214,72],[200,8,215,12],[200,12,215,16],[200,13,215,17,"transport"],[200,22,215,26],[200,23,215,27,"removeAllListeners"],[200,41,215,45],[200,42,215,46],[200,43,215,47],[201,6,216,8],[202,6,217,8],[203,6,218,8],[203,10,218,12],[203,11,218,13,"transport"],[203,20,218,22],[203,23,218,25,"transport"],[203,32,218,34],[204,6,219,8],[205,6,220,8,"transport"],[205,15,220,17],[205,16,221,13,"on"],[205,18,221,15],[205,19,221,16],[205,26,221,23],[205,28,221,25],[205,32,221,29],[205,33,221,30,"_onDrain"],[205,41,221,38],[205,42,221,39,"bind"],[205,46,221,43],[205,47,221,44],[205,51,221,48],[205,52,221,49],[205,53,221,50],[205,54,222,13,"on"],[205,56,222,15],[205,57,222,16],[205,65,222,24],[205,67,222,26],[205,71,222,30],[205,72,222,31,"_onPacket"],[205,81,222,40],[205,82,222,41,"bind"],[205,86,222,45],[205,87,222,46],[205,91,222,50],[205,92,222,51],[205,93,222,52],[205,94,223,13,"on"],[205,96,223,15],[205,97,223,16],[205,104,223,23],[205,106,223,25],[205,110,223,29],[205,111,223,30,"_onError"],[205,119,223,38],[205,120,223,39,"bind"],[205,124,223,43],[205,125,223,44],[205,129,223,48],[205,130,223,49],[205,131,223,50],[205,132,224,13,"on"],[205,134,224,15],[205,135,224,16],[205,142,224,23],[205,144,224,26,"reason"],[205,150,224,32],[205,154,224,37],[205,158,224,41],[205,159,224,42,"_onClose"],[205,167,224,50],[205,168,224,51],[205,185,224,68],[205,187,224,70,"reason"],[205,193,224,76],[205,194,224,77],[205,195,224,78],[206,4,225,4],[207,4,226,4],[208,0,227,0],[209,0,228,0],[210,0,229,0],[211,0,230,0],[212,4,231,4,"onOpen"],[212,10,231,10,"onOpen"],[212,11,231,10],[212,13,231,13],[213,6,232,8,"debug"],[213,11,232,13],[213,12,232,14],[213,25,232,27],[213,26,232,28],[214,6,233,8],[214,10,233,12],[214,11,233,13,"readyState"],[214,21,233,23],[214,24,233,26],[214,30,233,32],[215,6,234,8,"SocketWithoutUpgrade"],[215,26,234,28],[215,27,234,29,"priorWebsocketSuccess"],[215,48,234,50],[215,51,235,12],[215,62,235,23],[215,67,235,28],[215,71,235,32],[215,72,235,33,"transport"],[215,81,235,42],[215,82,235,43,"name"],[215,86,235,47],[216,6,236,8],[216,10,236,12],[216,11,236,13,"emitReserved"],[216,23,236,25],[216,24,236,26],[216,30,236,32],[216,31,236,33],[217,6,237,8],[217,10,237,12],[217,11,237,13,"flush"],[217,16,237,18],[217,17,237,19],[217,18,237,20],[218,4,238,4],[219,4,239,4],[220,0,240,0],[221,0,241,0],[222,0,242,0],[223,0,243,0],[224,4,244,4,"_onPacket"],[224,13,244,13,"_onPacket"],[224,14,244,14,"packet"],[224,20,244,20],[224,22,244,22],[225,6,245,8],[225,10,245,12],[225,19,245,21],[225,24,245,26],[225,28,245,30],[225,29,245,31,"readyState"],[225,39,245,41],[225,43,246,12],[225,49,246,18],[225,54,246,23],[225,58,246,27],[225,59,246,28,"readyState"],[225,69,246,38],[225,73,247,12],[225,82,247,21],[225,87,247,26],[225,91,247,30],[225,92,247,31,"readyState"],[225,102,247,41],[225,104,247,43],[226,8,248,12,"debug"],[226,13,248,17],[226,14,248,18],[226,52,248,56],[226,54,248,58,"packet"],[226,60,248,64],[226,61,248,65,"type"],[226,65,248,69],[226,67,248,71,"packet"],[226,73,248,77],[226,74,248,78,"data"],[226,78,248,82],[226,79,248,83],[227,8,249,12],[227,12,249,16],[227,13,249,17,"emitReserved"],[227,25,249,29],[227,26,249,30],[227,34,249,38],[227,36,249,40,"packet"],[227,42,249,46],[227,43,249,47],[228,8,250,12],[229,8,251,12],[229,12,251,16],[229,13,251,17,"emitReserved"],[229,25,251,29],[229,26,251,30],[229,37,251,41],[229,38,251,42],[230,8,252,12],[230,16,252,20,"packet"],[230,22,252,26],[230,23,252,27,"type"],[230,27,252,31],[231,10,253,16],[231,15,253,21],[231,21,253,27],[232,12,254,20],[232,16,254,24],[232,17,254,25,"onHandshake"],[232,28,254,36],[232,29,254,37,"JSON"],[232,33,254,41],[232,34,254,42,"parse"],[232,39,254,47],[232,40,254,48,"packet"],[232,46,254,54],[232,47,254,55,"data"],[232,51,254,59],[232,52,254,60],[232,53,254,61],[233,12,255,20],[234,10,256,16],[234,15,256,21],[234,21,256,27],[235,12,257,20],[235,16,257,24],[235,17,257,25,"_sendPacket"],[235,28,257,36],[235,29,257,37],[235,35,257,43],[235,36,257,44],[236,12,258,20],[236,16,258,24],[236,17,258,25,"emitReserved"],[236,29,258,37],[236,30,258,38],[236,36,258,44],[236,37,258,45],[237,12,259,20],[237,16,259,24],[237,17,259,25,"emitReserved"],[237,29,259,37],[237,30,259,38],[237,36,259,44],[237,37,259,45],[238,12,260,20],[238,16,260,24],[238,17,260,25,"_resetPingTimeout"],[238,34,260,42],[238,35,260,43],[238,36,260,44],[239,12,261,20],[240,10,262,16],[240,15,262,21],[240,22,262,28],[241,12,263,20],[241,18,263,26,"err"],[241,21,263,29],[241,24,263,32],[241,28,263,36,"Error"],[241,33,263,41],[241,34,263,42],[241,48,263,56],[241,49,263,57],[242,12,264,20],[243,12,265,20,"err"],[243,15,265,23],[243,16,265,24,"code"],[243,20,265,28],[243,23,265,31,"packet"],[243,29,265,37],[243,30,265,38,"data"],[243,34,265,42],[244,12,266,20],[244,16,266,24],[244,17,266,25,"_onError"],[244,25,266,33],[244,26,266,34,"err"],[244,29,266,37],[244,30,266,38],[245,12,267,20],[246,10,268,16],[246,15,268,21],[246,24,268,30],[247,12,269,20],[247,16,269,24],[247,17,269,25,"emitReserved"],[247,29,269,37],[247,30,269,38],[247,36,269,44],[247,38,269,46,"packet"],[247,44,269,52],[247,45,269,53,"data"],[247,49,269,57],[247,50,269,58],[248,12,270,20],[248,16,270,24],[248,17,270,25,"emitReserved"],[248,29,270,37],[248,30,270,38],[248,39,270,47],[248,41,270,49,"packet"],[248,47,270,55],[248,48,270,56,"data"],[248,52,270,60],[248,53,270,61],[249,12,271,20],[250,8,272,12],[251,6,273,8],[251,7,273,9],[251,13,274,13],[252,8,275,12,"debug"],[252,13,275,17],[252,14,275,18],[252,59,275,63],[252,61,275,65],[252,65,275,69],[252,66,275,70,"readyState"],[252,76,275,80],[252,77,275,81],[253,6,276,8],[254,4,277,4],[255,4,278,4],[256,0,279,0],[257,0,280,0],[258,0,281,0],[259,0,282,0],[260,0,283,0],[261,4,284,4,"onHandshake"],[261,15,284,15,"onHandshake"],[261,16,284,16,"data"],[261,20,284,20],[261,22,284,22],[262,6,285,8],[262,10,285,12],[262,11,285,13,"emitReserved"],[262,23,285,25],[262,24,285,26],[262,35,285,37],[262,37,285,39,"data"],[262,41,285,43],[262,42,285,44],[263,6,286,8],[263,10,286,12],[263,11,286,13,"id"],[263,13,286,15],[263,16,286,18,"data"],[263,20,286,22],[263,21,286,23,"sid"],[263,24,286,26],[264,6,287,8],[264,10,287,12],[264,11,287,13,"transport"],[264,20,287,22],[264,21,287,23,"query"],[264,26,287,28],[264,27,287,29,"sid"],[264,30,287,32],[264,33,287,35,"data"],[264,37,287,39],[264,38,287,40,"sid"],[264,41,287,43],[265,6,288,8],[265,10,288,12],[265,11,288,13,"_pingInterval"],[265,24,288,26],[265,27,288,29,"data"],[265,31,288,33],[265,32,288,34,"pingInterval"],[265,44,288,46],[266,6,289,8],[266,10,289,12],[266,11,289,13,"_pingTimeout"],[266,23,289,25],[266,26,289,28,"data"],[266,30,289,32],[266,31,289,33,"pingTimeout"],[266,42,289,44],[267,6,290,8],[267,10,290,12],[267,11,290,13,"_maxPayload"],[267,22,290,24],[267,25,290,27,"data"],[267,29,290,31],[267,30,290,32,"maxPayload"],[267,40,290,42],[268,6,291,8],[268,10,291,12],[268,11,291,13,"onOpen"],[268,17,291,19],[268,18,291,20],[268,19,291,21],[269,6,292,8],[270,6,293,8],[270,10,293,12],[270,18,293,20],[270,23,293,25],[270,27,293,29],[270,28,293,30,"readyState"],[270,38,293,40],[270,40,294,12],[271,6,295,8],[271,10,295,12],[271,11,295,13,"_resetPingTimeout"],[271,28,295,30],[271,29,295,31],[271,30,295,32],[272,4,296,4],[273,4,297,4],[274,0,298,0],[275,0,299,0],[276,0,300,0],[277,0,301,0],[278,4,302,4,"_resetPingTimeout"],[278,21,302,21,"_resetPingTimeout"],[278,22,302,21],[278,24,302,24],[279,6,303,8],[279,10,303,12],[279,11,303,13,"clearTimeoutFn"],[279,25,303,27],[279,26,303,28],[279,30,303,32],[279,31,303,33,"_pingTimeoutTimer"],[279,48,303,50],[279,49,303,51],[280,6,304,8],[280,12,304,14,"delay"],[280,17,304,19],[280,20,304,22],[280,24,304,26],[280,25,304,27,"_pingInterval"],[280,38,304,40],[280,41,304,43],[280,45,304,47],[280,46,304,48,"_pingTimeout"],[280,58,304,60],[281,6,305,8],[281,10,305,12],[281,11,305,13,"_pingTimeoutTime"],[281,27,305,29],[281,30,305,32,"Date"],[281,34,305,36],[281,35,305,37,"now"],[281,38,305,40],[281,39,305,41],[281,40,305,42],[281,43,305,45,"delay"],[281,48,305,50],[282,6,306,8],[282,10,306,12],[282,11,306,13,"_pingTimeoutTimer"],[282,28,306,30],[282,31,306,33],[282,35,306,37],[282,36,306,38,"setTimeoutFn"],[282,48,306,50],[282,49,306,51],[282,55,306,57],[283,8,307,12],[283,12,307,16],[283,13,307,17,"_onClose"],[283,21,307,25],[283,22,307,26],[283,36,307,40],[283,37,307,41],[284,6,308,8],[284,7,308,9],[284,9,308,11,"delay"],[284,14,308,16],[284,15,308,17],[285,6,309,8],[285,10,309,12],[285,14,309,16],[285,15,309,17,"opts"],[285,19,309,21],[285,20,309,22,"autoUnref"],[285,29,309,31],[285,31,309,33],[286,8,310,12],[286,12,310,16],[286,13,310,17,"_pingTimeoutTimer"],[286,30,310,34],[286,31,310,35,"unref"],[286,36,310,40],[286,37,310,41],[286,38,310,42],[287,6,311,8],[288,4,312,4],[289,4,313,4],[290,0,314,0],[291,0,315,0],[292,0,316,0],[293,0,317,0],[294,4,318,4,"_onDrain"],[294,12,318,12,"_onDrain"],[294,13,318,12],[294,15,318,15],[295,6,319,8],[295,10,319,12],[295,11,319,13,"writeBuffer"],[295,22,319,24],[295,23,319,25,"splice"],[295,29,319,31],[295,30,319,32],[295,31,319,33],[295,33,319,35],[295,37,319,39],[295,38,319,40,"_prevBufferLen"],[295,52,319,54],[295,53,319,55],[296,6,320,8],[297,6,321,8],[298,6,322,8],[299,6,323,8],[299,10,323,12],[299,11,323,13,"_prevBufferLen"],[299,25,323,27],[299,28,323,30],[299,29,323,31],[300,6,324,8],[300,10,324,12],[300,11,324,13],[300,16,324,18],[300,20,324,22],[300,21,324,23,"writeBuffer"],[300,32,324,34],[300,33,324,35,"length"],[300,39,324,41],[300,41,324,43],[301,8,325,12],[301,12,325,16],[301,13,325,17,"emitReserved"],[301,25,325,29],[301,26,325,30],[301,33,325,37],[301,34,325,38],[302,6,326,8],[302,7,326,9],[302,13,327,13],[303,8,328,12],[303,12,328,16],[303,13,328,17,"flush"],[303,18,328,22],[303,19,328,23],[303,20,328,24],[304,6,329,8],[305,4,330,4],[306,4,331,4],[307,0,332,0],[308,0,333,0],[309,0,334,0],[310,0,335,0],[311,4,336,4,"flush"],[311,9,336,9,"flush"],[311,10,336,9],[311,12,336,12],[312,6,337,8],[312,10,337,12],[312,18,337,20],[312,23,337,25],[312,27,337,29],[312,28,337,30,"readyState"],[312,38,337,40],[312,42,338,12],[312,46,338,16],[312,47,338,17,"transport"],[312,56,338,26],[312,57,338,27,"writable"],[312,65,338,35],[312,69,339,12],[312,70,339,13],[312,74,339,17],[312,75,339,18,"upgrading"],[312,84,339,27],[312,88,340,12],[312,92,340,16],[312,93,340,17,"writeBuffer"],[312,104,340,28],[312,105,340,29,"length"],[312,111,340,35],[312,113,340,37],[313,8,341,12],[313,14,341,18,"packets"],[313,21,341,25],[313,24,341,28],[313,28,341,32],[313,29,341,33,"_getWritablePackets"],[313,48,341,52],[313,49,341,53],[313,50,341,54],[314,8,342,12,"debug"],[314,13,342,17],[314,14,342,18],[314,45,342,49],[314,47,342,51,"packets"],[314,54,342,58],[314,55,342,59,"length"],[314,61,342,65],[314,62,342,66],[315,8,343,12],[315,12,343,16],[315,13,343,17,"transport"],[315,22,343,26],[315,23,343,27,"send"],[315,27,343,31],[315,28,343,32,"packets"],[315,35,343,39],[315,36,343,40],[316,8,344,12],[317,8,345,12],[318,8,346,12],[318,12,346,16],[318,13,346,17,"_prevBufferLen"],[318,27,346,31],[318,30,346,34,"packets"],[318,37,346,41],[318,38,346,42,"length"],[318,44,346,48],[319,8,347,12],[319,12,347,16],[319,13,347,17,"emitReserved"],[319,25,347,29],[319,26,347,30],[319,33,347,37],[319,34,347,38],[320,6,348,8],[321,4,349,4],[322,4,350,4],[323,0,351,0],[324,0,352,0],[325,0,353,0],[326,0,354,0],[327,0,355,0],[328,4,356,4,"_getWritablePackets"],[328,23,356,23,"_getWritablePackets"],[328,24,356,23],[328,26,356,26],[329,6,357,8],[329,12,357,14,"shouldCheckPayloadSize"],[329,34,357,36],[329,37,357,39],[329,41,357,43],[329,42,357,44,"_maxPayload"],[329,53,357,55],[329,57,358,12],[329,61,358,16],[329,62,358,17,"transport"],[329,71,358,26],[329,72,358,27,"name"],[329,76,358,31],[329,81,358,36],[329,90,358,45],[329,94,359,12],[329,98,359,16],[329,99,359,17,"writeBuffer"],[329,110,359,28],[329,111,359,29,"length"],[329,117,359,35],[329,120,359,38],[329,121,359,39],[330,6,360,8],[330,10,360,12],[330,11,360,13,"shouldCheckPayloadSize"],[330,33,360,35],[330,35,360,37],[331,8,361,12],[331,15,361,19],[331,19,361,23],[331,20,361,24,"writeBuffer"],[331,31,361,35],[332,6,362,8],[333,6,363,8],[333,10,363,12,"payloadSize"],[333,21,363,23],[333,24,363,26],[333,25,363,27],[333,26,363,28],[333,27,363,29],[334,6,364,8],[334,11,364,13],[334,15,364,17,"i"],[334,16,364,18],[334,19,364,21],[334,20,364,22],[334,22,364,24,"i"],[334,23,364,25],[334,26,364,28],[334,30,364,32],[334,31,364,33,"writeBuffer"],[334,42,364,44],[334,43,364,45,"length"],[334,49,364,51],[334,51,364,53,"i"],[334,52,364,54],[334,54,364,56],[334,56,364,58],[335,8,365,12],[335,14,365,18,"data"],[335,18,365,22],[335,21,365,25],[335,25,365,29],[335,26,365,30,"writeBuffer"],[335,37,365,41],[335,38,365,42,"i"],[335,39,365,43],[335,40,365,44],[335,41,365,45,"data"],[335,45,365,49],[336,8,366,12],[336,12,366,16,"data"],[336,16,366,20],[336,18,366,22],[337,10,367,16,"payloadSize"],[337,21,367,27],[337,25,367,31],[337,29,367,31,"byteLength"],[337,45,367,41],[337,47,367,42,"data"],[337,51,367,46],[337,52,367,47],[338,8,368,12],[339,8,369,12],[339,12,369,16,"i"],[339,13,369,17],[339,16,369,20],[339,17,369,21],[339,21,369,25,"payloadSize"],[339,32,369,36],[339,35,369,39],[339,39,369,43],[339,40,369,44,"_maxPayload"],[339,51,369,55],[339,53,369,57],[340,10,370,16,"debug"],[340,15,370,21],[340,16,370,22],[340,48,370,54],[340,50,370,56,"i"],[340,51,370,57],[340,53,370,59],[340,57,370,63],[340,58,370,64,"writeBuffer"],[340,69,370,75],[340,70,370,76,"length"],[340,76,370,82],[340,77,370,83],[341,10,371,16],[341,17,371,23],[341,21,371,27],[341,22,371,28,"writeBuffer"],[341,33,371,39],[341,34,371,40,"slice"],[341,39,371,45],[341,40,371,46],[341,41,371,47],[341,43,371,49,"i"],[341,44,371,50],[341,45,371,51],[342,8,372,12],[343,8,373,12,"payloadSize"],[343,19,373,23],[343,23,373,27],[343,24,373,28],[343,25,373,29],[343,26,373,30],[344,6,374,8],[345,6,375,8,"debug"],[345,11,375,13],[345,12,375,14],[345,42,375,44],[345,44,375,46,"payloadSize"],[345,55,375,57],[345,57,375,59],[345,61,375,63],[345,62,375,64,"_maxPayload"],[345,73,375,75],[345,74,375,76],[346,6,376,8],[346,13,376,15],[346,17,376,19],[346,18,376,20,"writeBuffer"],[346,29,376,31],[347,4,377,4],[348,4,378,4],[349,0,379,0],[350,0,380,0],[351,0,381,0],[352,0,382,0],[353,0,383,0],[354,0,384,0],[355,0,385,0],[356,0,386,0],[357,4,387,4],[358,4,387,18,"_hasPingExpired"],[358,19,387,33,"_hasPingExpired"],[358,20,387,33],[358,22,387,36],[359,6,388,8],[359,10,388,12],[359,11,388,13],[359,15,388,17],[359,16,388,18,"_pingTimeoutTime"],[359,32,388,34],[359,34,389,12],[359,41,389,19],[359,45,389,23],[360,6,390,8],[360,12,390,14,"hasExpired"],[360,22,390,24],[360,25,390,27,"Date"],[360,29,390,31],[360,30,390,32,"now"],[360,33,390,35],[360,34,390,36],[360,35,390,37],[360,38,390,40],[360,42,390,44],[360,43,390,45,"_pingTimeoutTime"],[360,59,390,61],[361,6,391,8],[361,10,391,12,"hasExpired"],[361,20,391,22],[361,22,391,24],[362,8,392,12,"debug"],[362,13,392,17],[362,14,392,18],[362,69,392,73],[362,70,392,74],[363,8,393,12],[363,12,393,16],[363,13,393,17,"_pingTimeoutTime"],[363,29,393,33],[363,32,393,36],[363,33,393,37],[364,8,394,12],[364,12,394,12,"nextTick"],[364,33,394,20],[364,35,394,21],[364,41,394,27],[365,10,395,16],[365,14,395,20],[365,15,395,21,"_onClose"],[365,23,395,29],[365,24,395,30],[365,38,395,44],[365,39,395,45],[366,8,396,12],[366,9,396,13],[366,11,396,15],[366,15,396,19],[366,16,396,20,"setTimeoutFn"],[366,28,396,32],[366,29,396,33],[367,6,397,8],[368,6,398,8],[368,13,398,15,"hasExpired"],[368,23,398,25],[369,4,399,4],[370,4,400,4],[371,0,401,0],[372,0,402,0],[373,0,403,0],[374,0,404,0],[375,0,405,0],[376,0,406,0],[377,0,407,0],[378,4,408,4,"write"],[378,9,408,9,"write"],[378,10,408,10,"msg"],[378,13,408,13],[378,15,408,15,"options"],[378,22,408,22],[378,24,408,24,"fn"],[378,26,408,26],[378,28,408,28],[379,6,409,8],[379,10,409,12],[379,11,409,13,"_sendPacket"],[379,22,409,24],[379,23,409,25],[379,32,409,34],[379,34,409,36,"msg"],[379,37,409,39],[379,39,409,41,"options"],[379,46,409,48],[379,48,409,50,"fn"],[379,50,409,52],[379,51,409,53],[380,6,410,8],[380,13,410,15],[380,17,410,19],[381,4,411,4],[382,4,412,4],[383,0,413,0],[384,0,414,0],[385,0,415,0],[386,0,416,0],[387,0,417,0],[388,0,418,0],[389,0,419,0],[390,4,420,4,"send"],[390,8,420,8,"send"],[390,9,420,9,"msg"],[390,12,420,12],[390,14,420,14,"options"],[390,21,420,21],[390,23,420,23,"fn"],[390,25,420,25],[390,27,420,27],[391,6,421,8],[391,10,421,12],[391,11,421,13,"_sendPacket"],[391,22,421,24],[391,23,421,25],[391,32,421,34],[391,34,421,36,"msg"],[391,37,421,39],[391,39,421,41,"options"],[391,46,421,48],[391,48,421,50,"fn"],[391,50,421,52],[391,51,421,53],[392,6,422,8],[392,13,422,15],[392,17,422,19],[393,4,423,4],[394,4,424,4],[395,0,425,0],[396,0,426,0],[397,0,427,0],[398,0,428,0],[399,0,429,0],[400,0,430,0],[401,0,431,0],[402,0,432,0],[403,4,433,4,"_sendPacket"],[403,15,433,15,"_sendPacket"],[403,16,433,16,"type"],[403,20,433,20],[403,22,433,22,"data"],[403,26,433,26],[403,28,433,28,"options"],[403,35,433,35],[403,37,433,37,"fn"],[403,39,433,39],[403,41,433,41],[404,6,434,8],[404,10,434,12],[404,20,434,22],[404,25,434,27],[404,32,434,34,"data"],[404,36,434,38],[404,38,434,40],[405,8,435,12,"fn"],[405,10,435,14],[405,13,435,17,"data"],[405,17,435,21],[406,8,436,12,"data"],[406,12,436,16],[406,15,436,19,"undefined"],[406,24,436,28],[407,6,437,8],[408,6,438,8],[408,10,438,12],[408,20,438,22],[408,25,438,27],[408,32,438,34,"options"],[408,39,438,41],[408,41,438,43],[409,8,439,12,"fn"],[409,10,439,14],[409,13,439,17,"options"],[409,20,439,24],[410,8,440,12,"options"],[410,15,440,19],[410,18,440,22],[410,22,440,26],[411,6,441,8],[412,6,442,8],[412,10,442,12],[412,19,442,21],[412,24,442,26],[412,28,442,30],[412,29,442,31,"readyState"],[412,39,442,41],[412,43,442,45],[412,51,442,53],[412,56,442,58],[412,60,442,62],[412,61,442,63,"readyState"],[412,71,442,73],[412,73,442,75],[413,8,443,12],[414,6,444,8],[415,6,445,8,"options"],[415,13,445,15],[415,16,445,18,"options"],[415,23,445,25],[415,27,445,29],[415,28,445,30],[415,29,445,31],[416,6,446,8,"options"],[416,13,446,15],[416,14,446,16,"compress"],[416,22,446,24],[416,25,446,27],[416,30,446,32],[416,35,446,37,"options"],[416,42,446,44],[416,43,446,45,"compress"],[416,51,446,53],[417,6,447,8],[417,12,447,14,"packet"],[417,18,447,20],[417,21,447,23],[418,8,448,12,"type"],[418,12,448,16],[418,14,448,18,"type"],[418,18,448,22],[419,8,449,12,"data"],[419,12,449,16],[419,14,449,18,"data"],[419,18,449,22],[420,8,450,12,"options"],[420,15,450,19],[420,17,450,21,"options"],[421,6,451,8],[421,7,451,9],[422,6,452,8],[422,10,452,12],[422,11,452,13,"emitReserved"],[422,23,452,25],[422,24,452,26],[422,38,452,40],[422,40,452,42,"packet"],[422,46,452,48],[422,47,452,49],[423,6,453,8],[423,10,453,12],[423,11,453,13,"writeBuffer"],[423,22,453,24],[423,23,453,25,"push"],[423,27,453,29],[423,28,453,30,"packet"],[423,34,453,36],[423,35,453,37],[424,6,454,8],[424,10,454,12,"fn"],[424,12,454,14],[424,14,455,12],[424,18,455,16],[424,19,455,17,"once"],[424,23,455,21],[424,24,455,22],[424,31,455,29],[424,33,455,31,"fn"],[424,35,455,33],[424,36,455,34],[425,6,456,8],[425,10,456,12],[425,11,456,13,"flush"],[425,16,456,18],[425,17,456,19],[425,18,456,20],[426,4,457,4],[427,4,458,4],[428,0,459,0],[429,0,460,0],[430,4,461,4,"close"],[430,9,461,9,"close"],[430,10,461,9],[430,12,461,12],[431,6,462,8],[431,12,462,14,"close"],[431,17,462,19],[431,20,462,22,"close"],[431,21,462,22],[431,26,462,28],[432,8,463,12],[432,12,463,16],[432,13,463,17,"_onClose"],[432,21,463,25],[432,22,463,26],[432,36,463,40],[432,37,463,41],[433,8,464,12,"debug"],[433,13,464,17],[433,14,464,18],[433,59,464,63],[433,60,464,64],[434,8,465,12],[434,12,465,16],[434,13,465,17,"transport"],[434,22,465,26],[434,23,465,27,"close"],[434,28,465,32],[434,29,465,33],[434,30,465,34],[435,6,466,8],[435,7,466,9],[436,6,467,8],[436,12,467,14,"cleanupAndClose"],[436,27,467,29],[436,30,467,32,"cleanupAndClose"],[436,31,467,32],[436,36,467,38],[437,8,468,12],[437,12,468,16],[437,13,468,17,"off"],[437,16,468,20],[437,17,468,21],[437,26,468,30],[437,28,468,32,"cleanupAndClose"],[437,43,468,47],[437,44,468,48],[438,8,469,12],[438,12,469,16],[438,13,469,17,"off"],[438,16,469,20],[438,17,469,21],[438,31,469,35],[438,33,469,37,"cleanupAndClose"],[438,48,469,52],[438,49,469,53],[439,8,470,12,"close"],[439,13,470,17],[439,14,470,18],[439,15,470,19],[440,6,471,8],[440,7,471,9],[441,6,472,8],[441,12,472,14,"waitForUpgrade"],[441,26,472,28],[441,29,472,31,"waitForUpgrade"],[441,30,472,31],[441,35,472,37],[442,8,473,12],[443,8,474,12],[443,12,474,16],[443,13,474,17,"once"],[443,17,474,21],[443,18,474,22],[443,27,474,31],[443,29,474,33,"cleanupAndClose"],[443,44,474,48],[443,45,474,49],[444,8,475,12],[444,12,475,16],[444,13,475,17,"once"],[444,17,475,21],[444,18,475,22],[444,32,475,36],[444,34,475,38,"cleanupAndClose"],[444,49,475,53],[444,50,475,54],[445,6,476,8],[445,7,476,9],[446,6,477,8],[446,10,477,12],[446,19,477,21],[446,24,477,26],[446,28,477,30],[446,29,477,31,"readyState"],[446,39,477,41],[446,43,477,45],[446,49,477,51],[446,54,477,56],[446,58,477,60],[446,59,477,61,"readyState"],[446,69,477,71],[446,71,477,73],[447,8,478,12],[447,12,478,16],[447,13,478,17,"readyState"],[447,23,478,27],[447,26,478,30],[447,35,478,39],[448,8,479,12],[448,12,479,16],[448,16,479,20],[448,17,479,21,"writeBuffer"],[448,28,479,32],[448,29,479,33,"length"],[448,35,479,39],[448,37,479,41],[449,10,480,16],[449,14,480,20],[449,15,480,21,"once"],[449,19,480,25],[449,20,480,26],[449,27,480,33],[449,29,480,35],[449,35,480,41],[450,12,481,20],[450,16,481,24],[450,20,481,28],[450,21,481,29,"upgrading"],[450,30,481,38],[450,32,481,40],[451,14,482,24,"waitForUpgrade"],[451,28,482,38],[451,29,482,39],[451,30,482,40],[452,12,483,20],[452,13,483,21],[452,19,484,25],[453,14,485,24,"close"],[453,19,485,29],[453,20,485,30],[453,21,485,31],[454,12,486,20],[455,10,487,16],[455,11,487,17],[455,12,487,18],[456,8,488,12],[456,9,488,13],[456,15,489,17],[456,19,489,21],[456,23,489,25],[456,24,489,26,"upgrading"],[456,33,489,35],[456,35,489,37],[457,10,490,16,"waitForUpgrade"],[457,24,490,30],[457,25,490,31],[457,26,490,32],[458,8,491,12],[458,9,491,13],[458,15,492,17],[459,10,493,16,"close"],[459,15,493,21],[459,16,493,22],[459,17,493,23],[460,8,494,12],[461,6,495,8],[462,6,496,8],[462,13,496,15],[462,17,496,19],[463,4,497,4],[464,4,498,4],[465,0,499,0],[466,0,500,0],[467,0,501,0],[468,0,502,0],[469,4,503,4,"_onError"],[469,12,503,12,"_onError"],[469,13,503,13,"err"],[469,16,503,16],[469,18,503,18],[470,6,504,8,"debug"],[470,11,504,13],[470,12,504,14],[470,29,504,31],[470,31,504,33,"err"],[470,34,504,36],[470,35,504,37],[471,6,505,8,"SocketWithoutUpgrade"],[471,26,505,28],[471,27,505,29,"priorWebsocketSuccess"],[471,48,505,50],[471,51,505,53],[471,56,505,58],[472,6,506,8],[472,10,506,12],[472,14,506,16],[472,15,506,17,"opts"],[472,19,506,21],[472,20,506,22,"tryAllTransports"],[472,36,506,38],[472,40,507,12],[472,44,507,16],[472,45,507,17,"transports"],[472,55,507,27],[472,56,507,28,"length"],[472,62,507,34],[472,65,507,37],[472,66,507,38],[472,70,508,12],[472,74,508,16],[472,75,508,17,"readyState"],[472,85,508,27],[472,90,508,32],[472,99,508,41],[472,101,508,43],[473,8,509,12,"debug"],[473,13,509,17],[473,14,509,18],[473,37,509,41],[473,38,509,42],[474,8,510,12],[474,12,510,16],[474,13,510,17,"transports"],[474,23,510,27],[474,24,510,28,"shift"],[474,29,510,33],[474,30,510,34],[474,31,510,35],[475,8,511,12],[475,15,511,19],[475,19,511,23],[475,20,511,24,"_open"],[475,25,511,29],[475,26,511,30],[475,27,511,31],[476,6,512,8],[477,6,513,8],[477,10,513,12],[477,11,513,13,"emitReserved"],[477,23,513,25],[477,24,513,26],[477,31,513,33],[477,33,513,35,"err"],[477,36,513,38],[477,37,513,39],[478,6,514,8],[478,10,514,12],[478,11,514,13,"_onClose"],[478,19,514,21],[478,20,514,22],[478,37,514,39],[478,39,514,41,"err"],[478,42,514,44],[478,43,514,45],[479,4,515,4],[480,4,516,4],[481,0,517,0],[482,0,518,0],[483,0,519,0],[484,0,520,0],[485,4,521,4,"_onClose"],[485,12,521,12,"_onClose"],[485,13,521,13,"reason"],[485,19,521,19],[485,21,521,21,"description"],[485,32,521,32],[485,34,521,34],[486,6,522,8],[486,10,522,12],[486,19,522,21],[486,24,522,26],[486,28,522,30],[486,29,522,31,"readyState"],[486,39,522,41],[486,43,523,12],[486,49,523,18],[486,54,523,23],[486,58,523,27],[486,59,523,28,"readyState"],[486,69,523,38],[486,73,524,12],[486,82,524,21],[486,87,524,26],[486,91,524,30],[486,92,524,31,"readyState"],[486,102,524,41],[486,104,524,43],[487,8,525,12,"debug"],[487,13,525,17],[487,14,525,18],[487,46,525,50],[487,48,525,52,"reason"],[487,54,525,58],[487,55,525,59],[488,8,526,12],[489,8,527,12],[489,12,527,16],[489,13,527,17,"clearTimeoutFn"],[489,27,527,31],[489,28,527,32],[489,32,527,36],[489,33,527,37,"_pingTimeoutTimer"],[489,50,527,54],[489,51,527,55],[490,8,528,12],[491,8,529,12],[491,12,529,16],[491,13,529,17,"transport"],[491,22,529,26],[491,23,529,27,"removeAllListeners"],[491,41,529,45],[491,42,529,46],[491,49,529,53],[491,50,529,54],[492,8,530,12],[493,8,531,12],[493,12,531,16],[493,13,531,17,"transport"],[493,22,531,26],[493,23,531,27,"close"],[493,28,531,32],[493,29,531,33],[493,30,531,34],[494,8,532,12],[495,8,533,12],[495,12,533,16],[495,13,533,17,"transport"],[495,22,533,26],[495,23,533,27,"removeAllListeners"],[495,41,533,45],[495,42,533,46],[495,43,533,47],[496,8,534,12],[496,12,534,16,"withEventListeners"],[496,30,534,34],[496,32,534,36],[497,10,535,16],[497,14,535,20],[497,18,535,24],[497,19,535,25,"_beforeunloadEventListener"],[497,45,535,51],[497,47,535,53],[498,12,536,20,"removeEventListener"],[498,31,536,39],[498,32,536,40],[498,46,536,54],[498,48,536,56],[498,52,536,60],[498,53,536,61,"_beforeunloadEventListener"],[498,79,536,87],[498,81,536,89],[498,86,536,94],[498,87,536,95],[499,10,537,16],[500,10,538,16],[500,14,538,20],[500,18,538,24],[500,19,538,25,"_offlineEventListener"],[500,40,538,46],[500,42,538,48],[501,12,539,20],[501,18,539,26,"i"],[501,19,539,27],[501,22,539,30,"OFFLINE_EVENT_LISTENERS"],[501,45,539,53],[501,46,539,54,"indexOf"],[501,53,539,61],[501,54,539,62],[501,58,539,66],[501,59,539,67,"_offlineEventListener"],[501,80,539,88],[501,81,539,89],[502,12,540,20],[502,16,540,24,"i"],[502,17,540,25],[502,22,540,30],[502,23,540,31],[502,24,540,32],[502,26,540,34],[503,14,541,24,"debug"],[503,19,541,29],[503,20,541,30],[503,63,541,73],[503,64,541,74],[504,14,542,24,"OFFLINE_EVENT_LISTENERS"],[504,37,542,47],[504,38,542,48,"splice"],[504,44,542,54],[504,45,542,55,"i"],[504,46,542,56],[504,48,542,58],[504,49,542,59],[504,50,542,60],[505,12,543,20],[506,10,544,16],[507,8,545,12],[508,8,546,12],[509,8,547,12],[509,12,547,16],[509,13,547,17,"readyState"],[509,23,547,27],[509,26,547,30],[509,34,547,38],[510,8,548,12],[511,8,549,12],[511,12,549,16],[511,13,549,17,"id"],[511,15,549,19],[511,18,549,22],[511,22,549,26],[512,8,550,12],[513,8,551,12],[513,12,551,16],[513,13,551,17,"emitReserved"],[513,25,551,29],[513,26,551,30],[513,33,551,37],[513,35,551,39,"reason"],[513,41,551,45],[513,43,551,47,"description"],[513,54,551,58],[513,55,551,59],[514,8,552,12],[515,8,553,12],[516,8,554,12],[516,12,554,16],[516,13,554,17,"writeBuffer"],[516,24,554,28],[516,27,554,31],[516,29,554,33],[517,8,555,12],[517,12,555,16],[517,13,555,17,"_prevBufferLen"],[517,27,555,31],[517,30,555,34],[517,31,555,35],[518,6,556,8],[519,4,557,4],[520,2,558,0],[521,2,558,1,"exports"],[521,9,558,1],[521,10,558,1,"SocketWithoutUpgrade"],[521,30,558,1],[521,33,558,1,"SocketWithoutUpgrade"],[521,53,558,1],[522,2,559,0,"SocketWithoutUpgrade"],[522,22,559,20],[522,23,559,21,"protocol"],[522,31,559,29],[522,34,559,32,"protocol"],[522,50,559,40],[523,2,560,0],[524,0,561,0],[525,0,562,0],[526,0,563,0],[527,0,564,0],[528,0,565,0],[529,0,566,0],[530,0,567,0],[531,0,568,0],[532,0,569,0],[533,0,570,0],[534,0,571,0],[535,0,572,0],[536,0,573,0],[537,0,574,0],[538,0,575,0],[539,0,576,0],[540,0,577,0],[541,0,578,0],[542,0,579,0],[543,0,580,0],[544,0,581,0],[545,0,582,0],[546,2,583,7],[546,8,583,13,"SocketWithUpgrade"],[546,25,583,30],[546,34,583,39,"SocketWithoutUpgrade"],[546,54,583,59],[546,55,583,60],[547,4,584,4,"constructor"],[547,15,584,15,"constructor"],[547,16,584,15],[547,18,584,18],[548,6,585,8],[548,11,585,13],[548,12,585,14],[548,15,585,17,"arguments"],[548,24,585,26],[548,25,585,27],[549,6,586,8],[549,10,586,12],[549,11,586,13,"_upgrades"],[549,20,586,22],[549,23,586,25],[549,25,586,27],[550,4,587,4],[551,4,588,4,"onOpen"],[551,10,588,10,"onOpen"],[551,11,588,10],[551,13,588,13],[552,6,589,8],[552,11,589,13],[552,12,589,14,"onOpen"],[552,18,589,20],[552,19,589,21],[552,20,589,22],[553,6,590,8],[553,10,590,12],[553,16,590,18],[553,21,590,23],[553,25,590,27],[553,26,590,28,"readyState"],[553,36,590,38],[553,40,590,42],[553,44,590,46],[553,45,590,47,"opts"],[553,49,590,51],[553,50,590,52,"upgrade"],[553,57,590,59],[553,59,590,61],[554,8,591,12,"debug"],[554,13,591,17],[554,14,591,18],[554,39,591,43],[554,40,591,44],[555,8,592,12],[555,13,592,17],[555,17,592,21,"i"],[555,18,592,22],[555,21,592,25],[555,22,592,26],[555,24,592,28,"i"],[555,25,592,29],[555,28,592,32],[555,32,592,36],[555,33,592,37,"_upgrades"],[555,42,592,46],[555,43,592,47,"length"],[555,49,592,53],[555,51,592,55,"i"],[555,52,592,56],[555,54,592,58],[555,56,592,60],[556,10,593,16],[556,14,593,20],[556,15,593,21,"_probe"],[556,21,593,27],[556,22,593,28],[556,26,593,32],[556,27,593,33,"_upgrades"],[556,36,593,42],[556,37,593,43,"i"],[556,38,593,44],[556,39,593,45],[556,40,593,46],[557,8,594,12],[558,6,595,8],[559,4,596,4],[560,4,597,4],[561,0,598,0],[562,0,599,0],[563,0,600,0],[564,0,601,0],[565,0,602,0],[566,4,603,4,"_probe"],[566,10,603,10,"_probe"],[566,11,603,11,"name"],[566,15,603,15],[566,17,603,17],[567,6,604,8,"debug"],[567,11,604,13],[567,12,604,14],[567,36,604,38],[567,38,604,40,"name"],[567,42,604,44],[567,43,604,45],[568,6,605,8],[568,10,605,12,"transport"],[568,19,605,21],[568,22,605,24],[568,26,605,28],[568,27,605,29,"createTransport"],[568,42,605,44],[568,43,605,45,"name"],[568,47,605,49],[568,48,605,50],[569,6,606,8],[569,10,606,12,"failed"],[569,16,606,18],[569,19,606,21],[569,24,606,26],[570,6,607,8,"SocketWithoutUpgrade"],[570,26,607,28],[570,27,607,29,"priorWebsocketSuccess"],[570,48,607,50],[570,51,607,53],[570,56,607,58],[571,6,608,8],[571,12,608,14,"onTransportOpen"],[571,27,608,29],[571,30,608,32,"onTransportOpen"],[571,31,608,32],[571,36,608,38],[572,8,609,12],[572,12,609,16,"failed"],[572,18,609,22],[572,20,610,16],[573,8,611,12,"debug"],[573,13,611,17],[573,14,611,18],[573,43,611,47],[573,45,611,49,"name"],[573,49,611,53],[573,50,611,54],[574,8,612,12,"transport"],[574,17,612,21],[574,18,612,22,"send"],[574,22,612,26],[574,23,612,27],[574,24,612,28],[575,10,612,30,"type"],[575,14,612,34],[575,16,612,36],[575,22,612,42],[576,10,612,44,"data"],[576,14,612,48],[576,16,612,50],[577,8,612,58],[577,9,612,59],[577,10,612,60],[577,11,612,61],[578,8,613,12,"transport"],[578,17,613,21],[578,18,613,22,"once"],[578,22,613,26],[578,23,613,27],[578,31,613,35],[578,33,613,38,"msg"],[578,36,613,41],[578,40,613,46],[579,10,614,16],[579,14,614,20,"failed"],[579,20,614,26],[579,22,615,20],[580,10,616,16],[580,14,616,20],[580,20,616,26],[580,25,616,31,"msg"],[580,28,616,34],[580,29,616,35,"type"],[580,33,616,39],[580,37,616,43],[580,44,616,50],[580,49,616,55,"msg"],[580,52,616,58],[580,53,616,59,"data"],[580,57,616,63],[580,59,616,65],[581,12,617,20,"debug"],[581,17,617,25],[581,18,617,26],[581,45,617,53],[581,47,617,55,"name"],[581,51,617,59],[581,52,617,60],[582,12,618,20],[582,16,618,24],[582,17,618,25,"upgrading"],[582,26,618,34],[582,29,618,37],[582,33,618,41],[583,12,619,20],[583,16,619,24],[583,17,619,25,"emitReserved"],[583,29,619,37],[583,30,619,38],[583,41,619,49],[583,43,619,51,"transport"],[583,52,619,60],[583,53,619,61],[584,12,620,20],[584,16,620,24],[584,17,620,25,"transport"],[584,26,620,34],[584,28,621,24],[585,12,622,20,"SocketWithoutUpgrade"],[585,32,622,40],[585,33,622,41,"priorWebsocketSuccess"],[585,54,622,62],[585,57,623,24],[585,68,623,35],[585,73,623,40,"transport"],[585,82,623,49],[585,83,623,50,"name"],[585,87,623,54],[586,12,624,20,"debug"],[586,17,624,25],[586,18,624,26],[586,50,624,58],[586,52,624,60],[586,56,624,64],[586,57,624,65,"transport"],[586,66,624,74],[586,67,624,75,"name"],[586,71,624,79],[586,72,624,80],[587,12,625,20],[587,16,625,24],[587,17,625,25,"transport"],[587,26,625,34],[587,27,625,35,"pause"],[587,32,625,40],[587,33,625,41],[587,39,625,47],[588,14,626,24],[588,18,626,28,"failed"],[588,24,626,34],[588,26,627,28],[589,14,628,24],[589,18,628,28],[589,26,628,36],[589,31,628,41],[589,35,628,45],[589,36,628,46,"readyState"],[589,46,628,56],[589,48,629,28],[590,14,630,24,"debug"],[590,19,630,29],[590,20,630,30],[590,67,630,77],[590,68,630,78],[591,14,631,24,"cleanup"],[591,21,631,31],[591,22,631,32],[591,23,631,33],[592,14,632,24],[592,18,632,28],[592,19,632,29,"setTransport"],[592,31,632,41],[592,32,632,42,"transport"],[592,41,632,51],[592,42,632,52],[593,14,633,24,"transport"],[593,23,633,33],[593,24,633,34,"send"],[593,28,633,38],[593,29,633,39],[593,30,633,40],[594,16,633,42,"type"],[594,20,633,46],[594,22,633,48],[595,14,633,58],[595,15,633,59],[595,16,633,60],[595,17,633,61],[596,14,634,24],[596,18,634,28],[596,19,634,29,"emitReserved"],[596,31,634,41],[596,32,634,42],[596,41,634,51],[596,43,634,53,"transport"],[596,52,634,62],[596,53,634,63],[597,14,635,24,"transport"],[597,23,635,33],[597,26,635,36],[597,30,635,40],[598,14,636,24],[598,18,636,28],[598,19,636,29,"upgrading"],[598,28,636,38],[598,31,636,41],[598,36,636,46],[599,14,637,24],[599,18,637,28],[599,19,637,29,"flush"],[599,24,637,34],[599,25,637,35],[599,26,637,36],[600,12,638,20],[600,13,638,21],[600,14,638,22],[601,10,639,16],[601,11,639,17],[601,17,640,21],[602,12,641,20,"debug"],[602,17,641,25],[602,18,641,26],[602,47,641,55],[602,49,641,57,"name"],[602,53,641,61],[602,54,641,62],[603,12,642,20],[603,18,642,26,"err"],[603,21,642,29],[603,24,642,32],[603,28,642,36,"Error"],[603,33,642,41],[603,34,642,42],[603,47,642,55],[603,48,642,56],[604,12,643,20],[605,12,644,20,"err"],[605,15,644,23],[605,16,644,24,"transport"],[605,25,644,33],[605,28,644,36,"transport"],[605,37,644,45],[605,38,644,46,"name"],[605,42,644,50],[606,12,645,20],[606,16,645,24],[606,17,645,25,"emitReserved"],[606,29,645,37],[606,30,645,38],[606,44,645,52],[606,46,645,54,"err"],[606,49,645,57],[606,50,645,58],[607,10,646,16],[608,8,647,12],[608,9,647,13],[608,10,647,14],[609,6,648,8],[609,7,648,9],[610,6,649,8],[610,15,649,17,"freezeTransport"],[610,30,649,32,"freezeTransport"],[610,31,649,32],[610,33,649,35],[611,8,650,12],[611,12,650,16,"failed"],[611,18,650,22],[611,20,651,16],[612,8,652,12],[613,8,653,12,"failed"],[613,14,653,18],[613,17,653,21],[613,21,653,25],[614,8,654,12,"cleanup"],[614,15,654,19],[614,16,654,20],[614,17,654,21],[615,8,655,12,"transport"],[615,17,655,21],[615,18,655,22,"close"],[615,23,655,27],[615,24,655,28],[615,25,655,29],[616,8,656,12,"transport"],[616,17,656,21],[616,20,656,24],[616,24,656,28],[617,6,657,8],[618,6,658,8],[619,6,659,8],[619,12,659,14,"onerror"],[619,19,659,21],[619,22,659,25,"err"],[619,25,659,28],[619,29,659,33],[620,8,660,12],[620,14,660,18,"error"],[620,19,660,23],[620,22,660,26],[620,26,660,30,"Error"],[620,31,660,35],[620,32,660,36],[620,47,660,51],[620,50,660,54,"err"],[620,53,660,57],[620,54,660,58],[621,8,661,12],[622,8,662,12,"error"],[622,13,662,17],[622,14,662,18,"transport"],[622,23,662,27],[622,26,662,30,"transport"],[622,35,662,39],[622,36,662,40,"name"],[622,40,662,44],[623,8,663,12,"freezeTransport"],[623,23,663,27],[623,24,663,28],[623,25,663,29],[624,8,664,12,"debug"],[624,13,664,17],[624,14,664,18],[624,64,664,68],[624,66,664,70,"name"],[624,70,664,74],[624,72,664,76,"err"],[624,75,664,79],[624,76,664,80],[625,8,665,12],[625,12,665,16],[625,13,665,17,"emitReserved"],[625,25,665,29],[625,26,665,30],[625,40,665,44],[625,42,665,46,"error"],[625,47,665,51],[625,48,665,52],[626,6,666,8],[626,7,666,9],[627,6,667,8],[627,15,667,17,"onTransportClose"],[627,31,667,33,"onTransportClose"],[627,32,667,33],[627,34,667,36],[628,8,668,12,"onerror"],[628,15,668,19],[628,16,668,20],[628,34,668,38],[628,35,668,39],[629,6,669,8],[630,6,670,8],[631,6,671,8],[631,15,671,17,"onclose"],[631,22,671,24,"onclose"],[631,23,671,24],[631,25,671,27],[632,8,672,12,"onerror"],[632,15,672,19],[632,16,672,20],[632,31,672,35],[632,32,672,36],[633,6,673,8],[634,6,674,8],[635,6,675,8],[635,15,675,17,"onupgrade"],[635,24,675,26,"onupgrade"],[635,25,675,27,"to"],[635,27,675,29],[635,29,675,31],[636,8,676,12],[636,12,676,16,"transport"],[636,21,676,25],[636,25,676,29,"to"],[636,27,676,31],[636,28,676,32,"name"],[636,32,676,36],[636,37,676,41,"transport"],[636,46,676,50],[636,47,676,51,"name"],[636,51,676,55],[636,53,676,57],[637,10,677,16,"debug"],[637,15,677,21],[637,16,677,22],[637,44,677,50],[637,46,677,52,"to"],[637,48,677,54],[637,49,677,55,"name"],[637,53,677,59],[637,55,677,61,"transport"],[637,64,677,70],[637,65,677,71,"name"],[637,69,677,75],[637,70,677,76],[638,10,678,16,"freezeTransport"],[638,25,678,31],[638,26,678,32],[638,27,678,33],[639,8,679,12],[640,6,680,8],[641,6,681,8],[642,6,682,8],[642,12,682,14,"cleanup"],[642,19,682,21],[642,22,682,24,"cleanup"],[642,23,682,24],[642,28,682,30],[643,8,683,12,"transport"],[643,17,683,21],[643,18,683,22,"removeListener"],[643,32,683,36],[643,33,683,37],[643,39,683,43],[643,41,683,45,"onTransportOpen"],[643,56,683,60],[643,57,683,61],[644,8,684,12,"transport"],[644,17,684,21],[644,18,684,22,"removeListener"],[644,32,684,36],[644,33,684,37],[644,40,684,44],[644,42,684,46,"onerror"],[644,49,684,53],[644,50,684,54],[645,8,685,12,"transport"],[645,17,685,21],[645,18,685,22,"removeListener"],[645,32,685,36],[645,33,685,37],[645,40,685,44],[645,42,685,46,"onTransportClose"],[645,58,685,62],[645,59,685,63],[646,8,686,12],[646,12,686,16],[646,13,686,17,"off"],[646,16,686,20],[646,17,686,21],[646,24,686,28],[646,26,686,30,"onclose"],[646,33,686,37],[646,34,686,38],[647,8,687,12],[647,12,687,16],[647,13,687,17,"off"],[647,16,687,20],[647,17,687,21],[647,28,687,32],[647,30,687,34,"onupgrade"],[647,39,687,43],[647,40,687,44],[648,6,688,8],[648,7,688,9],[649,6,689,8,"transport"],[649,15,689,17],[649,16,689,18,"once"],[649,20,689,22],[649,21,689,23],[649,27,689,29],[649,29,689,31,"onTransportOpen"],[649,44,689,46],[649,45,689,47],[650,6,690,8,"transport"],[650,15,690,17],[650,16,690,18,"once"],[650,20,690,22],[650,21,690,23],[650,28,690,30],[650,30,690,32,"onerror"],[650,37,690,39],[650,38,690,40],[651,6,691,8,"transport"],[651,15,691,17],[651,16,691,18,"once"],[651,20,691,22],[651,21,691,23],[651,28,691,30],[651,30,691,32,"onTransportClose"],[651,46,691,48],[651,47,691,49],[652,6,692,8],[652,10,692,12],[652,11,692,13,"once"],[652,15,692,17],[652,16,692,18],[652,23,692,25],[652,25,692,27,"onclose"],[652,32,692,34],[652,33,692,35],[653,6,693,8],[653,10,693,12],[653,11,693,13,"once"],[653,15,693,17],[653,16,693,18],[653,27,693,29],[653,29,693,31,"onupgrade"],[653,38,693,40],[653,39,693,41],[654,6,694,8],[654,10,694,12],[654,14,694,16],[654,15,694,17,"_upgrades"],[654,24,694,26],[654,25,694,27,"indexOf"],[654,32,694,34],[654,33,694,35],[654,47,694,49],[654,48,694,50],[654,53,694,55],[654,54,694,56],[654,55,694,57],[654,59,695,12,"name"],[654,63,695,16],[654,68,695,21],[654,82,695,35],[654,84,695,37],[655,8,696,12],[656,8,697,12],[656,12,697,16],[656,13,697,17,"setTimeoutFn"],[656,25,697,29],[656,26,697,30],[656,32,697,36],[657,10,698,16],[657,14,698,20],[657,15,698,21,"failed"],[657,21,698,27],[657,23,698,29],[658,12,699,20,"transport"],[658,21,699,29],[658,22,699,30,"open"],[658,26,699,34],[658,27,699,35],[658,28,699,36],[659,10,700,16],[660,8,701,12],[660,9,701,13],[660,11,701,15],[660,14,701,18],[660,15,701,19],[661,6,702,8],[661,7,702,9],[661,13,703,13],[662,8,704,12,"transport"],[662,17,704,21],[662,18,704,22,"open"],[662,22,704,26],[662,23,704,27],[662,24,704,28],[663,6,705,8],[664,4,706,4],[665,4,707,4,"onHandshake"],[665,15,707,15,"onHandshake"],[665,16,707,16,"data"],[665,20,707,20],[665,22,707,22],[666,6,708,8],[666,10,708,12],[666,11,708,13,"_upgrades"],[666,20,708,22],[666,23,708,25],[666,27,708,29],[666,28,708,30,"_filterUpgrades"],[666,43,708,45],[666,44,708,46,"data"],[666,48,708,50],[666,49,708,51,"upgrades"],[666,57,708,59],[666,58,708,60],[667,6,709,8],[667,11,709,13],[667,12,709,14,"onHandshake"],[667,23,709,25],[667,24,709,26,"data"],[667,28,709,30],[667,29,709,31],[668,4,710,4],[669,4,711,4],[670,0,712,0],[671,0,713,0],[672,0,714,0],[673,0,715,0],[674,0,716,0],[675,4,717,4,"_filterUpgrades"],[675,19,717,19,"_filterUpgrades"],[675,20,717,20,"upgrades"],[675,28,717,28],[675,30,717,30],[676,6,718,8],[676,12,718,14,"filteredUpgrades"],[676,28,718,30],[676,31,718,33],[676,33,718,35],[677,6,719,8],[677,11,719,13],[677,15,719,17,"i"],[677,16,719,18],[677,19,719,21],[677,20,719,22],[677,22,719,24,"i"],[677,23,719,25],[677,26,719,28,"upgrades"],[677,34,719,36],[677,35,719,37,"length"],[677,41,719,43],[677,43,719,45,"i"],[677,44,719,46],[677,46,719,48],[677,48,719,50],[678,8,720,12],[678,12,720,16],[678,13,720,17],[678,17,720,21],[678,18,720,22,"transports"],[678,28,720,32],[678,29,720,33,"indexOf"],[678,36,720,40],[678,37,720,41,"upgrades"],[678,45,720,49],[678,46,720,50,"i"],[678,47,720,51],[678,48,720,52],[678,49,720,53],[678,51,721,16,"filteredUpgrades"],[678,67,721,32],[678,68,721,33,"push"],[678,72,721,37],[678,73,721,38,"upgrades"],[678,81,721,46],[678,82,721,47,"i"],[678,83,721,48],[678,84,721,49],[678,85,721,50],[679,6,722,8],[680,6,723,8],[680,13,723,15,"filteredUpgrades"],[680,29,723,31],[681,4,724,4],[682,2,725,0],[683,2,726,0],[684,0,727,0],[685,0,728,0],[686,0,729,0],[687,0,730,0],[688,0,731,0],[689,0,732,0],[690,0,733,0],[691,0,734,0],[692,0,735,0],[693,0,736,0],[694,0,737,0],[695,0,738,0],[696,0,739,0],[697,0,740,0],[698,0,741,0],[699,0,742,0],[700,0,743,0],[701,0,744,0],[702,2,726,0,"exports"],[702,9,726,0],[702,10,726,0,"SocketWithUpgrade"],[702,27,726,0],[702,30,726,0,"SocketWithUpgrade"],[702,47,726,0],[703,2,745,7],[703,8,745,13,"Socket"],[703,14,745,19],[703,23,745,28,"SocketWithUpgrade"],[703,40,745,45],[703,41,745,46],[704,4,746,4,"constructor"],[704,15,746,15,"constructor"],[704,16,746,16,"uri"],[704,19,746,19],[704,21,746,21,"opts"],[704,25,746,25],[704,28,746,28],[704,29,746,29],[704,30,746,30],[704,32,746,32],[705,6,747,8],[705,12,747,14,"o"],[705,13,747,15],[705,16,747,18],[705,23,747,25,"uri"],[705,26,747,28],[705,31,747,33],[705,39,747,41],[705,42,747,44,"uri"],[705,45,747,47],[705,48,747,50,"opts"],[705,52,747,54],[706,6,748,8],[706,10,748,12],[706,11,748,13,"o"],[706,12,748,14],[706,13,748,15,"transports"],[706,23,748,25],[706,27,749,13,"o"],[706,28,749,14],[706,29,749,15,"transports"],[706,39,749,25],[706,43,749,29],[706,50,749,36,"o"],[706,51,749,37],[706,52,749,38,"transports"],[706,62,749,48],[706,63,749,49],[706,64,749,50],[706,65,749,51],[706,70,749,56],[706,78,749,65],[706,80,749,67],[707,8,750,12,"o"],[707,9,750,13],[707,10,750,14,"transports"],[707,20,750,24],[707,23,750,27],[707,24,750,28,"o"],[707,25,750,29],[707,26,750,30,"transports"],[707,36,750,40],[707,40,750,44],[707,41,750,45],[707,50,750,54],[707,52,750,56],[707,63,750,67],[707,65,750,69],[707,79,750,83],[707,80,750,84],[707,82,751,17,"map"],[707,85,751,20],[707,86,751,22,"transportName"],[707,99,751,35],[707,103,751,40,"DEFAULT_TRANSPORTS"],[707,120,751,58],[707,121,751,59,"transportName"],[707,134,751,72],[707,135,751,73],[707,136,751,74],[707,137,752,17,"filter"],[707,143,752,23],[707,144,752,25,"t"],[707,145,752,26],[707,149,752,31],[707,150,752,32],[707,151,752,33,"t"],[707,152,752,34],[707,153,752,35],[708,6,753,8],[709,6,754,8],[709,11,754,13],[709,12,754,14,"uri"],[709,15,754,17],[709,17,754,19,"o"],[709,18,754,20],[709,19,754,21],[710,4,755,4],[711,2,756,0],[712,2,756,1,"exports"],[712,9,756,1],[712,10,756,1,"Socket"],[712,16,756,1],[712,19,756,1,"Socket"],[712,25,756,1],[713,0,756,1],[713,3]],"functionMap":{"names":["<global>","addEventListener$argument_1","OFFLINE_EVENT_LISTENERS.forEach$argument_0","SocketWithoutUpgrade","SocketWithoutUpgrade#constructor","opts.transports.forEach$argument_0","_beforeunloadEventListener","_offlineEventListener","SocketWithoutUpgrade#createTransport","SocketWithoutUpgrade#_open","setTimeoutFn$argument_0","SocketWithoutUpgrade#setTransport","transport.on.on.on.on$argument_1","SocketWithoutUpgrade#onOpen","SocketWithoutUpgrade#_onPacket","SocketWithoutUpgrade#onHandshake","SocketWithoutUpgrade#_resetPingTimeout","SocketWithoutUpgrade#_onDrain","SocketWithoutUpgrade#flush","SocketWithoutUpgrade#_getWritablePackets","SocketWithoutUpgrade#_hasPingExpired","nextTick$argument_0","SocketWithoutUpgrade#write","SocketWithoutUpgrade#send","SocketWithoutUpgrade#_sendPacket","SocketWithoutUpgrade#close","close","cleanupAndClose","waitForUpgrade","once$argument_1","SocketWithoutUpgrade#_onError","SocketWithoutUpgrade#_onClose","SocketWithUpgrade","SocketWithUpgrade#constructor","SocketWithUpgrade#onOpen","SocketWithUpgrade#_probe","onTransportOpen","transport.once$argument_1","transport.pause$argument_0","freezeTransport","onerror","onTransportClose","onclose","onupgrade","cleanup","SocketWithUpgrade#onHandshake","SocketWithUpgrade#_filterUpgrades","Socket","Socket#constructor","map$argument_0","map.filter$argument_0"],"mappings":"AAA;gCCe;wCCE,wBD;KDC;OGyB;ICO;gCCkD;SDI;kDE2B;iBFM;6CGK;iBHI;KDQ;IKQ;KLmB;IMM;8BCG;aDE;KNY;IQM;yBCa,oDD;KRC;IUM;KVO;IWM;KXiC;IYO;KZY;IaM;mDNI;SME;KbI;IcM;KdY;IeM;Kfa;IgBO;KhBqB;kBiBU;qBCO;aDE;KjBG;ImBS;KnBG;IoBS;KpBG;IqBU;KrBwB;IsBI;sBCC;SDI;gCEC;SFI;+BGC;SHI;mCII;iBJO;KtBU;I2BM;K3BY;I4BM;K5BoC;CHC;OgCyB;ICC;KDG;IEC;KFQ;IGO;gCCK;qCCK;yCCY;qBDa;aDS;SDC;QIC;SJQ;wBKE;SLO;QMC;SNE;QOE;SPE;QQE;SRK;wBSE;STM;8BzBS;ayBI;KHK;IaC;KbG;IcO;KdO;ChCC;O+CoB;ICC;qBCK,oDD;wBEC,UF;KDG;C/CC"}},"type":"js/module"}]}