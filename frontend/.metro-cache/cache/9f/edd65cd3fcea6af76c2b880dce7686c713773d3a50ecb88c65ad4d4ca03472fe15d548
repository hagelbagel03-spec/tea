{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"]}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":29,"index":76}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":77},"end":{"line":3,"column":56,"index":133}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":134},"end":{"line":4,"column":32,"index":166}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Socket = void 0;\n  var _socket = require(_dependencyMap[1], \"socket.io-parser\");\n  var _on = require(_dependencyMap[2], \"./on.js\");\n  var _componentEmitter = require(_dependencyMap[3], \"@socket.io/component-emitter\");\n  var _debug = _interopRequireDefault(require(_dependencyMap[4], \"debug\"));\n  // debug()\n  const debug = (0, _debug.default)(\"socket.io-client:socket\"); // debug()\n  /**\n   * Internal events.\n   * These events can't be emitted by the user.\n   */\n  const RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1\n  });\n  /**\n   * A Socket is the fundamental class for interacting with the server.\n   *\n   * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(\"connected\");\n   * });\n   *\n   * // send an event to the server\n   * socket.emit(\"foo\", \"bar\");\n   *\n   * socket.on(\"foobar\", () => {\n   *   // an event was received from the server\n   * });\n   *\n   * // upon disconnection\n   * socket.on(\"disconnect\", (reason) => {\n   *   console.log(`disconnected due to ${reason}`);\n   * });\n   */\n  class Socket extends _componentEmitter.Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n      super();\n      /**\n       * Whether the socket is currently connected to the server.\n       *\n       * @example\n       * const socket = io();\n       *\n       * socket.on(\"connect\", () => {\n       *   console.log(socket.connected); // true\n       * });\n       *\n       * socket.on(\"disconnect\", () => {\n       *   console.log(socket.connected); // false\n       * });\n       */\n      this.connected = false;\n      /**\n       * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n       * be transmitted by the server.\n       */\n      this.recovered = false;\n      /**\n       * Buffer for packets received before the CONNECT packet\n       */\n      this.receiveBuffer = [];\n      /**\n       * Buffer for packets that will be sent once the socket is connected\n       */\n      this.sendBuffer = [];\n      /**\n       * The queue of packets to be sent with retry in case of failure.\n       *\n       * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n       * @private\n       */\n      this._queue = [];\n      /**\n       * A sequence to generate the ID of the {@link QueuedPacket}.\n       * @private\n       */\n      this._queueSeq = 0;\n      this.ids = 0;\n      /**\n       * A map containing acknowledgement handlers.\n       *\n       * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n       *\n       * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n       * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n       * - `const value = await socket.emitWithAck(\"test\")`\n       *\n       * From those that don't:\n       *\n       * - `socket.emit(\"test\", (value) => { ... });`\n       *\n       * In the first case, the handlers will be called with an error when:\n       *\n       * - the timeout is reached\n       * - the socket gets disconnected\n       *\n       * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n       * an acknowledgement from the server.\n       *\n       * @private\n       */\n      this.acks = {};\n      this.flags = {};\n      this.io = io;\n      this.nsp = nsp;\n      if (opts && opts.auth) {\n        this.auth = opts.auth;\n      }\n      this._opts = Object.assign({}, opts);\n      if (this.io._autoConnect) this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n      if (this.subs) return;\n      const io = this.io;\n      this.subs = [(0, _on.on)(io, \"open\", this.onopen.bind(this)), (0, _on.on)(io, \"packet\", this.onpacket.bind(this)), (0, _on.on)(io, \"error\", this.onerror.bind(this)), (0, _on.on)(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n      var _a, _b, _c;\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n      }\n      args.unshift(ev);\n      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n        this._addToQueue(args);\n        return this;\n      }\n      const packet = {\n        type: _socket.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        const id = this.ids++;\n        debug(\"emitting packet with ack id %d\", id);\n        const ack = args.pop();\n        this._registerAckCallback(id, ack);\n        packet.id = id;\n      }\n      const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n      const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n      const discardPacket = this.flags.volatile && !isTransportWritable;\n      if (discardPacket) {\n        debug(\"discard packet as the transport is not currently writable\");\n      } else if (isConnected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n      var _a;\n      const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      }\n      // @ts-ignore\n      const timer = this.io.setTimeoutFn(() => {\n        delete this.acks[id];\n        for (let i = 0; i < this.sendBuffer.length; i++) {\n          if (this.sendBuffer[i].id === id) {\n            debug(\"removing packet with ack id %d from the buffer\", id);\n            this.sendBuffer.splice(i, 1);\n          }\n        }\n        debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n        ack.call(this, new Error(\"operation has timed out\"));\n      }, timeout);\n      const fn = (...args) => {\n        // @ts-ignore\n        this.io.clearTimeoutFn(timer);\n        ack.apply(this, args);\n      };\n      fn.withError = true;\n      this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n      return new Promise((resolve, reject) => {\n        const fn = (arg1, arg2) => {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        };\n        fn.withError = true;\n        args.push(fn);\n        this.emit(ev, ...args);\n      });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n      let ack;\n      if (typeof args[args.length - 1] === \"function\") {\n        ack = args.pop();\n      }\n      const packet = {\n        id: this._queueSeq++,\n        tryCount: 0,\n        pending: false,\n        args,\n        flags: Object.assign({\n          fromQueue: true\n        }, this.flags)\n      };\n      args.push((err, ...responseArgs) => {\n        if (packet !== this._queue[0]) {\n          // the packet has already been acknowledged\n          return;\n        }\n        const hasError = err !== null;\n        if (hasError) {\n          if (packet.tryCount > this._opts.retries) {\n            debug(\"packet [%d] is discarded after %d tries\", packet.id, packet.tryCount);\n            this._queue.shift();\n            if (ack) {\n              ack(err);\n            }\n          }\n        } else {\n          debug(\"packet [%d] was successfully sent\", packet.id);\n          this._queue.shift();\n          if (ack) {\n            ack(null, ...responseArgs);\n          }\n        }\n        packet.pending = false;\n        return this._drainQueue();\n      });\n      this._queue.push(packet);\n      this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n      debug(\"draining queue\");\n      if (!this.connected || this._queue.length === 0) {\n        return;\n      }\n      const packet = this._queue[0];\n      if (packet.pending && !force) {\n        debug(\"packet [%d] has already been sent and is waiting for an ack\", packet.id);\n        return;\n      }\n      packet.pending = true;\n      packet.tryCount++;\n      debug(\"sending packet [%d] (try n°%d)\", packet.id, packet.tryCount);\n      this.flags = packet.flags;\n      this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n      packet.nsp = this.nsp;\n      this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n      debug(\"transport is open - connecting\");\n      if (typeof this.auth == \"function\") {\n        this.auth(data => {\n          this._sendConnectPacket(data);\n        });\n      } else {\n        this._sendConnectPacket(this.auth);\n      }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n      this.packet({\n        type: _socket.PacketType.CONNECT,\n        data: this._pid ? Object.assign({\n          pid: this._pid,\n          offset: this._lastOffset\n        }, data) : data\n      });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n      debug(\"close (%s)\", reason);\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n      this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n      Object.keys(this.acks).forEach(id => {\n        const isBuffered = this.sendBuffer.some(packet => String(packet.id) === id);\n        if (!isBuffered) {\n          // note: handlers that do not accept an error as first argument are ignored here\n          const ack = this.acks[id];\n          delete this.acks[id];\n          if (ack.withError) {\n            ack.call(this, new Error(\"socket has been disconnected\"));\n          }\n        }\n      });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n      const sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case _socket.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            this.onconnect(packet.data.sid, packet.data.pid);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case _socket.PacketType.EVENT:\n        case _socket.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case _socket.PacketType.ACK:\n        case _socket.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case _socket.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case _socket.PacketType.CONNECT_ERROR:\n          this.destroy();\n          const err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n      const args = packet.data || [];\n      debug(\"emitting event %j\", args);\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n    emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        const listeners = this._anyListeners.slice();\n        for (const listener of listeners) {\n          listener.apply(this, args);\n        }\n      }\n      super.emit.apply(this, args);\n      if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n        this._lastOffset = args[args.length - 1];\n      }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n      const self = this;\n      let sent = false;\n      return function (...args) {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        debug(\"sending ack %j\", args);\n        self.packet({\n          type: _socket.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n      const ack = this.acks[packet.id];\n      if (typeof ack !== \"function\") {\n        debug(\"bad ack %s\", packet.id);\n        return;\n      }\n      delete this.acks[packet.id];\n      debug(\"calling ack %s with %j\", packet.id, packet.data);\n      // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n      if (ack.withError) {\n        packet.data.unshift(null);\n      }\n      // @ts-ignore\n      ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n      debug(\"socket connected with id %s\", id);\n      this.id = id;\n      this.recovered = pid && this._pid === pid;\n      this._pid = pid; // defined only if connection state recovery is enabled\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n      this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n      this.receiveBuffer.forEach(args => this.emitEvent(args));\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(packet => {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n      debug(\"server disconnect (%s)\", this.nsp);\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(subDestroy => subDestroy());\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n      if (this.connected) {\n        debug(\"performing disconnect (%s)\", this.nsp);\n        this.packet({\n          type: _socket.PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n      this.flags.compress = compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n      this.flags.timeout = timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        const listeners = this._anyListeners;\n        for (let i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n      if (listener) {\n        const listeners = this._anyOutgoingListeners;\n        for (let i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        const listeners = this._anyOutgoingListeners.slice();\n        for (const listener of listeners) {\n          listener.apply(this, packet.data);\n        }\n      }\n    }\n  }\n  exports.Socket = Socket;\n});","lineCount":897,"map":[[7,2,1,0],[7,6,1,0,"_socket"],[7,13,1,0],[7,16,1,0,"require"],[7,23,1,0],[7,24,1,0,"_dependencyMap"],[7,38,1,0],[8,2,2,0],[8,6,2,0,"_on"],[8,9,2,0],[8,12,2,0,"require"],[8,19,2,0],[8,20,2,0,"_dependencyMap"],[8,34,2,0],[9,2,3,0],[9,6,3,0,"_componentEmitter"],[9,23,3,0],[9,26,3,0,"require"],[9,33,3,0],[9,34,3,0,"_dependencyMap"],[9,48,3,0],[10,2,4,0],[10,6,4,0,"_debug"],[10,12,4,0],[10,15,4,0,"_interopRequireDefault"],[10,37,4,0],[10,38,4,0,"require"],[10,45,4,0],[10,46,4,0,"_dependencyMap"],[10,60,4,0],[11,2,4,33],[12,2,5,0],[12,8,5,6,"debug"],[12,13,5,11],[12,16,5,14],[12,20,5,14,"debugModule"],[12,34,5,25],[12,36,5,26],[12,61,5,51],[12,62,5,52],[12,63,5,53],[12,64,5,54],[13,2,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,2,10,0],[17,8,10,6,"RESERVED_EVENTS"],[17,23,10,21],[17,26,10,24,"Object"],[17,32,10,30],[17,33,10,31,"freeze"],[17,39,10,37],[17,40,10,38],[18,4,11,4,"connect"],[18,11,11,11],[18,13,11,13],[18,14,11,14],[19,4,12,4,"connect_error"],[19,17,12,17],[19,19,12,19],[19,20,12,20],[20,4,13,4,"disconnect"],[20,14,13,14],[20,16,13,16],[20,17,13,17],[21,4,14,4,"disconnecting"],[21,17,14,17],[21,19,14,19],[21,20,14,20],[22,4,15,4],[23,4,16,4,"newListener"],[23,15,16,15],[23,17,16,17],[23,18,16,18],[24,4,17,4,"removeListener"],[24,18,17,18],[24,20,17,20],[25,2,18,0],[25,3,18,1],[25,4,18,2],[26,2,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,2,43,7],[50,8,43,13,"Socket"],[50,14,43,19],[50,23,43,28,"Emitter"],[50,48,43,35],[50,49,43,36],[51,4,44,4],[52,0,45,0],[53,0,46,0],[54,4,47,4,"constructor"],[54,15,47,15,"constructor"],[54,16,47,16,"io"],[54,18,47,18],[54,20,47,20,"nsp"],[54,23,47,23],[54,25,47,25,"opts"],[54,29,47,29],[54,31,47,31],[55,6,48,8],[55,11,48,13],[55,12,48,14],[55,13,48,15],[56,6,49,8],[57,0,50,0],[58,0,51,0],[59,0,52,0],[60,0,53,0],[61,0,54,0],[62,0,55,0],[63,0,56,0],[64,0,57,0],[65,0,58,0],[66,0,59,0],[67,0,60,0],[68,0,61,0],[69,0,62,0],[70,6,63,8],[70,10,63,12],[70,11,63,13,"connected"],[70,20,63,22],[70,23,63,25],[70,28,63,30],[71,6,64,8],[72,0,65,0],[73,0,66,0],[74,0,67,0],[75,6,68,8],[75,10,68,12],[75,11,68,13,"recovered"],[75,20,68,22],[75,23,68,25],[75,28,68,30],[76,6,69,8],[77,0,70,0],[78,0,71,0],[79,6,72,8],[79,10,72,12],[79,11,72,13,"receiveBuffer"],[79,24,72,26],[79,27,72,29],[79,29,72,31],[80,6,73,8],[81,0,74,0],[82,0,75,0],[83,6,76,8],[83,10,76,12],[83,11,76,13,"sendBuffer"],[83,21,76,23],[83,24,76,26],[83,26,76,28],[84,6,77,8],[85,0,78,0],[86,0,79,0],[87,0,80,0],[88,0,81,0],[89,0,82,0],[90,6,83,8],[90,10,83,12],[90,11,83,13,"_queue"],[90,17,83,19],[90,20,83,22],[90,22,83,24],[91,6,84,8],[92,0,85,0],[93,0,86,0],[94,0,87,0],[95,6,88,8],[95,10,88,12],[95,11,88,13,"_queueSeq"],[95,20,88,22],[95,23,88,25],[95,24,88,26],[96,6,89,8],[96,10,89,12],[96,11,89,13,"ids"],[96,14,89,16],[96,17,89,19],[96,18,89,20],[97,6,90,8],[98,0,91,0],[99,0,92,0],[100,0,93,0],[101,0,94,0],[102,0,95,0],[103,0,96,0],[104,0,97,0],[105,0,98,0],[106,0,99,0],[107,0,100,0],[108,0,101,0],[109,0,102,0],[110,0,103,0],[111,0,104,0],[112,0,105,0],[113,0,106,0],[114,0,107,0],[115,0,108,0],[116,0,109,0],[117,0,110,0],[118,0,111,0],[119,0,112,0],[120,6,113,8],[120,10,113,12],[120,11,113,13,"acks"],[120,15,113,17],[120,18,113,20],[120,19,113,21],[120,20,113,22],[121,6,114,8],[121,10,114,12],[121,11,114,13,"flags"],[121,16,114,18],[121,19,114,21],[121,20,114,22],[121,21,114,23],[122,6,115,8],[122,10,115,12],[122,11,115,13,"io"],[122,13,115,15],[122,16,115,18,"io"],[122,18,115,20],[123,6,116,8],[123,10,116,12],[123,11,116,13,"nsp"],[123,14,116,16],[123,17,116,19,"nsp"],[123,20,116,22],[124,6,117,8],[124,10,117,12,"opts"],[124,14,117,16],[124,18,117,20,"opts"],[124,22,117,24],[124,23,117,25,"auth"],[124,27,117,29],[124,29,117,31],[125,8,118,12],[125,12,118,16],[125,13,118,17,"auth"],[125,17,118,21],[125,20,118,24,"opts"],[125,24,118,28],[125,25,118,29,"auth"],[125,29,118,33],[126,6,119,8],[127,6,120,8],[127,10,120,12],[127,11,120,13,"_opts"],[127,16,120,18],[127,19,120,21,"Object"],[127,25,120,27],[127,26,120,28,"assign"],[127,32,120,34],[127,33,120,35],[127,34,120,36],[127,35,120,37],[127,37,120,39,"opts"],[127,41,120,43],[127,42,120,44],[128,6,121,8],[128,10,121,12],[128,14,121,16],[128,15,121,17,"io"],[128,17,121,19],[128,18,121,20,"_autoConnect"],[128,30,121,32],[128,32,122,12],[128,36,122,16],[128,37,122,17,"open"],[128,41,122,21],[128,42,122,22],[128,43,122,23],[129,4,123,4],[130,4,124,4],[131,0,125,0],[132,0,126,0],[133,0,127,0],[134,0,128,0],[135,0,129,0],[136,0,130,0],[137,0,131,0],[138,0,132,0],[139,0,133,0],[140,0,134,0],[141,0,135,0],[142,0,136,0],[143,0,137,0],[144,4,138,4],[144,8,138,8,"disconnected"],[144,20,138,20,"disconnected"],[144,21,138,20],[144,23,138,23],[145,6,139,8],[145,13,139,15],[145,14,139,16],[145,18,139,20],[145,19,139,21,"connected"],[145,28,139,30],[146,4,140,4],[147,4,141,4],[148,0,142,0],[149,0,143,0],[150,0,144,0],[151,0,145,0],[152,4,146,4,"subEvents"],[152,13,146,13,"subEvents"],[152,14,146,13],[152,16,146,16],[153,6,147,8],[153,10,147,12],[153,14,147,16],[153,15,147,17,"subs"],[153,19,147,21],[153,21,148,12],[154,6,149,8],[154,12,149,14,"io"],[154,14,149,16],[154,17,149,19],[154,21,149,23],[154,22,149,24,"io"],[154,24,149,26],[155,6,150,8],[155,10,150,12],[155,11,150,13,"subs"],[155,15,150,17],[155,18,150,20],[155,19,151,12],[155,23,151,12,"on"],[155,29,151,14],[155,31,151,15,"io"],[155,33,151,17],[155,35,151,19],[155,41,151,25],[155,43,151,27],[155,47,151,31],[155,48,151,32,"onopen"],[155,54,151,38],[155,55,151,39,"bind"],[155,59,151,43],[155,60,151,44],[155,64,151,48],[155,65,151,49],[155,66,151,50],[155,68,152,12],[155,72,152,12,"on"],[155,78,152,14],[155,80,152,15,"io"],[155,82,152,17],[155,84,152,19],[155,92,152,27],[155,94,152,29],[155,98,152,33],[155,99,152,34,"onpacket"],[155,107,152,42],[155,108,152,43,"bind"],[155,112,152,47],[155,113,152,48],[155,117,152,52],[155,118,152,53],[155,119,152,54],[155,121,153,12],[155,125,153,12,"on"],[155,131,153,14],[155,133,153,15,"io"],[155,135,153,17],[155,137,153,19],[155,144,153,26],[155,146,153,28],[155,150,153,32],[155,151,153,33,"onerror"],[155,158,153,40],[155,159,153,41,"bind"],[155,163,153,45],[155,164,153,46],[155,168,153,50],[155,169,153,51],[155,170,153,52],[155,172,154,12],[155,176,154,12,"on"],[155,182,154,14],[155,184,154,15,"io"],[155,186,154,17],[155,188,154,19],[155,195,154,26],[155,197,154,28],[155,201,154,32],[155,202,154,33,"onclose"],[155,209,154,40],[155,210,154,41,"bind"],[155,214,154,45],[155,215,154,46],[155,219,154,50],[155,220,154,51],[155,221,154,52],[155,222,155,9],[156,4,156,4],[157,4,157,4],[158,0,158,0],[159,0,159,0],[160,0,160,0],[161,0,161,0],[162,0,162,0],[163,0,163,0],[164,0,164,0],[165,0,165,0],[166,0,166,0],[167,0,167,0],[168,0,168,0],[169,0,169,0],[170,0,170,0],[171,0,171,0],[172,0,172,0],[173,0,173,0],[174,4,174,4],[174,8,174,8,"active"],[174,14,174,14,"active"],[174,15,174,14],[174,17,174,17],[175,6,175,8],[175,13,175,15],[175,14,175,16],[175,15,175,17],[175,19,175,21],[175,20,175,22,"subs"],[175,24,175,26],[176,4,176,4],[177,4,177,4],[178,0,178,0],[179,0,179,0],[180,0,180,0],[181,0,181,0],[182,0,182,0],[183,0,183,0],[184,0,184,0],[185,0,185,0],[186,0,186,0],[187,4,187,4,"connect"],[187,11,187,11,"connect"],[187,12,187,11],[187,14,187,14],[188,6,188,8],[188,10,188,12],[188,14,188,16],[188,15,188,17,"connected"],[188,24,188,26],[188,26,189,12],[188,33,189,19],[188,37,189,23],[189,6,190,8],[189,10,190,12],[189,11,190,13,"subEvents"],[189,20,190,22],[189,21,190,23],[189,22,190,24],[190,6,191,8],[190,10,191,12],[190,11,191,13],[190,15,191,17],[190,16,191,18,"io"],[190,18,191,20],[190,19,191,21],[190,34,191,36],[190,35,191,37],[190,37,192,12],[190,41,192,16],[190,42,192,17,"io"],[190,44,192,19],[190,45,192,20,"open"],[190,49,192,24],[190,50,192,25],[190,51,192,26],[190,52,192,27],[190,53,192,28],[191,6,193,8],[191,10,193,12],[191,16,193,18],[191,21,193,23],[191,25,193,27],[191,26,193,28,"io"],[191,28,193,30],[191,29,193,31,"_readyState"],[191,40,193,42],[191,42,194,12],[191,46,194,16],[191,47,194,17,"onopen"],[191,53,194,23],[191,54,194,24],[191,55,194,25],[192,6,195,8],[192,13,195,15],[192,17,195,19],[193,4,196,4],[194,4,197,4],[195,0,198,0],[196,0,199,0],[197,4,200,4,"open"],[197,8,200,8,"open"],[197,9,200,8],[197,11,200,11],[198,6,201,8],[198,13,201,15],[198,17,201,19],[198,18,201,20,"connect"],[198,25,201,27],[198,26,201,28],[198,27,201,29],[199,4,202,4],[200,4,203,4],[201,0,204,0],[202,0,205,0],[203,0,206,0],[204,0,207,0],[205,0,208,0],[206,0,209,0],[207,0,210,0],[208,0,211,0],[209,0,212,0],[210,0,213,0],[211,0,214,0],[212,0,215,0],[213,0,216,0],[214,0,217,0],[215,4,218,4,"send"],[215,8,218,8,"send"],[215,9,218,9],[215,12,218,12,"args"],[215,16,218,16],[215,18,218,18],[216,6,219,8,"args"],[216,10,219,12],[216,11,219,13,"unshift"],[216,18,219,20],[216,19,219,21],[216,28,219,30],[216,29,219,31],[217,6,220,8],[217,10,220,12],[217,11,220,13,"emit"],[217,15,220,17],[217,16,220,18,"apply"],[217,21,220,23],[217,22,220,24],[217,26,220,28],[217,28,220,30,"args"],[217,32,220,34],[217,33,220,35],[218,6,221,8],[218,13,221,15],[218,17,221,19],[219,4,222,4],[220,4,223,4],[221,0,224,0],[222,0,225,0],[223,0,226,0],[224,0,227,0],[225,0,228,0],[226,0,229,0],[227,0,230,0],[228,0,231,0],[229,0,232,0],[230,0,233,0],[231,0,234,0],[232,0,235,0],[233,0,236,0],[234,0,237,0],[235,0,238,0],[236,0,239,0],[237,4,240,4,"emit"],[237,8,240,8,"emit"],[237,9,240,9,"ev"],[237,11,240,11],[237,13,240,13],[237,16,240,16,"args"],[237,20,240,20],[237,22,240,22],[238,6,241,8],[238,10,241,12,"_a"],[238,12,241,14],[238,14,241,16,"_b"],[238,16,241,18],[238,18,241,20,"_c"],[238,20,241,22],[239,6,242,8],[239,10,242,12,"RESERVED_EVENTS"],[239,25,242,27],[239,26,242,28,"hasOwnProperty"],[239,40,242,42],[239,41,242,43,"ev"],[239,43,242,45],[239,44,242,46],[239,46,242,48],[240,8,243,12],[240,14,243,18],[240,18,243,22,"Error"],[240,23,243,27],[240,24,243,28],[240,27,243,31],[240,30,243,34,"ev"],[240,32,243,36],[240,33,243,37,"toString"],[240,41,243,45],[240,42,243,46],[240,43,243,47],[240,46,243,50],[240,74,243,78],[240,75,243,79],[241,6,244,8],[242,6,245,8,"args"],[242,10,245,12],[242,11,245,13,"unshift"],[242,18,245,20],[242,19,245,21,"ev"],[242,21,245,23],[242,22,245,24],[243,6,246,8],[243,10,246,12],[243,14,246,16],[243,15,246,17,"_opts"],[243,20,246,22],[243,21,246,23,"retries"],[243,28,246,30],[243,32,246,34],[243,33,246,35],[243,37,246,39],[243,38,246,40,"flags"],[243,43,246,45],[243,44,246,46,"fromQueue"],[243,53,246,55],[243,57,246,59],[243,58,246,60],[243,62,246,64],[243,63,246,65,"flags"],[243,68,246,70],[243,69,246,71,"volatile"],[243,77,246,79],[243,79,246,81],[244,8,247,12],[244,12,247,16],[244,13,247,17,"_addToQueue"],[244,24,247,28],[244,25,247,29,"args"],[244,29,247,33],[244,30,247,34],[245,8,248,12],[245,15,248,19],[245,19,248,23],[246,6,249,8],[247,6,250,8],[247,12,250,14,"packet"],[247,18,250,20],[247,21,250,23],[248,8,251,12,"type"],[248,12,251,16],[248,14,251,18,"PacketType"],[248,32,251,28],[248,33,251,29,"EVENT"],[248,38,251,34],[249,8,252,12,"data"],[249,12,252,16],[249,14,252,18,"args"],[250,6,253,8],[250,7,253,9],[251,6,254,8,"packet"],[251,12,254,14],[251,13,254,15,"options"],[251,20,254,22],[251,23,254,25],[251,24,254,26],[251,25,254,27],[252,6,255,8,"packet"],[252,12,255,14],[252,13,255,15,"options"],[252,20,255,22],[252,21,255,23,"compress"],[252,29,255,31],[252,32,255,34],[252,36,255,38],[252,37,255,39,"flags"],[252,42,255,44],[252,43,255,45,"compress"],[252,51,255,53],[252,56,255,58],[252,61,255,63],[253,6,256,8],[254,6,257,8],[254,10,257,12],[254,20,257,22],[254,25,257,27],[254,32,257,34,"args"],[254,36,257,38],[254,37,257,39,"args"],[254,41,257,43],[254,42,257,44,"length"],[254,48,257,50],[254,51,257,53],[254,52,257,54],[254,53,257,55],[254,55,257,57],[255,8,258,12],[255,14,258,18,"id"],[255,16,258,20],[255,19,258,23],[255,23,258,27],[255,24,258,28,"ids"],[255,27,258,31],[255,29,258,33],[256,8,259,12,"debug"],[256,13,259,17],[256,14,259,18],[256,46,259,50],[256,48,259,52,"id"],[256,50,259,54],[256,51,259,55],[257,8,260,12],[257,14,260,18,"ack"],[257,17,260,21],[257,20,260,24,"args"],[257,24,260,28],[257,25,260,29,"pop"],[257,28,260,32],[257,29,260,33],[257,30,260,34],[258,8,261,12],[258,12,261,16],[258,13,261,17,"_registerAckCallback"],[258,33,261,37],[258,34,261,38,"id"],[258,36,261,40],[258,38,261,42,"ack"],[258,41,261,45],[258,42,261,46],[259,8,262,12,"packet"],[259,14,262,18],[259,15,262,19,"id"],[259,17,262,21],[259,20,262,24,"id"],[259,22,262,26],[260,6,263,8],[261,6,264,8],[261,12,264,14,"isTransportWritable"],[261,31,264,33],[261,34,264,36],[261,35,264,37,"_b"],[261,37,264,39],[261,40,264,42],[261,41,264,43,"_a"],[261,43,264,45],[261,46,264,48],[261,50,264,52],[261,51,264,53,"io"],[261,53,264,55],[261,54,264,56,"engine"],[261,60,264,62],[261,66,264,68],[261,70,264,72],[261,74,264,76,"_a"],[261,76,264,78],[261,81,264,83],[261,86,264,88],[261,87,264,89],[261,90,264,92],[261,95,264,97],[261,96,264,98],[261,99,264,101,"_a"],[261,101,264,103],[261,102,264,104,"transport"],[261,111,264,113],[261,117,264,119],[261,121,264,123],[261,125,264,127,"_b"],[261,127,264,129],[261,132,264,134],[261,137,264,139],[261,138,264,140],[261,141,264,143],[261,146,264,148],[261,147,264,149],[261,150,264,152,"_b"],[261,152,264,154],[261,153,264,155,"writable"],[261,161,264,163],[262,6,265,8],[262,12,265,14,"isConnected"],[262,23,265,25],[262,26,265,28],[262,30,265,32],[262,31,265,33,"connected"],[262,40,265,42],[262,44,265,46],[262,46,265,48],[262,47,265,49,"_c"],[262,49,265,51],[262,52,265,54],[262,56,265,58],[262,57,265,59,"io"],[262,59,265,61],[262,60,265,62,"engine"],[262,66,265,68],[262,72,265,74],[262,76,265,78],[262,80,265,82,"_c"],[262,82,265,84],[262,87,265,89],[262,92,265,94],[262,93,265,95],[262,96,265,98],[262,101,265,103],[262,102,265,104],[262,105,265,107,"_c"],[262,107,265,109],[262,108,265,110,"_hasPingExpired"],[262,123,265,125],[262,124,265,126],[262,125,265,127],[262,126,265,128],[263,6,266,8],[263,12,266,14,"discardPacket"],[263,25,266,27],[263,28,266,30],[263,32,266,34],[263,33,266,35,"flags"],[263,38,266,40],[263,39,266,41,"volatile"],[263,47,266,49],[263,51,266,53],[263,52,266,54,"isTransportWritable"],[263,71,266,73],[264,6,267,8],[264,10,267,12,"discardPacket"],[264,23,267,25],[264,25,267,27],[265,8,268,12,"debug"],[265,13,268,17],[265,14,268,18],[265,73,268,77],[265,74,268,78],[266,6,269,8],[266,7,269,9],[266,13,270,13],[266,17,270,17,"isConnected"],[266,28,270,28],[266,30,270,30],[267,8,271,12],[267,12,271,16],[267,13,271,17,"notifyOutgoingListeners"],[267,36,271,40],[267,37,271,41,"packet"],[267,43,271,47],[267,44,271,48],[268,8,272,12],[268,12,272,16],[268,13,272,17,"packet"],[268,19,272,23],[268,20,272,24,"packet"],[268,26,272,30],[268,27,272,31],[269,6,273,8],[269,7,273,9],[269,13,274,13],[270,8,275,12],[270,12,275,16],[270,13,275,17,"sendBuffer"],[270,23,275,27],[270,24,275,28,"push"],[270,28,275,32],[270,29,275,33,"packet"],[270,35,275,39],[270,36,275,40],[271,6,276,8],[272,6,277,8],[272,10,277,12],[272,11,277,13,"flags"],[272,16,277,18],[272,19,277,21],[272,20,277,22],[272,21,277,23],[273,6,278,8],[273,13,278,15],[273,17,278,19],[274,4,279,4],[275,4,280,4],[276,0,281,0],[277,0,282,0],[278,4,283,4,"_registerAckCallback"],[278,24,283,24,"_registerAckCallback"],[278,25,283,25,"id"],[278,27,283,27],[278,29,283,29,"ack"],[278,32,283,32],[278,34,283,34],[279,6,284,8],[279,10,284,12,"_a"],[279,12,284,14],[280,6,285,8],[280,12,285,14,"timeout"],[280,19,285,21],[280,22,285,24],[280,23,285,25,"_a"],[280,25,285,27],[280,28,285,30],[280,32,285,34],[280,33,285,35,"flags"],[280,38,285,40],[280,39,285,41,"timeout"],[280,46,285,48],[280,52,285,54],[280,56,285,58],[280,60,285,62,"_a"],[280,62,285,64],[280,67,285,69],[280,72,285,74],[280,73,285,75],[280,76,285,78,"_a"],[280,78,285,80],[280,81,285,83],[280,85,285,87],[280,86,285,88,"_opts"],[280,91,285,93],[280,92,285,94,"ackTimeout"],[280,102,285,104],[281,6,286,8],[281,10,286,12,"timeout"],[281,17,286,19],[281,22,286,24,"undefined"],[281,31,286,33],[281,33,286,35],[282,8,287,12],[282,12,287,16],[282,13,287,17,"acks"],[282,17,287,21],[282,18,287,22,"id"],[282,20,287,24],[282,21,287,25],[282,24,287,28,"ack"],[282,27,287,31],[283,8,288,12],[284,6,289,8],[285,6,290,8],[286,6,291,8],[286,12,291,14,"timer"],[286,17,291,19],[286,20,291,22],[286,24,291,26],[286,25,291,27,"io"],[286,27,291,29],[286,28,291,30,"setTimeoutFn"],[286,40,291,42],[286,41,291,43],[286,47,291,49],[287,8,292,12],[287,15,292,19],[287,19,292,23],[287,20,292,24,"acks"],[287,24,292,28],[287,25,292,29,"id"],[287,27,292,31],[287,28,292,32],[288,8,293,12],[288,13,293,17],[288,17,293,21,"i"],[288,18,293,22],[288,21,293,25],[288,22,293,26],[288,24,293,28,"i"],[288,25,293,29],[288,28,293,32],[288,32,293,36],[288,33,293,37,"sendBuffer"],[288,43,293,47],[288,44,293,48,"length"],[288,50,293,54],[288,52,293,56,"i"],[288,53,293,57],[288,55,293,59],[288,57,293,61],[289,10,294,16],[289,14,294,20],[289,18,294,24],[289,19,294,25,"sendBuffer"],[289,29,294,35],[289,30,294,36,"i"],[289,31,294,37],[289,32,294,38],[289,33,294,39,"id"],[289,35,294,41],[289,40,294,46,"id"],[289,42,294,48],[289,44,294,50],[290,12,295,20,"debug"],[290,17,295,25],[290,18,295,26],[290,66,295,74],[290,68,295,76,"id"],[290,70,295,78],[290,71,295,79],[291,12,296,20],[291,16,296,24],[291,17,296,25,"sendBuffer"],[291,27,296,35],[291,28,296,36,"splice"],[291,34,296,42],[291,35,296,43,"i"],[291,36,296,44],[291,38,296,46],[291,39,296,47],[291,40,296,48],[292,10,297,16],[293,8,298,12],[294,8,299,12,"debug"],[294,13,299,17],[294,14,299,18],[294,62,299,66],[294,64,299,68,"id"],[294,66,299,70],[294,68,299,72,"timeout"],[294,75,299,79],[294,76,299,80],[295,8,300,12,"ack"],[295,11,300,15],[295,12,300,16,"call"],[295,16,300,20],[295,17,300,21],[295,21,300,25],[295,23,300,27],[295,27,300,31,"Error"],[295,32,300,36],[295,33,300,37],[295,58,300,62],[295,59,300,63],[295,60,300,64],[296,6,301,8],[296,7,301,9],[296,9,301,11,"timeout"],[296,16,301,18],[296,17,301,19],[297,6,302,8],[297,12,302,14,"fn"],[297,14,302,16],[297,17,302,19,"fn"],[297,18,302,20],[297,21,302,23,"args"],[297,25,302,27],[297,30,302,32],[298,8,303,12],[299,8,304,12],[299,12,304,16],[299,13,304,17,"io"],[299,15,304,19],[299,16,304,20,"clearTimeoutFn"],[299,30,304,34],[299,31,304,35,"timer"],[299,36,304,40],[299,37,304,41],[300,8,305,12,"ack"],[300,11,305,15],[300,12,305,16,"apply"],[300,17,305,21],[300,18,305,22],[300,22,305,26],[300,24,305,28,"args"],[300,28,305,32],[300,29,305,33],[301,6,306,8],[301,7,306,9],[302,6,307,8,"fn"],[302,8,307,10],[302,9,307,11,"withError"],[302,18,307,20],[302,21,307,23],[302,25,307,27],[303,6,308,8],[303,10,308,12],[303,11,308,13,"acks"],[303,15,308,17],[303,16,308,18,"id"],[303,18,308,20],[303,19,308,21],[303,22,308,24,"fn"],[303,24,308,26],[304,4,309,4],[305,4,310,4],[306,0,311,0],[307,0,312,0],[308,0,313,0],[309,0,314,0],[310,0,315,0],[311,0,316,0],[312,0,317,0],[313,0,318,0],[314,0,319,0],[315,0,320,0],[316,0,321,0],[317,0,322,0],[318,0,323,0],[319,0,324,0],[320,0,325,0],[321,4,326,4,"emitWithAck"],[321,15,326,15,"emitWithAck"],[321,16,326,16,"ev"],[321,18,326,18],[321,20,326,20],[321,23,326,23,"args"],[321,27,326,27],[321,29,326,29],[322,6,327,8],[322,13,327,15],[322,17,327,19,"Promise"],[322,24,327,26],[322,25,327,27],[322,26,327,28,"resolve"],[322,33,327,35],[322,35,327,37,"reject"],[322,41,327,43],[322,46,327,48],[323,8,328,12],[323,14,328,18,"fn"],[323,16,328,20],[323,19,328,23,"fn"],[323,20,328,24,"arg1"],[323,24,328,28],[323,26,328,30,"arg2"],[323,30,328,34],[323,35,328,39],[324,10,329,16],[324,17,329,23,"arg1"],[324,21,329,27],[324,24,329,30,"reject"],[324,30,329,36],[324,31,329,37,"arg1"],[324,35,329,41],[324,36,329,42],[324,39,329,45,"resolve"],[324,46,329,52],[324,47,329,53,"arg2"],[324,51,329,57],[324,52,329,58],[325,8,330,12],[325,9,330,13],[326,8,331,12,"fn"],[326,10,331,14],[326,11,331,15,"withError"],[326,20,331,24],[326,23,331,27],[326,27,331,31],[327,8,332,12,"args"],[327,12,332,16],[327,13,332,17,"push"],[327,17,332,21],[327,18,332,22,"fn"],[327,20,332,24],[327,21,332,25],[328,8,333,12],[328,12,333,16],[328,13,333,17,"emit"],[328,17,333,21],[328,18,333,22,"ev"],[328,20,333,24],[328,22,333,26],[328,25,333,29,"args"],[328,29,333,33],[328,30,333,34],[329,6,334,8],[329,7,334,9],[329,8,334,10],[330,4,335,4],[331,4,336,4],[332,0,337,0],[333,0,338,0],[334,0,339,0],[335,0,340,0],[336,4,341,4,"_addToQueue"],[336,15,341,15,"_addToQueue"],[336,16,341,16,"args"],[336,20,341,20],[336,22,341,22],[337,6,342,8],[337,10,342,12,"ack"],[337,13,342,15],[338,6,343,8],[338,10,343,12],[338,17,343,19,"args"],[338,21,343,23],[338,22,343,24,"args"],[338,26,343,28],[338,27,343,29,"length"],[338,33,343,35],[338,36,343,38],[338,37,343,39],[338,38,343,40],[338,43,343,45],[338,53,343,55],[338,55,343,57],[339,8,344,12,"ack"],[339,11,344,15],[339,14,344,18,"args"],[339,18,344,22],[339,19,344,23,"pop"],[339,22,344,26],[339,23,344,27],[339,24,344,28],[340,6,345,8],[341,6,346,8],[341,12,346,14,"packet"],[341,18,346,20],[341,21,346,23],[342,8,347,12,"id"],[342,10,347,14],[342,12,347,16],[342,16,347,20],[342,17,347,21,"_queueSeq"],[342,26,347,30],[342,28,347,32],[343,8,348,12,"tryCount"],[343,16,348,20],[343,18,348,22],[343,19,348,23],[344,8,349,12,"pending"],[344,15,349,19],[344,17,349,21],[344,22,349,26],[345,8,350,12,"args"],[345,12,350,16],[346,8,351,12,"flags"],[346,13,351,17],[346,15,351,19,"Object"],[346,21,351,25],[346,22,351,26,"assign"],[346,28,351,32],[346,29,351,33],[347,10,351,35,"fromQueue"],[347,19,351,44],[347,21,351,46],[348,8,351,51],[348,9,351,52],[348,11,351,54],[348,15,351,58],[348,16,351,59,"flags"],[348,21,351,64],[349,6,352,8],[349,7,352,9],[350,6,353,8,"args"],[350,10,353,12],[350,11,353,13,"push"],[350,15,353,17],[350,16,353,18],[350,17,353,19,"err"],[350,20,353,22],[350,22,353,24],[350,25,353,27,"responseArgs"],[350,37,353,39],[350,42,353,44],[351,8,354,12],[351,12,354,16,"packet"],[351,18,354,22],[351,23,354,27],[351,27,354,31],[351,28,354,32,"_queue"],[351,34,354,38],[351,35,354,39],[351,36,354,40],[351,37,354,41],[351,39,354,43],[352,10,355,16],[353,10,356,16],[354,8,357,12],[355,8,358,12],[355,14,358,18,"hasError"],[355,22,358,26],[355,25,358,29,"err"],[355,28,358,32],[355,33,358,37],[355,37,358,41],[356,8,359,12],[356,12,359,16,"hasError"],[356,20,359,24],[356,22,359,26],[357,10,360,16],[357,14,360,20,"packet"],[357,20,360,26],[357,21,360,27,"tryCount"],[357,29,360,35],[357,32,360,38],[357,36,360,42],[357,37,360,43,"_opts"],[357,42,360,48],[357,43,360,49,"retries"],[357,50,360,56],[357,52,360,58],[358,12,361,20,"debug"],[358,17,361,25],[358,18,361,26],[358,59,361,67],[358,61,361,69,"packet"],[358,67,361,75],[358,68,361,76,"id"],[358,70,361,78],[358,72,361,80,"packet"],[358,78,361,86],[358,79,361,87,"tryCount"],[358,87,361,95],[358,88,361,96],[359,12,362,20],[359,16,362,24],[359,17,362,25,"_queue"],[359,23,362,31],[359,24,362,32,"shift"],[359,29,362,37],[359,30,362,38],[359,31,362,39],[360,12,363,20],[360,16,363,24,"ack"],[360,19,363,27],[360,21,363,29],[361,14,364,24,"ack"],[361,17,364,27],[361,18,364,28,"err"],[361,21,364,31],[361,22,364,32],[362,12,365,20],[363,10,366,16],[364,8,367,12],[364,9,367,13],[364,15,368,17],[365,10,369,16,"debug"],[365,15,369,21],[365,16,369,22],[365,51,369,57],[365,53,369,59,"packet"],[365,59,369,65],[365,60,369,66,"id"],[365,62,369,68],[365,63,369,69],[366,10,370,16],[366,14,370,20],[366,15,370,21,"_queue"],[366,21,370,27],[366,22,370,28,"shift"],[366,27,370,33],[366,28,370,34],[366,29,370,35],[367,10,371,16],[367,14,371,20,"ack"],[367,17,371,23],[367,19,371,25],[368,12,372,20,"ack"],[368,15,372,23],[368,16,372,24],[368,20,372,28],[368,22,372,30],[368,25,372,33,"responseArgs"],[368,37,372,45],[368,38,372,46],[369,10,373,16],[370,8,374,12],[371,8,375,12,"packet"],[371,14,375,18],[371,15,375,19,"pending"],[371,22,375,26],[371,25,375,29],[371,30,375,34],[372,8,376,12],[372,15,376,19],[372,19,376,23],[372,20,376,24,"_drainQueue"],[372,31,376,35],[372,32,376,36],[372,33,376,37],[373,6,377,8],[373,7,377,9],[373,8,377,10],[374,6,378,8],[374,10,378,12],[374,11,378,13,"_queue"],[374,17,378,19],[374,18,378,20,"push"],[374,22,378,24],[374,23,378,25,"packet"],[374,29,378,31],[374,30,378,32],[375,6,379,8],[375,10,379,12],[375,11,379,13,"_drainQueue"],[375,22,379,24],[375,23,379,25],[375,24,379,26],[376,4,380,4],[377,4,381,4],[378,0,382,0],[379,0,383,0],[380,0,384,0],[381,0,385,0],[382,0,386,0],[383,4,387,4,"_drainQueue"],[383,15,387,15,"_drainQueue"],[383,16,387,16,"force"],[383,21,387,21],[383,24,387,24],[383,29,387,29],[383,31,387,31],[384,6,388,8,"debug"],[384,11,388,13],[384,12,388,14],[384,28,388,30],[384,29,388,31],[385,6,389,8],[385,10,389,12],[385,11,389,13],[385,15,389,17],[385,16,389,18,"connected"],[385,25,389,27],[385,29,389,31],[385,33,389,35],[385,34,389,36,"_queue"],[385,40,389,42],[385,41,389,43,"length"],[385,47,389,49],[385,52,389,54],[385,53,389,55],[385,55,389,57],[386,8,390,12],[387,6,391,8],[388,6,392,8],[388,12,392,14,"packet"],[388,18,392,20],[388,21,392,23],[388,25,392,27],[388,26,392,28,"_queue"],[388,32,392,34],[388,33,392,35],[388,34,392,36],[388,35,392,37],[389,6,393,8],[389,10,393,12,"packet"],[389,16,393,18],[389,17,393,19,"pending"],[389,24,393,26],[389,28,393,30],[389,29,393,31,"force"],[389,34,393,36],[389,36,393,38],[390,8,394,12,"debug"],[390,13,394,17],[390,14,394,18],[390,75,394,79],[390,77,394,81,"packet"],[390,83,394,87],[390,84,394,88,"id"],[390,86,394,90],[390,87,394,91],[391,8,395,12],[392,6,396,8],[393,6,397,8,"packet"],[393,12,397,14],[393,13,397,15,"pending"],[393,20,397,22],[393,23,397,25],[393,27,397,29],[394,6,398,8,"packet"],[394,12,398,14],[394,13,398,15,"tryCount"],[394,21,398,23],[394,23,398,25],[395,6,399,8,"debug"],[395,11,399,13],[395,12,399,14],[395,44,399,46],[395,46,399,48,"packet"],[395,52,399,54],[395,53,399,55,"id"],[395,55,399,57],[395,57,399,59,"packet"],[395,63,399,65],[395,64,399,66,"tryCount"],[395,72,399,74],[395,73,399,75],[396,6,400,8],[396,10,400,12],[396,11,400,13,"flags"],[396,16,400,18],[396,19,400,21,"packet"],[396,25,400,27],[396,26,400,28,"flags"],[396,31,400,33],[397,6,401,8],[397,10,401,12],[397,11,401,13,"emit"],[397,15,401,17],[397,16,401,18,"apply"],[397,21,401,23],[397,22,401,24],[397,26,401,28],[397,28,401,30,"packet"],[397,34,401,36],[397,35,401,37,"args"],[397,39,401,41],[397,40,401,42],[398,4,402,4],[399,4,403,4],[400,0,404,0],[401,0,405,0],[402,0,406,0],[403,0,407,0],[404,0,408,0],[405,4,409,4,"packet"],[405,10,409,10,"packet"],[405,11,409,11,"packet"],[405,17,409,17],[405,19,409,19],[406,6,410,8,"packet"],[406,12,410,14],[406,13,410,15,"nsp"],[406,16,410,18],[406,19,410,21],[406,23,410,25],[406,24,410,26,"nsp"],[406,27,410,29],[407,6,411,8],[407,10,411,12],[407,11,411,13,"io"],[407,13,411,15],[407,14,411,16,"_packet"],[407,21,411,23],[407,22,411,24,"packet"],[407,28,411,30],[407,29,411,31],[408,4,412,4],[409,4,413,4],[410,0,414,0],[411,0,415,0],[412,0,416,0],[413,0,417,0],[414,4,418,4,"onopen"],[414,10,418,10,"onopen"],[414,11,418,10],[414,13,418,13],[415,6,419,8,"debug"],[415,11,419,13],[415,12,419,14],[415,44,419,46],[415,45,419,47],[416,6,420,8],[416,10,420,12],[416,17,420,19],[416,21,420,23],[416,22,420,24,"auth"],[416,26,420,28],[416,30,420,32],[416,40,420,42],[416,42,420,44],[417,8,421,12],[417,12,421,16],[417,13,421,17,"auth"],[417,17,421,21],[417,18,421,23,"data"],[417,22,421,27],[417,26,421,32],[418,10,422,16],[418,14,422,20],[418,15,422,21,"_sendConnectPacket"],[418,33,422,39],[418,34,422,40,"data"],[418,38,422,44],[418,39,422,45],[419,8,423,12],[419,9,423,13],[419,10,423,14],[420,6,424,8],[420,7,424,9],[420,13,425,13],[421,8,426,12],[421,12,426,16],[421,13,426,17,"_sendConnectPacket"],[421,31,426,35],[421,32,426,36],[421,36,426,40],[421,37,426,41,"auth"],[421,41,426,45],[421,42,426,46],[422,6,427,8],[423,4,428,4],[424,4,429,4],[425,0,430,0],[426,0,431,0],[427,0,432,0],[428,0,433,0],[429,0,434,0],[430,4,435,4,"_sendConnectPacket"],[430,22,435,22,"_sendConnectPacket"],[430,23,435,23,"data"],[430,27,435,27],[430,29,435,29],[431,6,436,8],[431,10,436,12],[431,11,436,13,"packet"],[431,17,436,19],[431,18,436,20],[432,8,437,12,"type"],[432,12,437,16],[432,14,437,18,"PacketType"],[432,32,437,28],[432,33,437,29,"CONNECT"],[432,40,437,36],[433,8,438,12,"data"],[433,12,438,16],[433,14,438,18],[433,18,438,22],[433,19,438,23,"_pid"],[433,23,438,27],[433,26,439,18,"Object"],[433,32,439,24],[433,33,439,25,"assign"],[433,39,439,31],[433,40,439,32],[434,10,439,34,"pid"],[434,13,439,37],[434,15,439,39],[434,19,439,43],[434,20,439,44,"_pid"],[434,24,439,48],[435,10,439,50,"offset"],[435,16,439,56],[435,18,439,58],[435,22,439,62],[435,23,439,63,"_lastOffset"],[436,8,439,75],[436,9,439,76],[436,11,439,78,"data"],[436,15,439,82],[436,16,439,83],[436,19,440,18,"data"],[437,6,441,8],[437,7,441,9],[437,8,441,10],[438,4,442,4],[439,4,443,4],[440,0,444,0],[441,0,445,0],[442,0,446,0],[443,0,447,0],[444,0,448,0],[445,4,449,4,"onerror"],[445,11,449,11,"onerror"],[445,12,449,12,"err"],[445,15,449,15],[445,17,449,17],[446,6,450,8],[446,10,450,12],[446,11,450,13],[446,15,450,17],[446,16,450,18,"connected"],[446,25,450,27],[446,27,450,29],[447,8,451,12],[447,12,451,16],[447,13,451,17,"emitReserved"],[447,25,451,29],[447,26,451,30],[447,41,451,45],[447,43,451,47,"err"],[447,46,451,50],[447,47,451,51],[448,6,452,8],[449,4,453,4],[450,4,454,4],[451,0,455,0],[452,0,456,0],[453,0,457,0],[454,0,458,0],[455,0,459,0],[456,0,460,0],[457,4,461,4,"onclose"],[457,11,461,11,"onclose"],[457,12,461,12,"reason"],[457,18,461,18],[457,20,461,20,"description"],[457,31,461,31],[457,33,461,33],[458,6,462,8,"debug"],[458,11,462,13],[458,12,462,14],[458,24,462,26],[458,26,462,28,"reason"],[458,32,462,34],[458,33,462,35],[459,6,463,8],[459,10,463,12],[459,11,463,13,"connected"],[459,20,463,22],[459,23,463,25],[459,28,463,30],[460,6,464,8],[460,13,464,15],[460,17,464,19],[460,18,464,20,"id"],[460,20,464,22],[461,6,465,8],[461,10,465,12],[461,11,465,13,"emitReserved"],[461,23,465,25],[461,24,465,26],[461,36,465,38],[461,38,465,40,"reason"],[461,44,465,46],[461,46,465,48,"description"],[461,57,465,59],[461,58,465,60],[462,6,466,8],[462,10,466,12],[462,11,466,13,"_clearAcks"],[462,21,466,23],[462,22,466,24],[462,23,466,25],[463,4,467,4],[464,4,468,4],[465,0,469,0],[466,0,470,0],[467,0,471,0],[468,0,472,0],[469,0,473,0],[470,4,474,4,"_clearAcks"],[470,14,474,14,"_clearAcks"],[470,15,474,14],[470,17,474,17],[471,6,475,8,"Object"],[471,12,475,14],[471,13,475,15,"keys"],[471,17,475,19],[471,18,475,20],[471,22,475,24],[471,23,475,25,"acks"],[471,27,475,29],[471,28,475,30],[471,29,475,31,"forEach"],[471,36,475,38],[471,37,475,40,"id"],[471,39,475,42],[471,43,475,47],[472,8,476,12],[472,14,476,18,"isBuffered"],[472,24,476,28],[472,27,476,31],[472,31,476,35],[472,32,476,36,"sendBuffer"],[472,42,476,46],[472,43,476,47,"some"],[472,47,476,51],[472,48,476,53,"packet"],[472,54,476,59],[472,58,476,64,"String"],[472,64,476,70],[472,65,476,71,"packet"],[472,71,476,77],[472,72,476,78,"id"],[472,74,476,80],[472,75,476,81],[472,80,476,86,"id"],[472,82,476,88],[472,83,476,89],[473,8,477,12],[473,12,477,16],[473,13,477,17,"isBuffered"],[473,23,477,27],[473,25,477,29],[474,10,478,16],[475,10,479,16],[475,16,479,22,"ack"],[475,19,479,25],[475,22,479,28],[475,26,479,32],[475,27,479,33,"acks"],[475,31,479,37],[475,32,479,38,"id"],[475,34,479,40],[475,35,479,41],[476,10,480,16],[476,17,480,23],[476,21,480,27],[476,22,480,28,"acks"],[476,26,480,32],[476,27,480,33,"id"],[476,29,480,35],[476,30,480,36],[477,10,481,16],[477,14,481,20,"ack"],[477,17,481,23],[477,18,481,24,"withError"],[477,27,481,33],[477,29,481,35],[478,12,482,20,"ack"],[478,15,482,23],[478,16,482,24,"call"],[478,20,482,28],[478,21,482,29],[478,25,482,33],[478,27,482,35],[478,31,482,39,"Error"],[478,36,482,44],[478,37,482,45],[478,67,482,75],[478,68,482,76],[478,69,482,77],[479,10,483,16],[480,8,484,12],[481,6,485,8],[481,7,485,9],[481,8,485,10],[482,4,486,4],[483,4,487,4],[484,0,488,0],[485,0,489,0],[486,0,490,0],[487,0,491,0],[488,0,492,0],[489,4,493,4,"onpacket"],[489,12,493,12,"onpacket"],[489,13,493,13,"packet"],[489,19,493,19],[489,21,493,21],[490,6,494,8],[490,12,494,14,"sameNamespace"],[490,25,494,27],[490,28,494,30,"packet"],[490,34,494,36],[490,35,494,37,"nsp"],[490,38,494,40],[490,43,494,45],[490,47,494,49],[490,48,494,50,"nsp"],[490,51,494,53],[491,6,495,8],[491,10,495,12],[491,11,495,13,"sameNamespace"],[491,24,495,26],[491,26,496,12],[492,6,497,8],[492,14,497,16,"packet"],[492,20,497,22],[492,21,497,23,"type"],[492,25,497,27],[493,8,498,12],[493,13,498,17,"PacketType"],[493,31,498,27],[493,32,498,28,"CONNECT"],[493,39,498,35],[494,10,499,16],[494,14,499,20,"packet"],[494,20,499,26],[494,21,499,27,"data"],[494,25,499,31],[494,29,499,35,"packet"],[494,35,499,41],[494,36,499,42,"data"],[494,40,499,46],[494,41,499,47,"sid"],[494,44,499,50],[494,46,499,52],[495,12,500,20],[495,16,500,24],[495,17,500,25,"onconnect"],[495,26,500,34],[495,27,500,35,"packet"],[495,33,500,41],[495,34,500,42,"data"],[495,38,500,46],[495,39,500,47,"sid"],[495,42,500,50],[495,44,500,52,"packet"],[495,50,500,58],[495,51,500,59,"data"],[495,55,500,63],[495,56,500,64,"pid"],[495,59,500,67],[495,60,500,68],[496,10,501,16],[496,11,501,17],[496,17,502,21],[497,12,503,20],[497,16,503,24],[497,17,503,25,"emitReserved"],[497,29,503,37],[497,30,503,38],[497,45,503,53],[497,47,503,55],[497,51,503,59,"Error"],[497,56,503,64],[497,57,503,65],[497,244,503,252],[497,245,503,253],[497,246,503,254],[498,10,504,16],[499,10,505,16],[500,8,506,12],[500,13,506,17,"PacketType"],[500,31,506,27],[500,32,506,28,"EVENT"],[500,37,506,33],[501,8,507,12],[501,13,507,17,"PacketType"],[501,31,507,27],[501,32,507,28,"BINARY_EVENT"],[501,44,507,40],[502,10,508,16],[502,14,508,20],[502,15,508,21,"onevent"],[502,22,508,28],[502,23,508,29,"packet"],[502,29,508,35],[502,30,508,36],[503,10,509,16],[504,8,510,12],[504,13,510,17,"PacketType"],[504,31,510,27],[504,32,510,28,"ACK"],[504,35,510,31],[505,8,511,12],[505,13,511,17,"PacketType"],[505,31,511,27],[505,32,511,28,"BINARY_ACK"],[505,42,511,38],[506,10,512,16],[506,14,512,20],[506,15,512,21,"onack"],[506,20,512,26],[506,21,512,27,"packet"],[506,27,512,33],[506,28,512,34],[507,10,513,16],[508,8,514,12],[508,13,514,17,"PacketType"],[508,31,514,27],[508,32,514,28,"DISCONNECT"],[508,42,514,38],[509,10,515,16],[509,14,515,20],[509,15,515,21,"ondisconnect"],[509,27,515,33],[509,28,515,34],[509,29,515,35],[510,10,516,16],[511,8,517,12],[511,13,517,17,"PacketType"],[511,31,517,27],[511,32,517,28,"CONNECT_ERROR"],[511,45,517,41],[512,10,518,16],[512,14,518,20],[512,15,518,21,"destroy"],[512,22,518,28],[512,23,518,29],[512,24,518,30],[513,10,519,16],[513,16,519,22,"err"],[513,19,519,25],[513,22,519,28],[513,26,519,32,"Error"],[513,31,519,37],[513,32,519,38,"packet"],[513,38,519,44],[513,39,519,45,"data"],[513,43,519,49],[513,44,519,50,"message"],[513,51,519,57],[513,52,519,58],[514,10,520,16],[515,10,521,16,"err"],[515,13,521,19],[515,14,521,20,"data"],[515,18,521,24],[515,21,521,27,"packet"],[515,27,521,33],[515,28,521,34,"data"],[515,32,521,38],[515,33,521,39,"data"],[515,37,521,43],[516,10,522,16],[516,14,522,20],[516,15,522,21,"emitReserved"],[516,27,522,33],[516,28,522,34],[516,43,522,49],[516,45,522,51,"err"],[516,48,522,54],[516,49,522,55],[517,10,523,16],[518,6,524,8],[519,4,525,4],[520,4,526,4],[521,0,527,0],[522,0,528,0],[523,0,529,0],[524,0,530,0],[525,0,531,0],[526,4,532,4,"onevent"],[526,11,532,11,"onevent"],[526,12,532,12,"packet"],[526,18,532,18],[526,20,532,20],[527,6,533,8],[527,12,533,14,"args"],[527,16,533,18],[527,19,533,21,"packet"],[527,25,533,27],[527,26,533,28,"data"],[527,30,533,32],[527,34,533,36],[527,36,533,38],[528,6,534,8,"debug"],[528,11,534,13],[528,12,534,14],[528,31,534,33],[528,33,534,35,"args"],[528,37,534,39],[528,38,534,40],[529,6,535,8],[529,10,535,12],[529,14,535,16],[529,18,535,20,"packet"],[529,24,535,26],[529,25,535,27,"id"],[529,27,535,29],[529,29,535,31],[530,8,536,12,"debug"],[530,13,536,17],[530,14,536,18],[530,47,536,51],[530,48,536,52],[531,8,537,12,"args"],[531,12,537,16],[531,13,537,17,"push"],[531,17,537,21],[531,18,537,22],[531,22,537,26],[531,23,537,27,"ack"],[531,26,537,30],[531,27,537,31,"packet"],[531,33,537,37],[531,34,537,38,"id"],[531,36,537,40],[531,37,537,41],[531,38,537,42],[532,6,538,8],[533,6,539,8],[533,10,539,12],[533,14,539,16],[533,15,539,17,"connected"],[533,24,539,26],[533,26,539,28],[534,8,540,12],[534,12,540,16],[534,13,540,17,"emitEvent"],[534,22,540,26],[534,23,540,27,"args"],[534,27,540,31],[534,28,540,32],[535,6,541,8],[535,7,541,9],[535,13,542,13],[536,8,543,12],[536,12,543,16],[536,13,543,17,"receiveBuffer"],[536,26,543,30],[536,27,543,31,"push"],[536,31,543,35],[536,32,543,36,"Object"],[536,38,543,42],[536,39,543,43,"freeze"],[536,45,543,49],[536,46,543,50,"args"],[536,50,543,54],[536,51,543,55],[536,52,543,56],[537,6,544,8],[538,4,545,4],[539,4,546,4,"emitEvent"],[539,13,546,13,"emitEvent"],[539,14,546,14,"args"],[539,18,546,18],[539,20,546,20],[540,6,547,8],[540,10,547,12],[540,14,547,16],[540,15,547,17,"_anyListeners"],[540,28,547,30],[540,32,547,34],[540,36,547,38],[540,37,547,39,"_anyListeners"],[540,50,547,52],[540,51,547,53,"length"],[540,57,547,59],[540,59,547,61],[541,8,548,12],[541,14,548,18,"listeners"],[541,23,548,27],[541,26,548,30],[541,30,548,34],[541,31,548,35,"_anyListeners"],[541,44,548,48],[541,45,548,49,"slice"],[541,50,548,54],[541,51,548,55],[541,52,548,56],[542,8,549,12],[542,13,549,17],[542,19,549,23,"listener"],[542,27,549,31],[542,31,549,35,"listeners"],[542,40,549,44],[542,42,549,46],[543,10,550,16,"listener"],[543,18,550,24],[543,19,550,25,"apply"],[543,24,550,30],[543,25,550,31],[543,29,550,35],[543,31,550,37,"args"],[543,35,550,41],[543,36,550,42],[544,8,551,12],[545,6,552,8],[546,6,553,8],[546,11,553,13],[546,12,553,14,"emit"],[546,16,553,18],[546,17,553,19,"apply"],[546,22,553,24],[546,23,553,25],[546,27,553,29],[546,29,553,31,"args"],[546,33,553,35],[546,34,553,36],[547,6,554,8],[547,10,554,12],[547,14,554,16],[547,15,554,17,"_pid"],[547,19,554,21],[547,23,554,25,"args"],[547,27,554,29],[547,28,554,30,"length"],[547,34,554,36],[547,38,554,40],[547,45,554,47,"args"],[547,49,554,51],[547,50,554,52,"args"],[547,54,554,56],[547,55,554,57,"length"],[547,61,554,63],[547,64,554,66],[547,65,554,67],[547,66,554,68],[547,71,554,73],[547,79,554,81],[547,81,554,83],[548,8,555,12],[548,12,555,16],[548,13,555,17,"_lastOffset"],[548,24,555,28],[548,27,555,31,"args"],[548,31,555,35],[548,32,555,36,"args"],[548,36,555,40],[548,37,555,41,"length"],[548,43,555,47],[548,46,555,50],[548,47,555,51],[548,48,555,52],[549,6,556,8],[550,4,557,4],[551,4,558,4],[552,0,559,0],[553,0,560,0],[554,0,561,0],[555,0,562,0],[556,4,563,4,"ack"],[556,7,563,7,"ack"],[556,8,563,8,"id"],[556,10,563,10],[556,12,563,12],[557,6,564,8],[557,12,564,14,"self"],[557,16,564,18],[557,19,564,21],[557,23,564,25],[558,6,565,8],[558,10,565,12,"sent"],[558,14,565,16],[558,17,565,19],[558,22,565,24],[559,6,566,8],[559,13,566,15],[559,23,566,25],[559,26,566,28,"args"],[559,30,566,32],[559,32,566,34],[560,8,567,12],[561,8,568,12],[561,12,568,16,"sent"],[561,16,568,20],[561,18,569,16],[562,8,570,12,"sent"],[562,12,570,16],[562,15,570,19],[562,19,570,23],[563,8,571,12,"debug"],[563,13,571,17],[563,14,571,18],[563,30,571,34],[563,32,571,36,"args"],[563,36,571,40],[563,37,571,41],[564,8,572,12,"self"],[564,12,572,16],[564,13,572,17,"packet"],[564,19,572,23],[564,20,572,24],[565,10,573,16,"type"],[565,14,573,20],[565,16,573,22,"PacketType"],[565,34,573,32],[565,35,573,33,"ACK"],[565,38,573,36],[566,10,574,16,"id"],[566,12,574,18],[566,14,574,20,"id"],[566,16,574,22],[567,10,575,16,"data"],[567,14,575,20],[567,16,575,22,"args"],[568,8,576,12],[568,9,576,13],[568,10,576,14],[569,6,577,8],[569,7,577,9],[570,4,578,4],[571,4,579,4],[572,0,580,0],[573,0,581,0],[574,0,582,0],[575,0,583,0],[576,0,584,0],[577,4,585,4,"onack"],[577,9,585,9,"onack"],[577,10,585,10,"packet"],[577,16,585,16],[577,18,585,18],[578,6,586,8],[578,12,586,14,"ack"],[578,15,586,17],[578,18,586,20],[578,22,586,24],[578,23,586,25,"acks"],[578,27,586,29],[578,28,586,30,"packet"],[578,34,586,36],[578,35,586,37,"id"],[578,37,586,39],[578,38,586,40],[579,6,587,8],[579,10,587,12],[579,17,587,19,"ack"],[579,20,587,22],[579,25,587,27],[579,35,587,37],[579,37,587,39],[580,8,588,12,"debug"],[580,13,588,17],[580,14,588,18],[580,26,588,30],[580,28,588,32,"packet"],[580,34,588,38],[580,35,588,39,"id"],[580,37,588,41],[580,38,588,42],[581,8,589,12],[582,6,590,8],[583,6,591,8],[583,13,591,15],[583,17,591,19],[583,18,591,20,"acks"],[583,22,591,24],[583,23,591,25,"packet"],[583,29,591,31],[583,30,591,32,"id"],[583,32,591,34],[583,33,591,35],[584,6,592,8,"debug"],[584,11,592,13],[584,12,592,14],[584,36,592,38],[584,38,592,40,"packet"],[584,44,592,46],[584,45,592,47,"id"],[584,47,592,49],[584,49,592,51,"packet"],[584,55,592,57],[584,56,592,58,"data"],[584,60,592,62],[584,61,592,63],[585,6,593,8],[586,6,594,8],[586,10,594,12,"ack"],[586,13,594,15],[586,14,594,16,"withError"],[586,23,594,25],[586,25,594,27],[587,8,595,12,"packet"],[587,14,595,18],[587,15,595,19,"data"],[587,19,595,23],[587,20,595,24,"unshift"],[587,27,595,31],[587,28,595,32],[587,32,595,36],[587,33,595,37],[588,6,596,8],[589,6,597,8],[590,6,598,8,"ack"],[590,9,598,11],[590,10,598,12,"apply"],[590,15,598,17],[590,16,598,18],[590,20,598,22],[590,22,598,24,"packet"],[590,28,598,30],[590,29,598,31,"data"],[590,33,598,35],[590,34,598,36],[591,4,599,4],[592,4,600,4],[593,0,601,0],[594,0,602,0],[595,0,603,0],[596,0,604,0],[597,4,605,4,"onconnect"],[597,13,605,13,"onconnect"],[597,14,605,14,"id"],[597,16,605,16],[597,18,605,18,"pid"],[597,21,605,21],[597,23,605,23],[598,6,606,8,"debug"],[598,11,606,13],[598,12,606,14],[598,41,606,43],[598,43,606,45,"id"],[598,45,606,47],[598,46,606,48],[599,6,607,8],[599,10,607,12],[599,11,607,13,"id"],[599,13,607,15],[599,16,607,18,"id"],[599,18,607,20],[600,6,608,8],[600,10,608,12],[600,11,608,13,"recovered"],[600,20,608,22],[600,23,608,25,"pid"],[600,26,608,28],[600,30,608,32],[600,34,608,36],[600,35,608,37,"_pid"],[600,39,608,41],[600,44,608,46,"pid"],[600,47,608,49],[601,6,609,8],[601,10,609,12],[601,11,609,13,"_pid"],[601,15,609,17],[601,18,609,20,"pid"],[601,21,609,23],[601,22,609,24],[601,23,609,25],[602,6,610,8],[602,10,610,12],[602,11,610,13,"connected"],[602,20,610,22],[602,23,610,25],[602,27,610,29],[603,6,611,8],[603,10,611,12],[603,11,611,13,"emitBuffered"],[603,23,611,25],[603,24,611,26],[603,25,611,27],[604,6,612,8],[604,10,612,12],[604,11,612,13,"emitReserved"],[604,23,612,25],[604,24,612,26],[604,33,612,35],[604,34,612,36],[605,6,613,8],[605,10,613,12],[605,11,613,13,"_drainQueue"],[605,22,613,24],[605,23,613,25],[605,27,613,29],[605,28,613,30],[606,4,614,4],[607,4,615,4],[608,0,616,0],[609,0,617,0],[610,0,618,0],[611,0,619,0],[612,4,620,4,"emitBuffered"],[612,16,620,16,"emitBuffered"],[612,17,620,16],[612,19,620,19],[613,6,621,8],[613,10,621,12],[613,11,621,13,"receiveBuffer"],[613,24,621,26],[613,25,621,27,"forEach"],[613,32,621,34],[613,33,621,36,"args"],[613,37,621,40],[613,41,621,45],[613,45,621,49],[613,46,621,50,"emitEvent"],[613,55,621,59],[613,56,621,60,"args"],[613,60,621,64],[613,61,621,65],[613,62,621,66],[614,6,622,8],[614,10,622,12],[614,11,622,13,"receiveBuffer"],[614,24,622,26],[614,27,622,29],[614,29,622,31],[615,6,623,8],[615,10,623,12],[615,11,623,13,"sendBuffer"],[615,21,623,23],[615,22,623,24,"forEach"],[615,29,623,31],[615,30,623,33,"packet"],[615,36,623,39],[615,40,623,44],[616,8,624,12],[616,12,624,16],[616,13,624,17,"notifyOutgoingListeners"],[616,36,624,40],[616,37,624,41,"packet"],[616,43,624,47],[616,44,624,48],[617,8,625,12],[617,12,625,16],[617,13,625,17,"packet"],[617,19,625,23],[617,20,625,24,"packet"],[617,26,625,30],[617,27,625,31],[618,6,626,8],[618,7,626,9],[618,8,626,10],[619,6,627,8],[619,10,627,12],[619,11,627,13,"sendBuffer"],[619,21,627,23],[619,24,627,26],[619,26,627,28],[620,4,628,4],[621,4,629,4],[622,0,630,0],[623,0,631,0],[624,0,632,0],[625,0,633,0],[626,4,634,4,"ondisconnect"],[626,16,634,16,"ondisconnect"],[626,17,634,16],[626,19,634,19],[627,6,635,8,"debug"],[627,11,635,13],[627,12,635,14],[627,36,635,38],[627,38,635,40],[627,42,635,44],[627,43,635,45,"nsp"],[627,46,635,48],[627,47,635,49],[628,6,636,8],[628,10,636,12],[628,11,636,13,"destroy"],[628,18,636,20],[628,19,636,21],[628,20,636,22],[629,6,637,8],[629,10,637,12],[629,11,637,13,"onclose"],[629,18,637,20],[629,19,637,21],[629,41,637,43],[629,42,637,44],[630,4,638,4],[631,4,639,4],[632,0,640,0],[633,0,641,0],[634,0,642,0],[635,0,643,0],[636,0,644,0],[637,0,645,0],[638,4,646,4,"destroy"],[638,11,646,11,"destroy"],[638,12,646,11],[638,14,646,14],[639,6,647,8],[639,10,647,12],[639,14,647,16],[639,15,647,17,"subs"],[639,19,647,21],[639,21,647,23],[640,8,648,12],[641,8,649,12],[641,12,649,16],[641,13,649,17,"subs"],[641,17,649,21],[641,18,649,22,"forEach"],[641,25,649,29],[641,26,649,31,"subDestroy"],[641,36,649,41],[641,40,649,46,"subDestroy"],[641,50,649,56],[641,51,649,57],[641,52,649,58],[641,53,649,59],[642,8,650,12],[642,12,650,16],[642,13,650,17,"subs"],[642,17,650,21],[642,20,650,24,"undefined"],[642,29,650,33],[643,6,651,8],[644,6,652,8],[644,10,652,12],[644,11,652,13,"io"],[644,13,652,15],[644,14,652,16],[644,24,652,26],[644,25,652,27],[644,26,652,28],[644,30,652,32],[644,31,652,33],[645,4,653,4],[646,4,654,4],[647,0,655,0],[648,0,656,0],[649,0,657,0],[650,0,658,0],[651,0,659,0],[652,0,660,0],[653,0,661,0],[654,0,662,0],[655,0,663,0],[656,0,664,0],[657,0,665,0],[658,0,666,0],[659,0,667,0],[660,0,668,0],[661,0,669,0],[662,4,670,4,"disconnect"],[662,14,670,14,"disconnect"],[662,15,670,14],[662,17,670,17],[663,6,671,8],[663,10,671,12],[663,14,671,16],[663,15,671,17,"connected"],[663,24,671,26],[663,26,671,28],[664,8,672,12,"debug"],[664,13,672,17],[664,14,672,18],[664,42,672,46],[664,44,672,48],[664,48,672,52],[664,49,672,53,"nsp"],[664,52,672,56],[664,53,672,57],[665,8,673,12],[665,12,673,16],[665,13,673,17,"packet"],[665,19,673,23],[665,20,673,24],[666,10,673,26,"type"],[666,14,673,30],[666,16,673,32,"PacketType"],[666,34,673,42],[666,35,673,43,"DISCONNECT"],[667,8,673,54],[667,9,673,55],[667,10,673,56],[668,6,674,8],[669,6,675,8],[670,6,676,8],[670,10,676,12],[670,11,676,13,"destroy"],[670,18,676,20],[670,19,676,21],[670,20,676,22],[671,6,677,8],[671,10,677,12],[671,14,677,16],[671,15,677,17,"connected"],[671,24,677,26],[671,26,677,28],[672,8,678,12],[673,8,679,12],[673,12,679,16],[673,13,679,17,"onclose"],[673,20,679,24],[673,21,679,25],[673,43,679,47],[673,44,679,48],[674,6,680,8],[675,6,681,8],[675,13,681,15],[675,17,681,19],[676,4,682,4],[677,4,683,4],[678,0,684,0],[679,0,685,0],[680,0,686,0],[681,0,687,0],[682,4,688,4,"close"],[682,9,688,9,"close"],[682,10,688,9],[682,12,688,12],[683,6,689,8],[683,13,689,15],[683,17,689,19],[683,18,689,20,"disconnect"],[683,28,689,30],[683,29,689,31],[683,30,689,32],[684,4,690,4],[685,4,691,4],[686,0,692,0],[687,0,693,0],[688,0,694,0],[689,0,695,0],[690,0,696,0],[691,0,697,0],[692,0,698,0],[693,0,699,0],[694,4,700,4,"compress"],[694,12,700,12,"compress"],[694,13,700,13,"compress"],[694,21,700,21],[694,23,700,23],[695,6,701,8],[695,10,701,12],[695,11,701,13,"flags"],[695,16,701,18],[695,17,701,19,"compress"],[695,25,701,27],[695,28,701,30,"compress"],[695,36,701,38],[696,6,702,8],[696,13,702,15],[696,17,702,19],[697,4,703,4],[698,4,704,4],[699,0,705,0],[700,0,706,0],[701,0,707,0],[702,0,708,0],[703,0,709,0],[704,0,710,0],[705,0,711,0],[706,0,712,0],[707,4,713,4],[707,8,713,8,"volatile"],[707,16,713,16,"volatile"],[707,17,713,16],[707,19,713,19],[708,6,714,8],[708,10,714,12],[708,11,714,13,"flags"],[708,16,714,18],[708,17,714,19,"volatile"],[708,25,714,27],[708,28,714,30],[708,32,714,34],[709,6,715,8],[709,13,715,15],[709,17,715,19],[710,4,716,4],[711,4,717,4],[712,0,718,0],[713,0,719,0],[714,0,720,0],[715,0,721,0],[716,0,722,0],[717,0,723,0],[718,0,724,0],[719,0,725,0],[720,0,726,0],[721,0,727,0],[722,0,728,0],[723,0,729,0],[724,4,730,4,"timeout"],[724,11,730,11,"timeout"],[724,12,730,12,"timeout"],[724,19,730,19],[724,21,730,21],[725,6,731,8],[725,10,731,12],[725,11,731,13,"flags"],[725,16,731,18],[725,17,731,19,"timeout"],[725,24,731,26],[725,27,731,29,"timeout"],[725,34,731,36],[726,6,732,8],[726,13,732,15],[726,17,732,19],[727,4,733,4],[728,4,734,4],[729,0,735,0],[730,0,736,0],[731,0,737,0],[732,0,738,0],[733,0,739,0],[734,0,740,0],[735,0,741,0],[736,0,742,0],[737,0,743,0],[738,0,744,0],[739,4,745,4,"onAny"],[739,9,745,9,"onAny"],[739,10,745,10,"listener"],[739,18,745,18],[739,20,745,20],[740,6,746,8],[740,10,746,12],[740,11,746,13,"_anyListeners"],[740,24,746,26],[740,27,746,29],[740,31,746,33],[740,32,746,34,"_anyListeners"],[740,45,746,47],[740,49,746,51],[740,51,746,53],[741,6,747,8],[741,10,747,12],[741,11,747,13,"_anyListeners"],[741,24,747,26],[741,25,747,27,"push"],[741,29,747,31],[741,30,747,32,"listener"],[741,38,747,40],[741,39,747,41],[742,6,748,8],[742,13,748,15],[742,17,748,19],[743,4,749,4],[744,4,750,4],[745,0,751,0],[746,0,752,0],[747,0,753,0],[748,0,754,0],[749,0,755,0],[750,0,756,0],[751,0,757,0],[752,0,758,0],[753,0,759,0],[754,0,760,0],[755,4,761,4,"prependAny"],[755,14,761,14,"prependAny"],[755,15,761,15,"listener"],[755,23,761,23],[755,25,761,25],[756,6,762,8],[756,10,762,12],[756,11,762,13,"_anyListeners"],[756,24,762,26],[756,27,762,29],[756,31,762,33],[756,32,762,34,"_anyListeners"],[756,45,762,47],[756,49,762,51],[756,51,762,53],[757,6,763,8],[757,10,763,12],[757,11,763,13,"_anyListeners"],[757,24,763,26],[757,25,763,27,"unshift"],[757,32,763,34],[757,33,763,35,"listener"],[757,41,763,43],[757,42,763,44],[758,6,764,8],[758,13,764,15],[758,17,764,19],[759,4,765,4],[760,4,766,4],[761,0,767,0],[762,0,768,0],[763,0,769,0],[764,0,770,0],[765,0,771,0],[766,0,772,0],[767,0,773,0],[768,0,774,0],[769,0,775,0],[770,0,776,0],[771,0,777,0],[772,0,778,0],[773,0,779,0],[774,0,780,0],[775,0,781,0],[776,0,782,0],[777,0,783,0],[778,4,784,4,"offAny"],[778,10,784,10,"offAny"],[778,11,784,11,"listener"],[778,19,784,19],[778,21,784,21],[779,6,785,8],[779,10,785,12],[779,11,785,13],[779,15,785,17],[779,16,785,18,"_anyListeners"],[779,29,785,31],[779,31,785,33],[780,8,786,12],[780,15,786,19],[780,19,786,23],[781,6,787,8],[782,6,788,8],[782,10,788,12,"listener"],[782,18,788,20],[782,20,788,22],[783,8,789,12],[783,14,789,18,"listeners"],[783,23,789,27],[783,26,789,30],[783,30,789,34],[783,31,789,35,"_anyListeners"],[783,44,789,48],[784,8,790,12],[784,13,790,17],[784,17,790,21,"i"],[784,18,790,22],[784,21,790,25],[784,22,790,26],[784,24,790,28,"i"],[784,25,790,29],[784,28,790,32,"listeners"],[784,37,790,41],[784,38,790,42,"length"],[784,44,790,48],[784,46,790,50,"i"],[784,47,790,51],[784,49,790,53],[784,51,790,55],[785,10,791,16],[785,14,791,20,"listener"],[785,22,791,28],[785,27,791,33,"listeners"],[785,36,791,42],[785,37,791,43,"i"],[785,38,791,44],[785,39,791,45],[785,41,791,47],[786,12,792,20,"listeners"],[786,21,792,29],[786,22,792,30,"splice"],[786,28,792,36],[786,29,792,37,"i"],[786,30,792,38],[786,32,792,40],[786,33,792,41],[786,34,792,42],[787,12,793,20],[787,19,793,27],[787,23,793,31],[788,10,794,16],[789,8,795,12],[790,6,796,8],[790,7,796,9],[790,13,797,13],[791,8,798,12],[791,12,798,16],[791,13,798,17,"_anyListeners"],[791,26,798,30],[791,29,798,33],[791,31,798,35],[792,6,799,8],[793,6,800,8],[793,13,800,15],[793,17,800,19],[794,4,801,4],[795,4,802,4],[796,0,803,0],[797,0,804,0],[798,0,805,0],[799,4,806,4,"listenersAny"],[799,16,806,16,"listenersAny"],[799,17,806,16],[799,19,806,19],[800,6,807,8],[800,13,807,15],[800,17,807,19],[800,18,807,20,"_anyListeners"],[800,31,807,33],[800,35,807,37],[800,37,807,39],[801,4,808,4],[802,4,809,4],[803,0,810,0],[804,0,811,0],[805,0,812,0],[806,0,813,0],[807,0,814,0],[808,0,815,0],[809,0,816,0],[810,0,817,0],[811,0,818,0],[812,0,819,0],[813,0,820,0],[814,0,821,0],[815,4,822,4,"onAnyOutgoing"],[815,17,822,17,"onAnyOutgoing"],[815,18,822,18,"listener"],[815,26,822,26],[815,28,822,28],[816,6,823,8],[816,10,823,12],[816,11,823,13,"_anyOutgoingListeners"],[816,32,823,34],[816,35,823,37],[816,39,823,41],[816,40,823,42,"_anyOutgoingListeners"],[816,61,823,63],[816,65,823,67],[816,67,823,69],[817,6,824,8],[817,10,824,12],[817,11,824,13,"_anyOutgoingListeners"],[817,32,824,34],[817,33,824,35,"push"],[817,37,824,39],[817,38,824,40,"listener"],[817,46,824,48],[817,47,824,49],[818,6,825,8],[818,13,825,15],[818,17,825,19],[819,4,826,4],[820,4,827,4],[821,0,828,0],[822,0,829,0],[823,0,830,0],[824,0,831,0],[825,0,832,0],[826,0,833,0],[827,0,834,0],[828,0,835,0],[829,0,836,0],[830,0,837,0],[831,0,838,0],[832,0,839,0],[833,4,840,4,"prependAnyOutgoing"],[833,22,840,22,"prependAnyOutgoing"],[833,23,840,23,"listener"],[833,31,840,31],[833,33,840,33],[834,6,841,8],[834,10,841,12],[834,11,841,13,"_anyOutgoingListeners"],[834,32,841,34],[834,35,841,37],[834,39,841,41],[834,40,841,42,"_anyOutgoingListeners"],[834,61,841,63],[834,65,841,67],[834,67,841,69],[835,6,842,8],[835,10,842,12],[835,11,842,13,"_anyOutgoingListeners"],[835,32,842,34],[835,33,842,35,"unshift"],[835,40,842,42],[835,41,842,43,"listener"],[835,49,842,51],[835,50,842,52],[836,6,843,8],[836,13,843,15],[836,17,843,19],[837,4,844,4],[838,4,845,4],[839,0,846,0],[840,0,847,0],[841,0,848,0],[842,0,849,0],[843,0,850,0],[844,0,851,0],[845,0,852,0],[846,0,853,0],[847,0,854,0],[848,0,855,0],[849,0,856,0],[850,0,857,0],[851,0,858,0],[852,0,859,0],[853,0,860,0],[854,0,861,0],[855,0,862,0],[856,4,863,4,"offAnyOutgoing"],[856,18,863,18,"offAnyOutgoing"],[856,19,863,19,"listener"],[856,27,863,27],[856,29,863,29],[857,6,864,8],[857,10,864,12],[857,11,864,13],[857,15,864,17],[857,16,864,18,"_anyOutgoingListeners"],[857,37,864,39],[857,39,864,41],[858,8,865,12],[858,15,865,19],[858,19,865,23],[859,6,866,8],[860,6,867,8],[860,10,867,12,"listener"],[860,18,867,20],[860,20,867,22],[861,8,868,12],[861,14,868,18,"listeners"],[861,23,868,27],[861,26,868,30],[861,30,868,34],[861,31,868,35,"_anyOutgoingListeners"],[861,52,868,56],[862,8,869,12],[862,13,869,17],[862,17,869,21,"i"],[862,18,869,22],[862,21,869,25],[862,22,869,26],[862,24,869,28,"i"],[862,25,869,29],[862,28,869,32,"listeners"],[862,37,869,41],[862,38,869,42,"length"],[862,44,869,48],[862,46,869,50,"i"],[862,47,869,51],[862,49,869,53],[862,51,869,55],[863,10,870,16],[863,14,870,20,"listener"],[863,22,870,28],[863,27,870,33,"listeners"],[863,36,870,42],[863,37,870,43,"i"],[863,38,870,44],[863,39,870,45],[863,41,870,47],[864,12,871,20,"listeners"],[864,21,871,29],[864,22,871,30,"splice"],[864,28,871,36],[864,29,871,37,"i"],[864,30,871,38],[864,32,871,40],[864,33,871,41],[864,34,871,42],[865,12,872,20],[865,19,872,27],[865,23,872,31],[866,10,873,16],[867,8,874,12],[868,6,875,8],[868,7,875,9],[868,13,876,13],[869,8,877,12],[869,12,877,16],[869,13,877,17,"_anyOutgoingListeners"],[869,34,877,38],[869,37,877,41],[869,39,877,43],[870,6,878,8],[871,6,879,8],[871,13,879,15],[871,17,879,19],[872,4,880,4],[873,4,881,4],[874,0,882,0],[875,0,883,0],[876,0,884,0],[877,4,885,4,"listenersAnyOutgoing"],[877,24,885,24,"listenersAnyOutgoing"],[877,25,885,24],[877,27,885,27],[878,6,886,8],[878,13,886,15],[878,17,886,19],[878,18,886,20,"_anyOutgoingListeners"],[878,39,886,41],[878,43,886,45],[878,45,886,47],[879,4,887,4],[880,4,888,4],[881,0,889,0],[882,0,890,0],[883,0,891,0],[884,0,892,0],[885,0,893,0],[886,0,894,0],[887,4,895,4,"notifyOutgoingListeners"],[887,27,895,27,"notifyOutgoingListeners"],[887,28,895,28,"packet"],[887,34,895,34],[887,36,895,36],[888,6,896,8],[888,10,896,12],[888,14,896,16],[888,15,896,17,"_anyOutgoingListeners"],[888,36,896,38],[888,40,896,42],[888,44,896,46],[888,45,896,47,"_anyOutgoingListeners"],[888,66,896,68],[888,67,896,69,"length"],[888,73,896,75],[888,75,896,77],[889,8,897,12],[889,14,897,18,"listeners"],[889,23,897,27],[889,26,897,30],[889,30,897,34],[889,31,897,35,"_anyOutgoingListeners"],[889,52,897,56],[889,53,897,57,"slice"],[889,58,897,62],[889,59,897,63],[889,60,897,64],[890,8,898,12],[890,13,898,17],[890,19,898,23,"listener"],[890,27,898,31],[890,31,898,35,"listeners"],[890,40,898,44],[890,42,898,46],[891,10,899,16,"listener"],[891,18,899,24],[891,19,899,25,"apply"],[891,24,899,30],[891,25,899,31],[891,29,899,35],[891,31,899,37,"packet"],[891,37,899,43],[891,38,899,44,"data"],[891,42,899,48],[891,43,899,49],[892,8,900,12],[893,6,901,8],[894,4,902,4],[895,2,903,0],[896,2,903,1,"exports"],[896,9,903,1],[896,10,903,1,"Socket"],[896,16,903,1],[896,19,903,1,"Socket"],[896,25,903,1],[897,0,903,1],[897,3]],"functionMap":{"names":["<global>","Socket","Socket#constructor","Socket#get__disconnected","Socket#subEvents","Socket#get__active","Socket#connect","Socket#open","Socket#send","Socket#emit","Socket#_registerAckCallback","io.setTimeoutFn$argument_0","fn","Socket#emitWithAck","Promise$argument_0","Socket#_addToQueue","args.push$argument_0","Socket#_drainQueue","Socket#packet","Socket#onopen","auth$argument_0","Socket#_sendConnectPacket","Socket#onerror","Socket#onclose","Socket#_clearAcks","Object.keys.forEach$argument_0","sendBuffer.some$argument_0","Socket#onpacket","Socket#onevent","Socket#emitEvent","Socket#ack","<anonymous>","Socket#onack","Socket#onconnect","Socket#emitBuffered","receiveBuffer.forEach$argument_0","sendBuffer.forEach$argument_0","Socket#ondisconnect","Socket#destroy","subs.forEach$argument_0","Socket#disconnect","Socket#close","Socket#compress","Socket#get__volatile","Socket#timeout","Socket#onAny","Socket#prependAny","Socket#offAny","Socket#listenersAny","Socket#onAnyOutgoing","Socket#prependAnyOutgoing","Socket#offAnyOutgoing","Socket#listenersAnyOutgoing","Socket#notifyOutgoingListeners"],"mappings":"AAA;OC0C;ICI;KD4E;IEe;KFE;IGM;KHU;IIkB;KJE;IKW;KLS;IMI;KNE;IOgB;KPI;IQkB;KRuC;ISI;2CCQ;SDU;mBEC;SFI;KTG;IYiB;2BCC;uBFC;aEE;SDI;KZC;IcM;kBCY;SDwB;KdG;IgBO;KhBe;IiBO;KjBG;IkBM;sBCG;aDE;KlBK;IoBO;KpBO;IqBO;KrBI;IsBQ;KtBM;IuBO;uCCC;oDCC,oCD;SDS;KvBC;I0BO;K1BgC;I2BO;K3Ba;I4BC;K5BW;I6BM;eCG;SDW;K7BC;I+BO;K/Bc;IgCM;KhCS;IiCM;mCCC,8BD;gCEE;SFG;KjCE;IoCM;KpCI;IqCQ;8BCG,4BD;KrCI;IuCiB;KvCY;IwCM;KxCE;IyCU;KzCG;I0CU;K1CG;I2Cc;K3CG;I4CY;K5CI;I6CY;K7CI;I8CmB;K9CiB;I+CK;K/CE;IgDc;KhDI;IiDc;KjDI;IkDmB;KlDiB;ImDK;KnDE;IoDQ;KpDO;CDC"}},"type":"js/module"}]}