{"dependencies":[{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"]}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":29,"index":76}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":77},"end":{"line":3,"column":56,"index":133}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Socket = void 0;\n  var _socket = require(_dependencyMap[0], \"socket.io-parser\");\n  var _on = require(_dependencyMap[1], \"./on.js\");\n  var _componentEmitter = require(_dependencyMap[2], \"@socket.io/component-emitter\");\n  /**\n   * Internal events.\n   * These events can't be emitted by the user.\n   */\n  const RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1\n  });\n  /**\n   * A Socket is the fundamental class for interacting with the server.\n   *\n   * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(\"connected\");\n   * });\n   *\n   * // send an event to the server\n   * socket.emit(\"foo\", \"bar\");\n   *\n   * socket.on(\"foobar\", () => {\n   *   // an event was received from the server\n   * });\n   *\n   * // upon disconnection\n   * socket.on(\"disconnect\", (reason) => {\n   *   console.log(`disconnected due to ${reason}`);\n   * });\n   */\n  class Socket extends _componentEmitter.Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n      super();\n      /**\n       * Whether the socket is currently connected to the server.\n       *\n       * @example\n       * const socket = io();\n       *\n       * socket.on(\"connect\", () => {\n       *   console.log(socket.connected); // true\n       * });\n       *\n       * socket.on(\"disconnect\", () => {\n       *   console.log(socket.connected); // false\n       * });\n       */\n      this.connected = false;\n      /**\n       * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n       * be transmitted by the server.\n       */\n      this.recovered = false;\n      /**\n       * Buffer for packets received before the CONNECT packet\n       */\n      this.receiveBuffer = [];\n      /**\n       * Buffer for packets that will be sent once the socket is connected\n       */\n      this.sendBuffer = [];\n      /**\n       * The queue of packets to be sent with retry in case of failure.\n       *\n       * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n       * @private\n       */\n      this._queue = [];\n      /**\n       * A sequence to generate the ID of the {@link QueuedPacket}.\n       * @private\n       */\n      this._queueSeq = 0;\n      this.ids = 0;\n      /**\n       * A map containing acknowledgement handlers.\n       *\n       * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n       *\n       * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n       * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n       * - `const value = await socket.emitWithAck(\"test\")`\n       *\n       * From those that don't:\n       *\n       * - `socket.emit(\"test\", (value) => { ... });`\n       *\n       * In the first case, the handlers will be called with an error when:\n       *\n       * - the timeout is reached\n       * - the socket gets disconnected\n       *\n       * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n       * an acknowledgement from the server.\n       *\n       * @private\n       */\n      this.acks = {};\n      this.flags = {};\n      this.io = io;\n      this.nsp = nsp;\n      if (opts && opts.auth) {\n        this.auth = opts.auth;\n      }\n      this._opts = Object.assign({}, opts);\n      if (this.io._autoConnect) this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n      if (this.subs) return;\n      const io = this.io;\n      this.subs = [(0, _on.on)(io, \"open\", this.onopen.bind(this)), (0, _on.on)(io, \"packet\", this.onpacket.bind(this)), (0, _on.on)(io, \"error\", this.onerror.bind(this)), (0, _on.on)(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n      var _a, _b, _c;\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n      }\n      args.unshift(ev);\n      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n        this._addToQueue(args);\n        return this;\n      }\n      const packet = {\n        type: _socket.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        const id = this.ids++;\n        const ack = args.pop();\n        this._registerAckCallback(id, ack);\n        packet.id = id;\n      }\n      const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n      const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n      const discardPacket = this.flags.volatile && !isTransportWritable;\n      if (discardPacket) {} else if (isConnected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n      var _a;\n      const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      }\n      // @ts-ignore\n      const timer = this.io.setTimeoutFn(() => {\n        delete this.acks[id];\n        for (let i = 0; i < this.sendBuffer.length; i++) {\n          if (this.sendBuffer[i].id === id) {\n            this.sendBuffer.splice(i, 1);\n          }\n        }\n        ack.call(this, new Error(\"operation has timed out\"));\n      }, timeout);\n      const fn = (...args) => {\n        // @ts-ignore\n        this.io.clearTimeoutFn(timer);\n        ack.apply(this, args);\n      };\n      fn.withError = true;\n      this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n      return new Promise((resolve, reject) => {\n        const fn = (arg1, arg2) => {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        };\n        fn.withError = true;\n        args.push(fn);\n        this.emit(ev, ...args);\n      });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n      let ack;\n      if (typeof args[args.length - 1] === \"function\") {\n        ack = args.pop();\n      }\n      const packet = {\n        id: this._queueSeq++,\n        tryCount: 0,\n        pending: false,\n        args,\n        flags: Object.assign({\n          fromQueue: true\n        }, this.flags)\n      };\n      args.push((err, ...responseArgs) => {\n        if (packet !== this._queue[0]) {\n          // the packet has already been acknowledged\n          return;\n        }\n        const hasError = err !== null;\n        if (hasError) {\n          if (packet.tryCount > this._opts.retries) {\n            this._queue.shift();\n            if (ack) {\n              ack(err);\n            }\n          }\n        } else {\n          this._queue.shift();\n          if (ack) {\n            ack(null, ...responseArgs);\n          }\n        }\n        packet.pending = false;\n        return this._drainQueue();\n      });\n      this._queue.push(packet);\n      this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n      if (!this.connected || this._queue.length === 0) {\n        return;\n      }\n      const packet = this._queue[0];\n      if (packet.pending && !force) {\n        return;\n      }\n      packet.pending = true;\n      packet.tryCount++;\n      this.flags = packet.flags;\n      this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n      packet.nsp = this.nsp;\n      this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n      if (typeof this.auth == \"function\") {\n        this.auth(data => {\n          this._sendConnectPacket(data);\n        });\n      } else {\n        this._sendConnectPacket(this.auth);\n      }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n      this.packet({\n        type: _socket.PacketType.CONNECT,\n        data: this._pid ? Object.assign({\n          pid: this._pid,\n          offset: this._lastOffset\n        }, data) : data\n      });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n      this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n      Object.keys(this.acks).forEach(id => {\n        const isBuffered = this.sendBuffer.some(packet => String(packet.id) === id);\n        if (!isBuffered) {\n          // note: handlers that do not accept an error as first argument are ignored here\n          const ack = this.acks[id];\n          delete this.acks[id];\n          if (ack.withError) {\n            ack.call(this, new Error(\"socket has been disconnected\"));\n          }\n        }\n      });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n      const sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case _socket.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            this.onconnect(packet.data.sid, packet.data.pid);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case _socket.PacketType.EVENT:\n        case _socket.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case _socket.PacketType.ACK:\n        case _socket.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case _socket.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case _socket.PacketType.CONNECT_ERROR:\n          this.destroy();\n          const err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n      const args = packet.data || [];\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n    emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        const listeners = this._anyListeners.slice();\n        for (const listener of listeners) {\n          listener.apply(this, args);\n        }\n      }\n      super.emit.apply(this, args);\n      if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n        this._lastOffset = args[args.length - 1];\n      }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n      const self = this;\n      let sent = false;\n      return function (...args) {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        self.packet({\n          type: _socket.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n      const ack = this.acks[packet.id];\n      if (typeof ack !== \"function\") {\n        return;\n      }\n      delete this.acks[packet.id];\n      // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n      if (ack.withError) {\n        packet.data.unshift(null);\n      }\n      // @ts-ignore\n      ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n      this.id = id;\n      this.recovered = pid && this._pid === pid;\n      this._pid = pid; // defined only if connection state recovery is enabled\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n      this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n      this.receiveBuffer.forEach(args => this.emitEvent(args));\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(packet => {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(subDestroy => subDestroy());\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: _socket.PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n      this.flags.compress = compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n      this.flags.timeout = timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        const listeners = this._anyListeners;\n        for (let i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n      if (listener) {\n        const listeners = this._anyOutgoingListeners;\n        for (let i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        const listeners = this._anyOutgoingListeners.slice();\n        for (const listener of listeners) {\n          listener.apply(this, packet.data);\n        }\n      }\n    }\n  }\n  exports.Socket = Socket;\n});","lineCount":873,"map":[[6,2,1,0],[6,6,1,0,"_socket"],[6,13,1,0],[6,16,1,0,"require"],[6,23,1,0],[6,24,1,0,"_dependencyMap"],[6,38,1,0],[7,2,2,0],[7,6,2,0,"_on"],[7,9,2,0],[7,12,2,0,"require"],[7,19,2,0],[7,20,2,0,"_dependencyMap"],[7,34,2,0],[8,2,3,0],[8,6,3,0,"_componentEmitter"],[8,23,3,0],[8,26,3,0,"require"],[8,33,3,0],[8,34,3,0,"_dependencyMap"],[8,48,3,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,2,8,0],[13,8,8,6,"RESERVED_EVENTS"],[13,23,8,21],[13,26,8,24,"Object"],[13,32,8,30],[13,33,8,31,"freeze"],[13,39,8,37],[13,40,8,38],[14,4,9,4,"connect"],[14,11,9,11],[14,13,9,13],[14,14,9,14],[15,4,10,4,"connect_error"],[15,17,10,17],[15,19,10,19],[15,20,10,20],[16,4,11,4,"disconnect"],[16,14,11,14],[16,16,11,16],[16,17,11,17],[17,4,12,4,"disconnecting"],[17,17,12,17],[17,19,12,19],[17,20,12,20],[18,4,13,4],[19,4,14,4,"newListener"],[19,15,14,15],[19,17,14,17],[19,18,14,18],[20,4,15,4,"removeListener"],[20,18,15,18],[20,20,15,20],[21,2,16,0],[21,3,16,1],[21,4,16,2],[22,2,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,2,41,7],[46,8,41,13,"Socket"],[46,14,41,19],[46,23,41,28,"Emitter"],[46,48,41,35],[46,49,41,36],[47,4,42,4],[48,0,43,0],[49,0,44,0],[50,4,45,4,"constructor"],[50,15,45,15,"constructor"],[50,16,45,16,"io"],[50,18,45,18],[50,20,45,20,"nsp"],[50,23,45,23],[50,25,45,25,"opts"],[50,29,45,29],[50,31,45,31],[51,6,46,8],[51,11,46,13],[51,12,46,14],[51,13,46,15],[52,6,47,8],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,0,59,0],[65,0,60,0],[66,6,61,8],[66,10,61,12],[66,11,61,13,"connected"],[66,20,61,22],[66,23,61,25],[66,28,61,30],[67,6,62,8],[68,0,63,0],[69,0,64,0],[70,0,65,0],[71,6,66,8],[71,10,66,12],[71,11,66,13,"recovered"],[71,20,66,22],[71,23,66,25],[71,28,66,30],[72,6,67,8],[73,0,68,0],[74,0,69,0],[75,6,70,8],[75,10,70,12],[75,11,70,13,"receiveBuffer"],[75,24,70,26],[75,27,70,29],[75,29,70,31],[76,6,71,8],[77,0,72,0],[78,0,73,0],[79,6,74,8],[79,10,74,12],[79,11,74,13,"sendBuffer"],[79,21,74,23],[79,24,74,26],[79,26,74,28],[80,6,75,8],[81,0,76,0],[82,0,77,0],[83,0,78,0],[84,0,79,0],[85,0,80,0],[86,6,81,8],[86,10,81,12],[86,11,81,13,"_queue"],[86,17,81,19],[86,20,81,22],[86,22,81,24],[87,6,82,8],[88,0,83,0],[89,0,84,0],[90,0,85,0],[91,6,86,8],[91,10,86,12],[91,11,86,13,"_queueSeq"],[91,20,86,22],[91,23,86,25],[91,24,86,26],[92,6,87,8],[92,10,87,12],[92,11,87,13,"ids"],[92,14,87,16],[92,17,87,19],[92,18,87,20],[93,6,88,8],[94,0,89,0],[95,0,90,0],[96,0,91,0],[97,0,92,0],[98,0,93,0],[99,0,94,0],[100,0,95,0],[101,0,96,0],[102,0,97,0],[103,0,98,0],[104,0,99,0],[105,0,100,0],[106,0,101,0],[107,0,102,0],[108,0,103,0],[109,0,104,0],[110,0,105,0],[111,0,106,0],[112,0,107,0],[113,0,108,0],[114,0,109,0],[115,0,110,0],[116,6,111,8],[116,10,111,12],[116,11,111,13,"acks"],[116,15,111,17],[116,18,111,20],[116,19,111,21],[116,20,111,22],[117,6,112,8],[117,10,112,12],[117,11,112,13,"flags"],[117,16,112,18],[117,19,112,21],[117,20,112,22],[117,21,112,23],[118,6,113,8],[118,10,113,12],[118,11,113,13,"io"],[118,13,113,15],[118,16,113,18,"io"],[118,18,113,20],[119,6,114,8],[119,10,114,12],[119,11,114,13,"nsp"],[119,14,114,16],[119,17,114,19,"nsp"],[119,20,114,22],[120,6,115,8],[120,10,115,12,"opts"],[120,14,115,16],[120,18,115,20,"opts"],[120,22,115,24],[120,23,115,25,"auth"],[120,27,115,29],[120,29,115,31],[121,8,116,12],[121,12,116,16],[121,13,116,17,"auth"],[121,17,116,21],[121,20,116,24,"opts"],[121,24,116,28],[121,25,116,29,"auth"],[121,29,116,33],[122,6,117,8],[123,6,118,8],[123,10,118,12],[123,11,118,13,"_opts"],[123,16,118,18],[123,19,118,21,"Object"],[123,25,118,27],[123,26,118,28,"assign"],[123,32,118,34],[123,33,118,35],[123,34,118,36],[123,35,118,37],[123,37,118,39,"opts"],[123,41,118,43],[123,42,118,44],[124,6,119,8],[124,10,119,12],[124,14,119,16],[124,15,119,17,"io"],[124,17,119,19],[124,18,119,20,"_autoConnect"],[124,30,119,32],[124,32,120,12],[124,36,120,16],[124,37,120,17,"open"],[124,41,120,21],[124,42,120,22],[124,43,120,23],[125,4,121,4],[126,4,122,4],[127,0,123,0],[128,0,124,0],[129,0,125,0],[130,0,126,0],[131,0,127,0],[132,0,128,0],[133,0,129,0],[134,0,130,0],[135,0,131,0],[136,0,132,0],[137,0,133,0],[138,0,134,0],[139,0,135,0],[140,4,136,4],[140,8,136,8,"disconnected"],[140,20,136,20,"disconnected"],[140,21,136,20],[140,23,136,23],[141,6,137,8],[141,13,137,15],[141,14,137,16],[141,18,137,20],[141,19,137,21,"connected"],[141,28,137,30],[142,4,138,4],[143,4,139,4],[144,0,140,0],[145,0,141,0],[146,0,142,0],[147,0,143,0],[148,4,144,4,"subEvents"],[148,13,144,13,"subEvents"],[148,14,144,13],[148,16,144,16],[149,6,145,8],[149,10,145,12],[149,14,145,16],[149,15,145,17,"subs"],[149,19,145,21],[149,21,146,12],[150,6,147,8],[150,12,147,14,"io"],[150,14,147,16],[150,17,147,19],[150,21,147,23],[150,22,147,24,"io"],[150,24,147,26],[151,6,148,8],[151,10,148,12],[151,11,148,13,"subs"],[151,15,148,17],[151,18,148,20],[151,19,149,12],[151,23,149,12,"on"],[151,29,149,14],[151,31,149,15,"io"],[151,33,149,17],[151,35,149,19],[151,41,149,25],[151,43,149,27],[151,47,149,31],[151,48,149,32,"onopen"],[151,54,149,38],[151,55,149,39,"bind"],[151,59,149,43],[151,60,149,44],[151,64,149,48],[151,65,149,49],[151,66,149,50],[151,68,150,12],[151,72,150,12,"on"],[151,78,150,14],[151,80,150,15,"io"],[151,82,150,17],[151,84,150,19],[151,92,150,27],[151,94,150,29],[151,98,150,33],[151,99,150,34,"onpacket"],[151,107,150,42],[151,108,150,43,"bind"],[151,112,150,47],[151,113,150,48],[151,117,150,52],[151,118,150,53],[151,119,150,54],[151,121,151,12],[151,125,151,12,"on"],[151,131,151,14],[151,133,151,15,"io"],[151,135,151,17],[151,137,151,19],[151,144,151,26],[151,146,151,28],[151,150,151,32],[151,151,151,33,"onerror"],[151,158,151,40],[151,159,151,41,"bind"],[151,163,151,45],[151,164,151,46],[151,168,151,50],[151,169,151,51],[151,170,151,52],[151,172,152,12],[151,176,152,12,"on"],[151,182,152,14],[151,184,152,15,"io"],[151,186,152,17],[151,188,152,19],[151,195,152,26],[151,197,152,28],[151,201,152,32],[151,202,152,33,"onclose"],[151,209,152,40],[151,210,152,41,"bind"],[151,214,152,45],[151,215,152,46],[151,219,152,50],[151,220,152,51],[151,221,152,52],[151,222,153,9],[152,4,154,4],[153,4,155,4],[154,0,156,0],[155,0,157,0],[156,0,158,0],[157,0,159,0],[158,0,160,0],[159,0,161,0],[160,0,162,0],[161,0,163,0],[162,0,164,0],[163,0,165,0],[164,0,166,0],[165,0,167,0],[166,0,168,0],[167,0,169,0],[168,0,170,0],[169,0,171,0],[170,4,172,4],[170,8,172,8,"active"],[170,14,172,14,"active"],[170,15,172,14],[170,17,172,17],[171,6,173,8],[171,13,173,15],[171,14,173,16],[171,15,173,17],[171,19,173,21],[171,20,173,22,"subs"],[171,24,173,26],[172,4,174,4],[173,4,175,4],[174,0,176,0],[175,0,177,0],[176,0,178,0],[177,0,179,0],[178,0,180,0],[179,0,181,0],[180,0,182,0],[181,0,183,0],[182,0,184,0],[183,4,185,4,"connect"],[183,11,185,11,"connect"],[183,12,185,11],[183,14,185,14],[184,6,186,8],[184,10,186,12],[184,14,186,16],[184,15,186,17,"connected"],[184,24,186,26],[184,26,187,12],[184,33,187,19],[184,37,187,23],[185,6,188,8],[185,10,188,12],[185,11,188,13,"subEvents"],[185,20,188,22],[185,21,188,23],[185,22,188,24],[186,6,189,8],[186,10,189,12],[186,11,189,13],[186,15,189,17],[186,16,189,18,"io"],[186,18,189,20],[186,19,189,21],[186,34,189,36],[186,35,189,37],[186,37,190,12],[186,41,190,16],[186,42,190,17,"io"],[186,44,190,19],[186,45,190,20,"open"],[186,49,190,24],[186,50,190,25],[186,51,190,26],[186,52,190,27],[186,53,190,28],[187,6,191,8],[187,10,191,12],[187,16,191,18],[187,21,191,23],[187,25,191,27],[187,26,191,28,"io"],[187,28,191,30],[187,29,191,31,"_readyState"],[187,40,191,42],[187,42,192,12],[187,46,192,16],[187,47,192,17,"onopen"],[187,53,192,23],[187,54,192,24],[187,55,192,25],[188,6,193,8],[188,13,193,15],[188,17,193,19],[189,4,194,4],[190,4,195,4],[191,0,196,0],[192,0,197,0],[193,4,198,4,"open"],[193,8,198,8,"open"],[193,9,198,8],[193,11,198,11],[194,6,199,8],[194,13,199,15],[194,17,199,19],[194,18,199,20,"connect"],[194,25,199,27],[194,26,199,28],[194,27,199,29],[195,4,200,4],[196,4,201,4],[197,0,202,0],[198,0,203,0],[199,0,204,0],[200,0,205,0],[201,0,206,0],[202,0,207,0],[203,0,208,0],[204,0,209,0],[205,0,210,0],[206,0,211,0],[207,0,212,0],[208,0,213,0],[209,0,214,0],[210,0,215,0],[211,4,216,4,"send"],[211,8,216,8,"send"],[211,9,216,9],[211,12,216,12,"args"],[211,16,216,16],[211,18,216,18],[212,6,217,8,"args"],[212,10,217,12],[212,11,217,13,"unshift"],[212,18,217,20],[212,19,217,21],[212,28,217,30],[212,29,217,31],[213,6,218,8],[213,10,218,12],[213,11,218,13,"emit"],[213,15,218,17],[213,16,218,18,"apply"],[213,21,218,23],[213,22,218,24],[213,26,218,28],[213,28,218,30,"args"],[213,32,218,34],[213,33,218,35],[214,6,219,8],[214,13,219,15],[214,17,219,19],[215,4,220,4],[216,4,221,4],[217,0,222,0],[218,0,223,0],[219,0,224,0],[220,0,225,0],[221,0,226,0],[222,0,227,0],[223,0,228,0],[224,0,229,0],[225,0,230,0],[226,0,231,0],[227,0,232,0],[228,0,233,0],[229,0,234,0],[230,0,235,0],[231,0,236,0],[232,0,237,0],[233,4,238,4,"emit"],[233,8,238,8,"emit"],[233,9,238,9,"ev"],[233,11,238,11],[233,13,238,13],[233,16,238,16,"args"],[233,20,238,20],[233,22,238,22],[234,6,239,8],[234,10,239,12,"_a"],[234,12,239,14],[234,14,239,16,"_b"],[234,16,239,18],[234,18,239,20,"_c"],[234,20,239,22],[235,6,240,8],[235,10,240,12,"RESERVED_EVENTS"],[235,25,240,27],[235,26,240,28,"hasOwnProperty"],[235,40,240,42],[235,41,240,43,"ev"],[235,43,240,45],[235,44,240,46],[235,46,240,48],[236,8,241,12],[236,14,241,18],[236,18,241,22,"Error"],[236,23,241,27],[236,24,241,28],[236,27,241,31],[236,30,241,34,"ev"],[236,32,241,36],[236,33,241,37,"toString"],[236,41,241,45],[236,42,241,46],[236,43,241,47],[236,46,241,50],[236,74,241,78],[236,75,241,79],[237,6,242,8],[238,6,243,8,"args"],[238,10,243,12],[238,11,243,13,"unshift"],[238,18,243,20],[238,19,243,21,"ev"],[238,21,243,23],[238,22,243,24],[239,6,244,8],[239,10,244,12],[239,14,244,16],[239,15,244,17,"_opts"],[239,20,244,22],[239,21,244,23,"retries"],[239,28,244,30],[239,32,244,34],[239,33,244,35],[239,37,244,39],[239,38,244,40,"flags"],[239,43,244,45],[239,44,244,46,"fromQueue"],[239,53,244,55],[239,57,244,59],[239,58,244,60],[239,62,244,64],[239,63,244,65,"flags"],[239,68,244,70],[239,69,244,71,"volatile"],[239,77,244,79],[239,79,244,81],[240,8,245,12],[240,12,245,16],[240,13,245,17,"_addToQueue"],[240,24,245,28],[240,25,245,29,"args"],[240,29,245,33],[240,30,245,34],[241,8,246,12],[241,15,246,19],[241,19,246,23],[242,6,247,8],[243,6,248,8],[243,12,248,14,"packet"],[243,18,248,20],[243,21,248,23],[244,8,249,12,"type"],[244,12,249,16],[244,14,249,18,"PacketType"],[244,32,249,28],[244,33,249,29,"EVENT"],[244,38,249,34],[245,8,250,12,"data"],[245,12,250,16],[245,14,250,18,"args"],[246,6,251,8],[246,7,251,9],[247,6,252,8,"packet"],[247,12,252,14],[247,13,252,15,"options"],[247,20,252,22],[247,23,252,25],[247,24,252,26],[247,25,252,27],[248,6,253,8,"packet"],[248,12,253,14],[248,13,253,15,"options"],[248,20,253,22],[248,21,253,23,"compress"],[248,29,253,31],[248,32,253,34],[248,36,253,38],[248,37,253,39,"flags"],[248,42,253,44],[248,43,253,45,"compress"],[248,51,253,53],[248,56,253,58],[248,61,253,63],[249,6,254,8],[250,6,255,8],[250,10,255,12],[250,20,255,22],[250,25,255,27],[250,32,255,34,"args"],[250,36,255,38],[250,37,255,39,"args"],[250,41,255,43],[250,42,255,44,"length"],[250,48,255,50],[250,51,255,53],[250,52,255,54],[250,53,255,55],[250,55,255,57],[251,8,256,12],[251,14,256,18,"id"],[251,16,256,20],[251,19,256,23],[251,23,256,27],[251,24,256,28,"ids"],[251,27,256,31],[251,29,256,33],[252,8,257,12],[252,14,257,18,"ack"],[252,17,257,21],[252,20,257,24,"args"],[252,24,257,28],[252,25,257,29,"pop"],[252,28,257,32],[252,29,257,33],[252,30,257,34],[253,8,258,12],[253,12,258,16],[253,13,258,17,"_registerAckCallback"],[253,33,258,37],[253,34,258,38,"id"],[253,36,258,40],[253,38,258,42,"ack"],[253,41,258,45],[253,42,258,46],[254,8,259,12,"packet"],[254,14,259,18],[254,15,259,19,"id"],[254,17,259,21],[254,20,259,24,"id"],[254,22,259,26],[255,6,260,8],[256,6,261,8],[256,12,261,14,"isTransportWritable"],[256,31,261,33],[256,34,261,36],[256,35,261,37,"_b"],[256,37,261,39],[256,40,261,42],[256,41,261,43,"_a"],[256,43,261,45],[256,46,261,48],[256,50,261,52],[256,51,261,53,"io"],[256,53,261,55],[256,54,261,56,"engine"],[256,60,261,62],[256,66,261,68],[256,70,261,72],[256,74,261,76,"_a"],[256,76,261,78],[256,81,261,83],[256,86,261,88],[256,87,261,89],[256,90,261,92],[256,95,261,97],[256,96,261,98],[256,99,261,101,"_a"],[256,101,261,103],[256,102,261,104,"transport"],[256,111,261,113],[256,117,261,119],[256,121,261,123],[256,125,261,127,"_b"],[256,127,261,129],[256,132,261,134],[256,137,261,139],[256,138,261,140],[256,141,261,143],[256,146,261,148],[256,147,261,149],[256,150,261,152,"_b"],[256,152,261,154],[256,153,261,155,"writable"],[256,161,261,163],[257,6,262,8],[257,12,262,14,"isConnected"],[257,23,262,25],[257,26,262,28],[257,30,262,32],[257,31,262,33,"connected"],[257,40,262,42],[257,44,262,46],[257,46,262,48],[257,47,262,49,"_c"],[257,49,262,51],[257,52,262,54],[257,56,262,58],[257,57,262,59,"io"],[257,59,262,61],[257,60,262,62,"engine"],[257,66,262,68],[257,72,262,74],[257,76,262,78],[257,80,262,82,"_c"],[257,82,262,84],[257,87,262,89],[257,92,262,94],[257,93,262,95],[257,96,262,98],[257,101,262,103],[257,102,262,104],[257,105,262,107,"_c"],[257,107,262,109],[257,108,262,110,"_hasPingExpired"],[257,123,262,125],[257,124,262,126],[257,125,262,127],[257,126,262,128],[258,6,263,8],[258,12,263,14,"discardPacket"],[258,25,263,27],[258,28,263,30],[258,32,263,34],[258,33,263,35,"flags"],[258,38,263,40],[258,39,263,41,"volatile"],[258,47,263,49],[258,51,263,53],[258,52,263,54,"isTransportWritable"],[258,71,263,73],[259,6,264,8],[259,10,264,12,"discardPacket"],[259,23,264,25],[259,25,264,27],[259,26,265,8],[259,27,265,9],[259,33,266,13],[259,37,266,17,"isConnected"],[259,48,266,28],[259,50,266,30],[260,8,267,12],[260,12,267,16],[260,13,267,17,"notifyOutgoingListeners"],[260,36,267,40],[260,37,267,41,"packet"],[260,43,267,47],[260,44,267,48],[261,8,268,12],[261,12,268,16],[261,13,268,17,"packet"],[261,19,268,23],[261,20,268,24,"packet"],[261,26,268,30],[261,27,268,31],[262,6,269,8],[262,7,269,9],[262,13,270,13],[263,8,271,12],[263,12,271,16],[263,13,271,17,"sendBuffer"],[263,23,271,27],[263,24,271,28,"push"],[263,28,271,32],[263,29,271,33,"packet"],[263,35,271,39],[263,36,271,40],[264,6,272,8],[265,6,273,8],[265,10,273,12],[265,11,273,13,"flags"],[265,16,273,18],[265,19,273,21],[265,20,273,22],[265,21,273,23],[266,6,274,8],[266,13,274,15],[266,17,274,19],[267,4,275,4],[268,4,276,4],[269,0,277,0],[270,0,278,0],[271,4,279,4,"_registerAckCallback"],[271,24,279,24,"_registerAckCallback"],[271,25,279,25,"id"],[271,27,279,27],[271,29,279,29,"ack"],[271,32,279,32],[271,34,279,34],[272,6,280,8],[272,10,280,12,"_a"],[272,12,280,14],[273,6,281,8],[273,12,281,14,"timeout"],[273,19,281,21],[273,22,281,24],[273,23,281,25,"_a"],[273,25,281,27],[273,28,281,30],[273,32,281,34],[273,33,281,35,"flags"],[273,38,281,40],[273,39,281,41,"timeout"],[273,46,281,48],[273,52,281,54],[273,56,281,58],[273,60,281,62,"_a"],[273,62,281,64],[273,67,281,69],[273,72,281,74],[273,73,281,75],[273,76,281,78,"_a"],[273,78,281,80],[273,81,281,83],[273,85,281,87],[273,86,281,88,"_opts"],[273,91,281,93],[273,92,281,94,"ackTimeout"],[273,102,281,104],[274,6,282,8],[274,10,282,12,"timeout"],[274,17,282,19],[274,22,282,24,"undefined"],[274,31,282,33],[274,33,282,35],[275,8,283,12],[275,12,283,16],[275,13,283,17,"acks"],[275,17,283,21],[275,18,283,22,"id"],[275,20,283,24],[275,21,283,25],[275,24,283,28,"ack"],[275,27,283,31],[276,8,284,12],[277,6,285,8],[278,6,286,8],[279,6,287,8],[279,12,287,14,"timer"],[279,17,287,19],[279,20,287,22],[279,24,287,26],[279,25,287,27,"io"],[279,27,287,29],[279,28,287,30,"setTimeoutFn"],[279,40,287,42],[279,41,287,43],[279,47,287,49],[280,8,288,12],[280,15,288,19],[280,19,288,23],[280,20,288,24,"acks"],[280,24,288,28],[280,25,288,29,"id"],[280,27,288,31],[280,28,288,32],[281,8,289,12],[281,13,289,17],[281,17,289,21,"i"],[281,18,289,22],[281,21,289,25],[281,22,289,26],[281,24,289,28,"i"],[281,25,289,29],[281,28,289,32],[281,32,289,36],[281,33,289,37,"sendBuffer"],[281,43,289,47],[281,44,289,48,"length"],[281,50,289,54],[281,52,289,56,"i"],[281,53,289,57],[281,55,289,59],[281,57,289,61],[282,10,290,16],[282,14,290,20],[282,18,290,24],[282,19,290,25,"sendBuffer"],[282,29,290,35],[282,30,290,36,"i"],[282,31,290,37],[282,32,290,38],[282,33,290,39,"id"],[282,35,290,41],[282,40,290,46,"id"],[282,42,290,48],[282,44,290,50],[283,12,291,20],[283,16,291,24],[283,17,291,25,"sendBuffer"],[283,27,291,35],[283,28,291,36,"splice"],[283,34,291,42],[283,35,291,43,"i"],[283,36,291,44],[283,38,291,46],[283,39,291,47],[283,40,291,48],[284,10,292,16],[285,8,293,12],[286,8,294,12,"ack"],[286,11,294,15],[286,12,294,16,"call"],[286,16,294,20],[286,17,294,21],[286,21,294,25],[286,23,294,27],[286,27,294,31,"Error"],[286,32,294,36],[286,33,294,37],[286,58,294,62],[286,59,294,63],[286,60,294,64],[287,6,295,8],[287,7,295,9],[287,9,295,11,"timeout"],[287,16,295,18],[287,17,295,19],[288,6,296,8],[288,12,296,14,"fn"],[288,14,296,16],[288,17,296,19,"fn"],[288,18,296,20],[288,21,296,23,"args"],[288,25,296,27],[288,30,296,32],[289,8,297,12],[290,8,298,12],[290,12,298,16],[290,13,298,17,"io"],[290,15,298,19],[290,16,298,20,"clearTimeoutFn"],[290,30,298,34],[290,31,298,35,"timer"],[290,36,298,40],[290,37,298,41],[291,8,299,12,"ack"],[291,11,299,15],[291,12,299,16,"apply"],[291,17,299,21],[291,18,299,22],[291,22,299,26],[291,24,299,28,"args"],[291,28,299,32],[291,29,299,33],[292,6,300,8],[292,7,300,9],[293,6,301,8,"fn"],[293,8,301,10],[293,9,301,11,"withError"],[293,18,301,20],[293,21,301,23],[293,25,301,27],[294,6,302,8],[294,10,302,12],[294,11,302,13,"acks"],[294,15,302,17],[294,16,302,18,"id"],[294,18,302,20],[294,19,302,21],[294,22,302,24,"fn"],[294,24,302,26],[295,4,303,4],[296,4,304,4],[297,0,305,0],[298,0,306,0],[299,0,307,0],[300,0,308,0],[301,0,309,0],[302,0,310,0],[303,0,311,0],[304,0,312,0],[305,0,313,0],[306,0,314,0],[307,0,315,0],[308,0,316,0],[309,0,317,0],[310,0,318,0],[311,0,319,0],[312,4,320,4,"emitWithAck"],[312,15,320,15,"emitWithAck"],[312,16,320,16,"ev"],[312,18,320,18],[312,20,320,20],[312,23,320,23,"args"],[312,27,320,27],[312,29,320,29],[313,6,321,8],[313,13,321,15],[313,17,321,19,"Promise"],[313,24,321,26],[313,25,321,27],[313,26,321,28,"resolve"],[313,33,321,35],[313,35,321,37,"reject"],[313,41,321,43],[313,46,321,48],[314,8,322,12],[314,14,322,18,"fn"],[314,16,322,20],[314,19,322,23,"fn"],[314,20,322,24,"arg1"],[314,24,322,28],[314,26,322,30,"arg2"],[314,30,322,34],[314,35,322,39],[315,10,323,16],[315,17,323,23,"arg1"],[315,21,323,27],[315,24,323,30,"reject"],[315,30,323,36],[315,31,323,37,"arg1"],[315,35,323,41],[315,36,323,42],[315,39,323,45,"resolve"],[315,46,323,52],[315,47,323,53,"arg2"],[315,51,323,57],[315,52,323,58],[316,8,324,12],[316,9,324,13],[317,8,325,12,"fn"],[317,10,325,14],[317,11,325,15,"withError"],[317,20,325,24],[317,23,325,27],[317,27,325,31],[318,8,326,12,"args"],[318,12,326,16],[318,13,326,17,"push"],[318,17,326,21],[318,18,326,22,"fn"],[318,20,326,24],[318,21,326,25],[319,8,327,12],[319,12,327,16],[319,13,327,17,"emit"],[319,17,327,21],[319,18,327,22,"ev"],[319,20,327,24],[319,22,327,26],[319,25,327,29,"args"],[319,29,327,33],[319,30,327,34],[320,6,328,8],[320,7,328,9],[320,8,328,10],[321,4,329,4],[322,4,330,4],[323,0,331,0],[324,0,332,0],[325,0,333,0],[326,0,334,0],[327,4,335,4,"_addToQueue"],[327,15,335,15,"_addToQueue"],[327,16,335,16,"args"],[327,20,335,20],[327,22,335,22],[328,6,336,8],[328,10,336,12,"ack"],[328,13,336,15],[329,6,337,8],[329,10,337,12],[329,17,337,19,"args"],[329,21,337,23],[329,22,337,24,"args"],[329,26,337,28],[329,27,337,29,"length"],[329,33,337,35],[329,36,337,38],[329,37,337,39],[329,38,337,40],[329,43,337,45],[329,53,337,55],[329,55,337,57],[330,8,338,12,"ack"],[330,11,338,15],[330,14,338,18,"args"],[330,18,338,22],[330,19,338,23,"pop"],[330,22,338,26],[330,23,338,27],[330,24,338,28],[331,6,339,8],[332,6,340,8],[332,12,340,14,"packet"],[332,18,340,20],[332,21,340,23],[333,8,341,12,"id"],[333,10,341,14],[333,12,341,16],[333,16,341,20],[333,17,341,21,"_queueSeq"],[333,26,341,30],[333,28,341,32],[334,8,342,12,"tryCount"],[334,16,342,20],[334,18,342,22],[334,19,342,23],[335,8,343,12,"pending"],[335,15,343,19],[335,17,343,21],[335,22,343,26],[336,8,344,12,"args"],[336,12,344,16],[337,8,345,12,"flags"],[337,13,345,17],[337,15,345,19,"Object"],[337,21,345,25],[337,22,345,26,"assign"],[337,28,345,32],[337,29,345,33],[338,10,345,35,"fromQueue"],[338,19,345,44],[338,21,345,46],[339,8,345,51],[339,9,345,52],[339,11,345,54],[339,15,345,58],[339,16,345,59,"flags"],[339,21,345,64],[340,6,346,8],[340,7,346,9],[341,6,347,8,"args"],[341,10,347,12],[341,11,347,13,"push"],[341,15,347,17],[341,16,347,18],[341,17,347,19,"err"],[341,20,347,22],[341,22,347,24],[341,25,347,27,"responseArgs"],[341,37,347,39],[341,42,347,44],[342,8,348,12],[342,12,348,16,"packet"],[342,18,348,22],[342,23,348,27],[342,27,348,31],[342,28,348,32,"_queue"],[342,34,348,38],[342,35,348,39],[342,36,348,40],[342,37,348,41],[342,39,348,43],[343,10,349,16],[344,10,350,16],[345,8,351,12],[346,8,352,12],[346,14,352,18,"hasError"],[346,22,352,26],[346,25,352,29,"err"],[346,28,352,32],[346,33,352,37],[346,37,352,41],[347,8,353,12],[347,12,353,16,"hasError"],[347,20,353,24],[347,22,353,26],[348,10,354,16],[348,14,354,20,"packet"],[348,20,354,26],[348,21,354,27,"tryCount"],[348,29,354,35],[348,32,354,38],[348,36,354,42],[348,37,354,43,"_opts"],[348,42,354,48],[348,43,354,49,"retries"],[348,50,354,56],[348,52,354,58],[349,12,355,20],[349,16,355,24],[349,17,355,25,"_queue"],[349,23,355,31],[349,24,355,32,"shift"],[349,29,355,37],[349,30,355,38],[349,31,355,39],[350,12,356,20],[350,16,356,24,"ack"],[350,19,356,27],[350,21,356,29],[351,14,357,24,"ack"],[351,17,357,27],[351,18,357,28,"err"],[351,21,357,31],[351,22,357,32],[352,12,358,20],[353,10,359,16],[354,8,360,12],[354,9,360,13],[354,15,361,17],[355,10,362,16],[355,14,362,20],[355,15,362,21,"_queue"],[355,21,362,27],[355,22,362,28,"shift"],[355,27,362,33],[355,28,362,34],[355,29,362,35],[356,10,363,16],[356,14,363,20,"ack"],[356,17,363,23],[356,19,363,25],[357,12,364,20,"ack"],[357,15,364,23],[357,16,364,24],[357,20,364,28],[357,22,364,30],[357,25,364,33,"responseArgs"],[357,37,364,45],[357,38,364,46],[358,10,365,16],[359,8,366,12],[360,8,367,12,"packet"],[360,14,367,18],[360,15,367,19,"pending"],[360,22,367,26],[360,25,367,29],[360,30,367,34],[361,8,368,12],[361,15,368,19],[361,19,368,23],[361,20,368,24,"_drainQueue"],[361,31,368,35],[361,32,368,36],[361,33,368,37],[362,6,369,8],[362,7,369,9],[362,8,369,10],[363,6,370,8],[363,10,370,12],[363,11,370,13,"_queue"],[363,17,370,19],[363,18,370,20,"push"],[363,22,370,24],[363,23,370,25,"packet"],[363,29,370,31],[363,30,370,32],[364,6,371,8],[364,10,371,12],[364,11,371,13,"_drainQueue"],[364,22,371,24],[364,23,371,25],[364,24,371,26],[365,4,372,4],[366,4,373,4],[367,0,374,0],[368,0,375,0],[369,0,376,0],[370,0,377,0],[371,0,378,0],[372,4,379,4,"_drainQueue"],[372,15,379,15,"_drainQueue"],[372,16,379,16,"force"],[372,21,379,21],[372,24,379,24],[372,29,379,29],[372,31,379,31],[373,6,380,8],[373,10,380,12],[373,11,380,13],[373,15,380,17],[373,16,380,18,"connected"],[373,25,380,27],[373,29,380,31],[373,33,380,35],[373,34,380,36,"_queue"],[373,40,380,42],[373,41,380,43,"length"],[373,47,380,49],[373,52,380,54],[373,53,380,55],[373,55,380,57],[374,8,381,12],[375,6,382,8],[376,6,383,8],[376,12,383,14,"packet"],[376,18,383,20],[376,21,383,23],[376,25,383,27],[376,26,383,28,"_queue"],[376,32,383,34],[376,33,383,35],[376,34,383,36],[376,35,383,37],[377,6,384,8],[377,10,384,12,"packet"],[377,16,384,18],[377,17,384,19,"pending"],[377,24,384,26],[377,28,384,30],[377,29,384,31,"force"],[377,34,384,36],[377,36,384,38],[378,8,385,12],[379,6,386,8],[380,6,387,8,"packet"],[380,12,387,14],[380,13,387,15,"pending"],[380,20,387,22],[380,23,387,25],[380,27,387,29],[381,6,388,8,"packet"],[381,12,388,14],[381,13,388,15,"tryCount"],[381,21,388,23],[381,23,388,25],[382,6,389,8],[382,10,389,12],[382,11,389,13,"flags"],[382,16,389,18],[382,19,389,21,"packet"],[382,25,389,27],[382,26,389,28,"flags"],[382,31,389,33],[383,6,390,8],[383,10,390,12],[383,11,390,13,"emit"],[383,15,390,17],[383,16,390,18,"apply"],[383,21,390,23],[383,22,390,24],[383,26,390,28],[383,28,390,30,"packet"],[383,34,390,36],[383,35,390,37,"args"],[383,39,390,41],[383,40,390,42],[384,4,391,4],[385,4,392,4],[386,0,393,0],[387,0,394,0],[388,0,395,0],[389,0,396,0],[390,0,397,0],[391,4,398,4,"packet"],[391,10,398,10,"packet"],[391,11,398,11,"packet"],[391,17,398,17],[391,19,398,19],[392,6,399,8,"packet"],[392,12,399,14],[392,13,399,15,"nsp"],[392,16,399,18],[392,19,399,21],[392,23,399,25],[392,24,399,26,"nsp"],[392,27,399,29],[393,6,400,8],[393,10,400,12],[393,11,400,13,"io"],[393,13,400,15],[393,14,400,16,"_packet"],[393,21,400,23],[393,22,400,24,"packet"],[393,28,400,30],[393,29,400,31],[394,4,401,4],[395,4,402,4],[396,0,403,0],[397,0,404,0],[398,0,405,0],[399,0,406,0],[400,4,407,4,"onopen"],[400,10,407,10,"onopen"],[400,11,407,10],[400,13,407,13],[401,6,408,8],[401,10,408,12],[401,17,408,19],[401,21,408,23],[401,22,408,24,"auth"],[401,26,408,28],[401,30,408,32],[401,40,408,42],[401,42,408,44],[402,8,409,12],[402,12,409,16],[402,13,409,17,"auth"],[402,17,409,21],[402,18,409,23,"data"],[402,22,409,27],[402,26,409,32],[403,10,410,16],[403,14,410,20],[403,15,410,21,"_sendConnectPacket"],[403,33,410,39],[403,34,410,40,"data"],[403,38,410,44],[403,39,410,45],[404,8,411,12],[404,9,411,13],[404,10,411,14],[405,6,412,8],[405,7,412,9],[405,13,413,13],[406,8,414,12],[406,12,414,16],[406,13,414,17,"_sendConnectPacket"],[406,31,414,35],[406,32,414,36],[406,36,414,40],[406,37,414,41,"auth"],[406,41,414,45],[406,42,414,46],[407,6,415,8],[408,4,416,4],[409,4,417,4],[410,0,418,0],[411,0,419,0],[412,0,420,0],[413,0,421,0],[414,0,422,0],[415,4,423,4,"_sendConnectPacket"],[415,22,423,22,"_sendConnectPacket"],[415,23,423,23,"data"],[415,27,423,27],[415,29,423,29],[416,6,424,8],[416,10,424,12],[416,11,424,13,"packet"],[416,17,424,19],[416,18,424,20],[417,8,425,12,"type"],[417,12,425,16],[417,14,425,18,"PacketType"],[417,32,425,28],[417,33,425,29,"CONNECT"],[417,40,425,36],[418,8,426,12,"data"],[418,12,426,16],[418,14,426,18],[418,18,426,22],[418,19,426,23,"_pid"],[418,23,426,27],[418,26,427,18,"Object"],[418,32,427,24],[418,33,427,25,"assign"],[418,39,427,31],[418,40,427,32],[419,10,427,34,"pid"],[419,13,427,37],[419,15,427,39],[419,19,427,43],[419,20,427,44,"_pid"],[419,24,427,48],[420,10,427,50,"offset"],[420,16,427,56],[420,18,427,58],[420,22,427,62],[420,23,427,63,"_lastOffset"],[421,8,427,75],[421,9,427,76],[421,11,427,78,"data"],[421,15,427,82],[421,16,427,83],[421,19,428,18,"data"],[422,6,429,8],[422,7,429,9],[422,8,429,10],[423,4,430,4],[424,4,431,4],[425,0,432,0],[426,0,433,0],[427,0,434,0],[428,0,435,0],[429,0,436,0],[430,4,437,4,"onerror"],[430,11,437,11,"onerror"],[430,12,437,12,"err"],[430,15,437,15],[430,17,437,17],[431,6,438,8],[431,10,438,12],[431,11,438,13],[431,15,438,17],[431,16,438,18,"connected"],[431,25,438,27],[431,27,438,29],[432,8,439,12],[432,12,439,16],[432,13,439,17,"emitReserved"],[432,25,439,29],[432,26,439,30],[432,41,439,45],[432,43,439,47,"err"],[432,46,439,50],[432,47,439,51],[433,6,440,8],[434,4,441,4],[435,4,442,4],[436,0,443,0],[437,0,444,0],[438,0,445,0],[439,0,446,0],[440,0,447,0],[441,0,448,0],[442,4,449,4,"onclose"],[442,11,449,11,"onclose"],[442,12,449,12,"reason"],[442,18,449,18],[442,20,449,20,"description"],[442,31,449,31],[442,33,449,33],[443,6,450,8],[443,10,450,12],[443,11,450,13,"connected"],[443,20,450,22],[443,23,450,25],[443,28,450,30],[444,6,451,8],[444,13,451,15],[444,17,451,19],[444,18,451,20,"id"],[444,20,451,22],[445,6,452,8],[445,10,452,12],[445,11,452,13,"emitReserved"],[445,23,452,25],[445,24,452,26],[445,36,452,38],[445,38,452,40,"reason"],[445,44,452,46],[445,46,452,48,"description"],[445,57,452,59],[445,58,452,60],[446,6,453,8],[446,10,453,12],[446,11,453,13,"_clearAcks"],[446,21,453,23],[446,22,453,24],[446,23,453,25],[447,4,454,4],[448,4,455,4],[449,0,456,0],[450,0,457,0],[451,0,458,0],[452,0,459,0],[453,0,460,0],[454,4,461,4,"_clearAcks"],[454,14,461,14,"_clearAcks"],[454,15,461,14],[454,17,461,17],[455,6,462,8,"Object"],[455,12,462,14],[455,13,462,15,"keys"],[455,17,462,19],[455,18,462,20],[455,22,462,24],[455,23,462,25,"acks"],[455,27,462,29],[455,28,462,30],[455,29,462,31,"forEach"],[455,36,462,38],[455,37,462,40,"id"],[455,39,462,42],[455,43,462,47],[456,8,463,12],[456,14,463,18,"isBuffered"],[456,24,463,28],[456,27,463,31],[456,31,463,35],[456,32,463,36,"sendBuffer"],[456,42,463,46],[456,43,463,47,"some"],[456,47,463,51],[456,48,463,53,"packet"],[456,54,463,59],[456,58,463,64,"String"],[456,64,463,70],[456,65,463,71,"packet"],[456,71,463,77],[456,72,463,78,"id"],[456,74,463,80],[456,75,463,81],[456,80,463,86,"id"],[456,82,463,88],[456,83,463,89],[457,8,464,12],[457,12,464,16],[457,13,464,17,"isBuffered"],[457,23,464,27],[457,25,464,29],[458,10,465,16],[459,10,466,16],[459,16,466,22,"ack"],[459,19,466,25],[459,22,466,28],[459,26,466,32],[459,27,466,33,"acks"],[459,31,466,37],[459,32,466,38,"id"],[459,34,466,40],[459,35,466,41],[460,10,467,16],[460,17,467,23],[460,21,467,27],[460,22,467,28,"acks"],[460,26,467,32],[460,27,467,33,"id"],[460,29,467,35],[460,30,467,36],[461,10,468,16],[461,14,468,20,"ack"],[461,17,468,23],[461,18,468,24,"withError"],[461,27,468,33],[461,29,468,35],[462,12,469,20,"ack"],[462,15,469,23],[462,16,469,24,"call"],[462,20,469,28],[462,21,469,29],[462,25,469,33],[462,27,469,35],[462,31,469,39,"Error"],[462,36,469,44],[462,37,469,45],[462,67,469,75],[462,68,469,76],[462,69,469,77],[463,10,470,16],[464,8,471,12],[465,6,472,8],[465,7,472,9],[465,8,472,10],[466,4,473,4],[467,4,474,4],[468,0,475,0],[469,0,476,0],[470,0,477,0],[471,0,478,0],[472,0,479,0],[473,4,480,4,"onpacket"],[473,12,480,12,"onpacket"],[473,13,480,13,"packet"],[473,19,480,19],[473,21,480,21],[474,6,481,8],[474,12,481,14,"sameNamespace"],[474,25,481,27],[474,28,481,30,"packet"],[474,34,481,36],[474,35,481,37,"nsp"],[474,38,481,40],[474,43,481,45],[474,47,481,49],[474,48,481,50,"nsp"],[474,51,481,53],[475,6,482,8],[475,10,482,12],[475,11,482,13,"sameNamespace"],[475,24,482,26],[475,26,483,12],[476,6,484,8],[476,14,484,16,"packet"],[476,20,484,22],[476,21,484,23,"type"],[476,25,484,27],[477,8,485,12],[477,13,485,17,"PacketType"],[477,31,485,27],[477,32,485,28,"CONNECT"],[477,39,485,35],[478,10,486,16],[478,14,486,20,"packet"],[478,20,486,26],[478,21,486,27,"data"],[478,25,486,31],[478,29,486,35,"packet"],[478,35,486,41],[478,36,486,42,"data"],[478,40,486,46],[478,41,486,47,"sid"],[478,44,486,50],[478,46,486,52],[479,12,487,20],[479,16,487,24],[479,17,487,25,"onconnect"],[479,26,487,34],[479,27,487,35,"packet"],[479,33,487,41],[479,34,487,42,"data"],[479,38,487,46],[479,39,487,47,"sid"],[479,42,487,50],[479,44,487,52,"packet"],[479,50,487,58],[479,51,487,59,"data"],[479,55,487,63],[479,56,487,64,"pid"],[479,59,487,67],[479,60,487,68],[480,10,488,16],[480,11,488,17],[480,17,489,21],[481,12,490,20],[481,16,490,24],[481,17,490,25,"emitReserved"],[481,29,490,37],[481,30,490,38],[481,45,490,53],[481,47,490,55],[481,51,490,59,"Error"],[481,56,490,64],[481,57,490,65],[481,244,490,252],[481,245,490,253],[481,246,490,254],[482,10,491,16],[483,10,492,16],[484,8,493,12],[484,13,493,17,"PacketType"],[484,31,493,27],[484,32,493,28,"EVENT"],[484,37,493,33],[485,8,494,12],[485,13,494,17,"PacketType"],[485,31,494,27],[485,32,494,28,"BINARY_EVENT"],[485,44,494,40],[486,10,495,16],[486,14,495,20],[486,15,495,21,"onevent"],[486,22,495,28],[486,23,495,29,"packet"],[486,29,495,35],[486,30,495,36],[487,10,496,16],[488,8,497,12],[488,13,497,17,"PacketType"],[488,31,497,27],[488,32,497,28,"ACK"],[488,35,497,31],[489,8,498,12],[489,13,498,17,"PacketType"],[489,31,498,27],[489,32,498,28,"BINARY_ACK"],[489,42,498,38],[490,10,499,16],[490,14,499,20],[490,15,499,21,"onack"],[490,20,499,26],[490,21,499,27,"packet"],[490,27,499,33],[490,28,499,34],[491,10,500,16],[492,8,501,12],[492,13,501,17,"PacketType"],[492,31,501,27],[492,32,501,28,"DISCONNECT"],[492,42,501,38],[493,10,502,16],[493,14,502,20],[493,15,502,21,"ondisconnect"],[493,27,502,33],[493,28,502,34],[493,29,502,35],[494,10,503,16],[495,8,504,12],[495,13,504,17,"PacketType"],[495,31,504,27],[495,32,504,28,"CONNECT_ERROR"],[495,45,504,41],[496,10,505,16],[496,14,505,20],[496,15,505,21,"destroy"],[496,22,505,28],[496,23,505,29],[496,24,505,30],[497,10,506,16],[497,16,506,22,"err"],[497,19,506,25],[497,22,506,28],[497,26,506,32,"Error"],[497,31,506,37],[497,32,506,38,"packet"],[497,38,506,44],[497,39,506,45,"data"],[497,43,506,49],[497,44,506,50,"message"],[497,51,506,57],[497,52,506,58],[498,10,507,16],[499,10,508,16,"err"],[499,13,508,19],[499,14,508,20,"data"],[499,18,508,24],[499,21,508,27,"packet"],[499,27,508,33],[499,28,508,34,"data"],[499,32,508,38],[499,33,508,39,"data"],[499,37,508,43],[500,10,509,16],[500,14,509,20],[500,15,509,21,"emitReserved"],[500,27,509,33],[500,28,509,34],[500,43,509,49],[500,45,509,51,"err"],[500,48,509,54],[500,49,509,55],[501,10,510,16],[502,6,511,8],[503,4,512,4],[504,4,513,4],[505,0,514,0],[506,0,515,0],[507,0,516,0],[508,0,517,0],[509,0,518,0],[510,4,519,4,"onevent"],[510,11,519,11,"onevent"],[510,12,519,12,"packet"],[510,18,519,18],[510,20,519,20],[511,6,520,8],[511,12,520,14,"args"],[511,16,520,18],[511,19,520,21,"packet"],[511,25,520,27],[511,26,520,28,"data"],[511,30,520,32],[511,34,520,36],[511,36,520,38],[512,6,521,8],[512,10,521,12],[512,14,521,16],[512,18,521,20,"packet"],[512,24,521,26],[512,25,521,27,"id"],[512,27,521,29],[512,29,521,31],[513,8,522,12,"args"],[513,12,522,16],[513,13,522,17,"push"],[513,17,522,21],[513,18,522,22],[513,22,522,26],[513,23,522,27,"ack"],[513,26,522,30],[513,27,522,31,"packet"],[513,33,522,37],[513,34,522,38,"id"],[513,36,522,40],[513,37,522,41],[513,38,522,42],[514,6,523,8],[515,6,524,8],[515,10,524,12],[515,14,524,16],[515,15,524,17,"connected"],[515,24,524,26],[515,26,524,28],[516,8,525,12],[516,12,525,16],[516,13,525,17,"emitEvent"],[516,22,525,26],[516,23,525,27,"args"],[516,27,525,31],[516,28,525,32],[517,6,526,8],[517,7,526,9],[517,13,527,13],[518,8,528,12],[518,12,528,16],[518,13,528,17,"receiveBuffer"],[518,26,528,30],[518,27,528,31,"push"],[518,31,528,35],[518,32,528,36,"Object"],[518,38,528,42],[518,39,528,43,"freeze"],[518,45,528,49],[518,46,528,50,"args"],[518,50,528,54],[518,51,528,55],[518,52,528,56],[519,6,529,8],[520,4,530,4],[521,4,531,4,"emitEvent"],[521,13,531,13,"emitEvent"],[521,14,531,14,"args"],[521,18,531,18],[521,20,531,20],[522,6,532,8],[522,10,532,12],[522,14,532,16],[522,15,532,17,"_anyListeners"],[522,28,532,30],[522,32,532,34],[522,36,532,38],[522,37,532,39,"_anyListeners"],[522,50,532,52],[522,51,532,53,"length"],[522,57,532,59],[522,59,532,61],[523,8,533,12],[523,14,533,18,"listeners"],[523,23,533,27],[523,26,533,30],[523,30,533,34],[523,31,533,35,"_anyListeners"],[523,44,533,48],[523,45,533,49,"slice"],[523,50,533,54],[523,51,533,55],[523,52,533,56],[524,8,534,12],[524,13,534,17],[524,19,534,23,"listener"],[524,27,534,31],[524,31,534,35,"listeners"],[524,40,534,44],[524,42,534,46],[525,10,535,16,"listener"],[525,18,535,24],[525,19,535,25,"apply"],[525,24,535,30],[525,25,535,31],[525,29,535,35],[525,31,535,37,"args"],[525,35,535,41],[525,36,535,42],[526,8,536,12],[527,6,537,8],[528,6,538,8],[528,11,538,13],[528,12,538,14,"emit"],[528,16,538,18],[528,17,538,19,"apply"],[528,22,538,24],[528,23,538,25],[528,27,538,29],[528,29,538,31,"args"],[528,33,538,35],[528,34,538,36],[529,6,539,8],[529,10,539,12],[529,14,539,16],[529,15,539,17,"_pid"],[529,19,539,21],[529,23,539,25,"args"],[529,27,539,29],[529,28,539,30,"length"],[529,34,539,36],[529,38,539,40],[529,45,539,47,"args"],[529,49,539,51],[529,50,539,52,"args"],[529,54,539,56],[529,55,539,57,"length"],[529,61,539,63],[529,64,539,66],[529,65,539,67],[529,66,539,68],[529,71,539,73],[529,79,539,81],[529,81,539,83],[530,8,540,12],[530,12,540,16],[530,13,540,17,"_lastOffset"],[530,24,540,28],[530,27,540,31,"args"],[530,31,540,35],[530,32,540,36,"args"],[530,36,540,40],[530,37,540,41,"length"],[530,43,540,47],[530,46,540,50],[530,47,540,51],[530,48,540,52],[531,6,541,8],[532,4,542,4],[533,4,543,4],[534,0,544,0],[535,0,545,0],[536,0,546,0],[537,0,547,0],[538,4,548,4,"ack"],[538,7,548,7,"ack"],[538,8,548,8,"id"],[538,10,548,10],[538,12,548,12],[539,6,549,8],[539,12,549,14,"self"],[539,16,549,18],[539,19,549,21],[539,23,549,25],[540,6,550,8],[540,10,550,12,"sent"],[540,14,550,16],[540,17,550,19],[540,22,550,24],[541,6,551,8],[541,13,551,15],[541,23,551,25],[541,26,551,28,"args"],[541,30,551,32],[541,32,551,34],[542,8,552,12],[543,8,553,12],[543,12,553,16,"sent"],[543,16,553,20],[543,18,554,16],[544,8,555,12,"sent"],[544,12,555,16],[544,15,555,19],[544,19,555,23],[545,8,556,12,"self"],[545,12,556,16],[545,13,556,17,"packet"],[545,19,556,23],[545,20,556,24],[546,10,557,16,"type"],[546,14,557,20],[546,16,557,22,"PacketType"],[546,34,557,32],[546,35,557,33,"ACK"],[546,38,557,36],[547,10,558,16,"id"],[547,12,558,18],[547,14,558,20,"id"],[547,16,558,22],[548,10,559,16,"data"],[548,14,559,20],[548,16,559,22,"args"],[549,8,560,12],[549,9,560,13],[549,10,560,14],[550,6,561,8],[550,7,561,9],[551,4,562,4],[552,4,563,4],[553,0,564,0],[554,0,565,0],[555,0,566,0],[556,0,567,0],[557,0,568,0],[558,4,569,4,"onack"],[558,9,569,9,"onack"],[558,10,569,10,"packet"],[558,16,569,16],[558,18,569,18],[559,6,570,8],[559,12,570,14,"ack"],[559,15,570,17],[559,18,570,20],[559,22,570,24],[559,23,570,25,"acks"],[559,27,570,29],[559,28,570,30,"packet"],[559,34,570,36],[559,35,570,37,"id"],[559,37,570,39],[559,38,570,40],[560,6,571,8],[560,10,571,12],[560,17,571,19,"ack"],[560,20,571,22],[560,25,571,27],[560,35,571,37],[560,37,571,39],[561,8,572,12],[562,6,573,8],[563,6,574,8],[563,13,574,15],[563,17,574,19],[563,18,574,20,"acks"],[563,22,574,24],[563,23,574,25,"packet"],[563,29,574,31],[563,30,574,32,"id"],[563,32,574,34],[563,33,574,35],[564,6,575,8],[565,6,576,8],[565,10,576,12,"ack"],[565,13,576,15],[565,14,576,16,"withError"],[565,23,576,25],[565,25,576,27],[566,8,577,12,"packet"],[566,14,577,18],[566,15,577,19,"data"],[566,19,577,23],[566,20,577,24,"unshift"],[566,27,577,31],[566,28,577,32],[566,32,577,36],[566,33,577,37],[567,6,578,8],[568,6,579,8],[569,6,580,8,"ack"],[569,9,580,11],[569,10,580,12,"apply"],[569,15,580,17],[569,16,580,18],[569,20,580,22],[569,22,580,24,"packet"],[569,28,580,30],[569,29,580,31,"data"],[569,33,580,35],[569,34,580,36],[570,4,581,4],[571,4,582,4],[572,0,583,0],[573,0,584,0],[574,0,585,0],[575,0,586,0],[576,4,587,4,"onconnect"],[576,13,587,13,"onconnect"],[576,14,587,14,"id"],[576,16,587,16],[576,18,587,18,"pid"],[576,21,587,21],[576,23,587,23],[577,6,588,8],[577,10,588,12],[577,11,588,13,"id"],[577,13,588,15],[577,16,588,18,"id"],[577,18,588,20],[578,6,589,8],[578,10,589,12],[578,11,589,13,"recovered"],[578,20,589,22],[578,23,589,25,"pid"],[578,26,589,28],[578,30,589,32],[578,34,589,36],[578,35,589,37,"_pid"],[578,39,589,41],[578,44,589,46,"pid"],[578,47,589,49],[579,6,590,8],[579,10,590,12],[579,11,590,13,"_pid"],[579,15,590,17],[579,18,590,20,"pid"],[579,21,590,23],[579,22,590,24],[579,23,590,25],[580,6,591,8],[580,10,591,12],[580,11,591,13,"connected"],[580,20,591,22],[580,23,591,25],[580,27,591,29],[581,6,592,8],[581,10,592,12],[581,11,592,13,"emitBuffered"],[581,23,592,25],[581,24,592,26],[581,25,592,27],[582,6,593,8],[582,10,593,12],[582,11,593,13,"emitReserved"],[582,23,593,25],[582,24,593,26],[582,33,593,35],[582,34,593,36],[583,6,594,8],[583,10,594,12],[583,11,594,13,"_drainQueue"],[583,22,594,24],[583,23,594,25],[583,27,594,29],[583,28,594,30],[584,4,595,4],[585,4,596,4],[586,0,597,0],[587,0,598,0],[588,0,599,0],[589,0,600,0],[590,4,601,4,"emitBuffered"],[590,16,601,16,"emitBuffered"],[590,17,601,16],[590,19,601,19],[591,6,602,8],[591,10,602,12],[591,11,602,13,"receiveBuffer"],[591,24,602,26],[591,25,602,27,"forEach"],[591,32,602,34],[591,33,602,36,"args"],[591,37,602,40],[591,41,602,45],[591,45,602,49],[591,46,602,50,"emitEvent"],[591,55,602,59],[591,56,602,60,"args"],[591,60,602,64],[591,61,602,65],[591,62,602,66],[592,6,603,8],[592,10,603,12],[592,11,603,13,"receiveBuffer"],[592,24,603,26],[592,27,603,29],[592,29,603,31],[593,6,604,8],[593,10,604,12],[593,11,604,13,"sendBuffer"],[593,21,604,23],[593,22,604,24,"forEach"],[593,29,604,31],[593,30,604,33,"packet"],[593,36,604,39],[593,40,604,44],[594,8,605,12],[594,12,605,16],[594,13,605,17,"notifyOutgoingListeners"],[594,36,605,40],[594,37,605,41,"packet"],[594,43,605,47],[594,44,605,48],[595,8,606,12],[595,12,606,16],[595,13,606,17,"packet"],[595,19,606,23],[595,20,606,24,"packet"],[595,26,606,30],[595,27,606,31],[596,6,607,8],[596,7,607,9],[596,8,607,10],[597,6,608,8],[597,10,608,12],[597,11,608,13,"sendBuffer"],[597,21,608,23],[597,24,608,26],[597,26,608,28],[598,4,609,4],[599,4,610,4],[600,0,611,0],[601,0,612,0],[602,0,613,0],[603,0,614,0],[604,4,615,4,"ondisconnect"],[604,16,615,16,"ondisconnect"],[604,17,615,16],[604,19,615,19],[605,6,616,8],[605,10,616,12],[605,11,616,13,"destroy"],[605,18,616,20],[605,19,616,21],[605,20,616,22],[606,6,617,8],[606,10,617,12],[606,11,617,13,"onclose"],[606,18,617,20],[606,19,617,21],[606,41,617,43],[606,42,617,44],[607,4,618,4],[608,4,619,4],[609,0,620,0],[610,0,621,0],[611,0,622,0],[612,0,623,0],[613,0,624,0],[614,0,625,0],[615,4,626,4,"destroy"],[615,11,626,11,"destroy"],[615,12,626,11],[615,14,626,14],[616,6,627,8],[616,10,627,12],[616,14,627,16],[616,15,627,17,"subs"],[616,19,627,21],[616,21,627,23],[617,8,628,12],[618,8,629,12],[618,12,629,16],[618,13,629,17,"subs"],[618,17,629,21],[618,18,629,22,"forEach"],[618,25,629,29],[618,26,629,31,"subDestroy"],[618,36,629,41],[618,40,629,46,"subDestroy"],[618,50,629,56],[618,51,629,57],[618,52,629,58],[618,53,629,59],[619,8,630,12],[619,12,630,16],[619,13,630,17,"subs"],[619,17,630,21],[619,20,630,24,"undefined"],[619,29,630,33],[620,6,631,8],[621,6,632,8],[621,10,632,12],[621,11,632,13,"io"],[621,13,632,15],[621,14,632,16],[621,24,632,26],[621,25,632,27],[621,26,632,28],[621,30,632,32],[621,31,632,33],[622,4,633,4],[623,4,634,4],[624,0,635,0],[625,0,636,0],[626,0,637,0],[627,0,638,0],[628,0,639,0],[629,0,640,0],[630,0,641,0],[631,0,642,0],[632,0,643,0],[633,0,644,0],[634,0,645,0],[635,0,646,0],[636,0,647,0],[637,0,648,0],[638,0,649,0],[639,4,650,4,"disconnect"],[639,14,650,14,"disconnect"],[639,15,650,14],[639,17,650,17],[640,6,651,8],[640,10,651,12],[640,14,651,16],[640,15,651,17,"connected"],[640,24,651,26],[640,26,651,28],[641,8,652,12],[641,12,652,16],[641,13,652,17,"packet"],[641,19,652,23],[641,20,652,24],[642,10,652,26,"type"],[642,14,652,30],[642,16,652,32,"PacketType"],[642,34,652,42],[642,35,652,43,"DISCONNECT"],[643,8,652,54],[643,9,652,55],[643,10,652,56],[644,6,653,8],[645,6,654,8],[646,6,655,8],[646,10,655,12],[646,11,655,13,"destroy"],[646,18,655,20],[646,19,655,21],[646,20,655,22],[647,6,656,8],[647,10,656,12],[647,14,656,16],[647,15,656,17,"connected"],[647,24,656,26],[647,26,656,28],[648,8,657,12],[649,8,658,12],[649,12,658,16],[649,13,658,17,"onclose"],[649,20,658,24],[649,21,658,25],[649,43,658,47],[649,44,658,48],[650,6,659,8],[651,6,660,8],[651,13,660,15],[651,17,660,19],[652,4,661,4],[653,4,662,4],[654,0,663,0],[655,0,664,0],[656,0,665,0],[657,0,666,0],[658,4,667,4,"close"],[658,9,667,9,"close"],[658,10,667,9],[658,12,667,12],[659,6,668,8],[659,13,668,15],[659,17,668,19],[659,18,668,20,"disconnect"],[659,28,668,30],[659,29,668,31],[659,30,668,32],[660,4,669,4],[661,4,670,4],[662,0,671,0],[663,0,672,0],[664,0,673,0],[665,0,674,0],[666,0,675,0],[667,0,676,0],[668,0,677,0],[669,0,678,0],[670,4,679,4,"compress"],[670,12,679,12,"compress"],[670,13,679,13,"compress"],[670,21,679,21],[670,23,679,23],[671,6,680,8],[671,10,680,12],[671,11,680,13,"flags"],[671,16,680,18],[671,17,680,19,"compress"],[671,25,680,27],[671,28,680,30,"compress"],[671,36,680,38],[672,6,681,8],[672,13,681,15],[672,17,681,19],[673,4,682,4],[674,4,683,4],[675,0,684,0],[676,0,685,0],[677,0,686,0],[678,0,687,0],[679,0,688,0],[680,0,689,0],[681,0,690,0],[682,0,691,0],[683,4,692,4],[683,8,692,8,"volatile"],[683,16,692,16,"volatile"],[683,17,692,16],[683,19,692,19],[684,6,693,8],[684,10,693,12],[684,11,693,13,"flags"],[684,16,693,18],[684,17,693,19,"volatile"],[684,25,693,27],[684,28,693,30],[684,32,693,34],[685,6,694,8],[685,13,694,15],[685,17,694,19],[686,4,695,4],[687,4,696,4],[688,0,697,0],[689,0,698,0],[690,0,699,0],[691,0,700,0],[692,0,701,0],[693,0,702,0],[694,0,703,0],[695,0,704,0],[696,0,705,0],[697,0,706,0],[698,0,707,0],[699,0,708,0],[700,4,709,4,"timeout"],[700,11,709,11,"timeout"],[700,12,709,12,"timeout"],[700,19,709,19],[700,21,709,21],[701,6,710,8],[701,10,710,12],[701,11,710,13,"flags"],[701,16,710,18],[701,17,710,19,"timeout"],[701,24,710,26],[701,27,710,29,"timeout"],[701,34,710,36],[702,6,711,8],[702,13,711,15],[702,17,711,19],[703,4,712,4],[704,4,713,4],[705,0,714,0],[706,0,715,0],[707,0,716,0],[708,0,717,0],[709,0,718,0],[710,0,719,0],[711,0,720,0],[712,0,721,0],[713,0,722,0],[714,0,723,0],[715,4,724,4,"onAny"],[715,9,724,9,"onAny"],[715,10,724,10,"listener"],[715,18,724,18],[715,20,724,20],[716,6,725,8],[716,10,725,12],[716,11,725,13,"_anyListeners"],[716,24,725,26],[716,27,725,29],[716,31,725,33],[716,32,725,34,"_anyListeners"],[716,45,725,47],[716,49,725,51],[716,51,725,53],[717,6,726,8],[717,10,726,12],[717,11,726,13,"_anyListeners"],[717,24,726,26],[717,25,726,27,"push"],[717,29,726,31],[717,30,726,32,"listener"],[717,38,726,40],[717,39,726,41],[718,6,727,8],[718,13,727,15],[718,17,727,19],[719,4,728,4],[720,4,729,4],[721,0,730,0],[722,0,731,0],[723,0,732,0],[724,0,733,0],[725,0,734,0],[726,0,735,0],[727,0,736,0],[728,0,737,0],[729,0,738,0],[730,0,739,0],[731,4,740,4,"prependAny"],[731,14,740,14,"prependAny"],[731,15,740,15,"listener"],[731,23,740,23],[731,25,740,25],[732,6,741,8],[732,10,741,12],[732,11,741,13,"_anyListeners"],[732,24,741,26],[732,27,741,29],[732,31,741,33],[732,32,741,34,"_anyListeners"],[732,45,741,47],[732,49,741,51],[732,51,741,53],[733,6,742,8],[733,10,742,12],[733,11,742,13,"_anyListeners"],[733,24,742,26],[733,25,742,27,"unshift"],[733,32,742,34],[733,33,742,35,"listener"],[733,41,742,43],[733,42,742,44],[734,6,743,8],[734,13,743,15],[734,17,743,19],[735,4,744,4],[736,4,745,4],[737,0,746,0],[738,0,747,0],[739,0,748,0],[740,0,749,0],[741,0,750,0],[742,0,751,0],[743,0,752,0],[744,0,753,0],[745,0,754,0],[746,0,755,0],[747,0,756,0],[748,0,757,0],[749,0,758,0],[750,0,759,0],[751,0,760,0],[752,0,761,0],[753,0,762,0],[754,4,763,4,"offAny"],[754,10,763,10,"offAny"],[754,11,763,11,"listener"],[754,19,763,19],[754,21,763,21],[755,6,764,8],[755,10,764,12],[755,11,764,13],[755,15,764,17],[755,16,764,18,"_anyListeners"],[755,29,764,31],[755,31,764,33],[756,8,765,12],[756,15,765,19],[756,19,765,23],[757,6,766,8],[758,6,767,8],[758,10,767,12,"listener"],[758,18,767,20],[758,20,767,22],[759,8,768,12],[759,14,768,18,"listeners"],[759,23,768,27],[759,26,768,30],[759,30,768,34],[759,31,768,35,"_anyListeners"],[759,44,768,48],[760,8,769,12],[760,13,769,17],[760,17,769,21,"i"],[760,18,769,22],[760,21,769,25],[760,22,769,26],[760,24,769,28,"i"],[760,25,769,29],[760,28,769,32,"listeners"],[760,37,769,41],[760,38,769,42,"length"],[760,44,769,48],[760,46,769,50,"i"],[760,47,769,51],[760,49,769,53],[760,51,769,55],[761,10,770,16],[761,14,770,20,"listener"],[761,22,770,28],[761,27,770,33,"listeners"],[761,36,770,42],[761,37,770,43,"i"],[761,38,770,44],[761,39,770,45],[761,41,770,47],[762,12,771,20,"listeners"],[762,21,771,29],[762,22,771,30,"splice"],[762,28,771,36],[762,29,771,37,"i"],[762,30,771,38],[762,32,771,40],[762,33,771,41],[762,34,771,42],[763,12,772,20],[763,19,772,27],[763,23,772,31],[764,10,773,16],[765,8,774,12],[766,6,775,8],[766,7,775,9],[766,13,776,13],[767,8,777,12],[767,12,777,16],[767,13,777,17,"_anyListeners"],[767,26,777,30],[767,29,777,33],[767,31,777,35],[768,6,778,8],[769,6,779,8],[769,13,779,15],[769,17,779,19],[770,4,780,4],[771,4,781,4],[772,0,782,0],[773,0,783,0],[774,0,784,0],[775,4,785,4,"listenersAny"],[775,16,785,16,"listenersAny"],[775,17,785,16],[775,19,785,19],[776,6,786,8],[776,13,786,15],[776,17,786,19],[776,18,786,20,"_anyListeners"],[776,31,786,33],[776,35,786,37],[776,37,786,39],[777,4,787,4],[778,4,788,4],[779,0,789,0],[780,0,790,0],[781,0,791,0],[782,0,792,0],[783,0,793,0],[784,0,794,0],[785,0,795,0],[786,0,796,0],[787,0,797,0],[788,0,798,0],[789,0,799,0],[790,0,800,0],[791,4,801,4,"onAnyOutgoing"],[791,17,801,17,"onAnyOutgoing"],[791,18,801,18,"listener"],[791,26,801,26],[791,28,801,28],[792,6,802,8],[792,10,802,12],[792,11,802,13,"_anyOutgoingListeners"],[792,32,802,34],[792,35,802,37],[792,39,802,41],[792,40,802,42,"_anyOutgoingListeners"],[792,61,802,63],[792,65,802,67],[792,67,802,69],[793,6,803,8],[793,10,803,12],[793,11,803,13,"_anyOutgoingListeners"],[793,32,803,34],[793,33,803,35,"push"],[793,37,803,39],[793,38,803,40,"listener"],[793,46,803,48],[793,47,803,49],[794,6,804,8],[794,13,804,15],[794,17,804,19],[795,4,805,4],[796,4,806,4],[797,0,807,0],[798,0,808,0],[799,0,809,0],[800,0,810,0],[801,0,811,0],[802,0,812,0],[803,0,813,0],[804,0,814,0],[805,0,815,0],[806,0,816,0],[807,0,817,0],[808,0,818,0],[809,4,819,4,"prependAnyOutgoing"],[809,22,819,22,"prependAnyOutgoing"],[809,23,819,23,"listener"],[809,31,819,31],[809,33,819,33],[810,6,820,8],[810,10,820,12],[810,11,820,13,"_anyOutgoingListeners"],[810,32,820,34],[810,35,820,37],[810,39,820,41],[810,40,820,42,"_anyOutgoingListeners"],[810,61,820,63],[810,65,820,67],[810,67,820,69],[811,6,821,8],[811,10,821,12],[811,11,821,13,"_anyOutgoingListeners"],[811,32,821,34],[811,33,821,35,"unshift"],[811,40,821,42],[811,41,821,43,"listener"],[811,49,821,51],[811,50,821,52],[812,6,822,8],[812,13,822,15],[812,17,822,19],[813,4,823,4],[814,4,824,4],[815,0,825,0],[816,0,826,0],[817,0,827,0],[818,0,828,0],[819,0,829,0],[820,0,830,0],[821,0,831,0],[822,0,832,0],[823,0,833,0],[824,0,834,0],[825,0,835,0],[826,0,836,0],[827,0,837,0],[828,0,838,0],[829,0,839,0],[830,0,840,0],[831,0,841,0],[832,4,842,4,"offAnyOutgoing"],[832,18,842,18,"offAnyOutgoing"],[832,19,842,19,"listener"],[832,27,842,27],[832,29,842,29],[833,6,843,8],[833,10,843,12],[833,11,843,13],[833,15,843,17],[833,16,843,18,"_anyOutgoingListeners"],[833,37,843,39],[833,39,843,41],[834,8,844,12],[834,15,844,19],[834,19,844,23],[835,6,845,8],[836,6,846,8],[836,10,846,12,"listener"],[836,18,846,20],[836,20,846,22],[837,8,847,12],[837,14,847,18,"listeners"],[837,23,847,27],[837,26,847,30],[837,30,847,34],[837,31,847,35,"_anyOutgoingListeners"],[837,52,847,56],[838,8,848,12],[838,13,848,17],[838,17,848,21,"i"],[838,18,848,22],[838,21,848,25],[838,22,848,26],[838,24,848,28,"i"],[838,25,848,29],[838,28,848,32,"listeners"],[838,37,848,41],[838,38,848,42,"length"],[838,44,848,48],[838,46,848,50,"i"],[838,47,848,51],[838,49,848,53],[838,51,848,55],[839,10,849,16],[839,14,849,20,"listener"],[839,22,849,28],[839,27,849,33,"listeners"],[839,36,849,42],[839,37,849,43,"i"],[839,38,849,44],[839,39,849,45],[839,41,849,47],[840,12,850,20,"listeners"],[840,21,850,29],[840,22,850,30,"splice"],[840,28,850,36],[840,29,850,37,"i"],[840,30,850,38],[840,32,850,40],[840,33,850,41],[840,34,850,42],[841,12,851,20],[841,19,851,27],[841,23,851,31],[842,10,852,16],[843,8,853,12],[844,6,854,8],[844,7,854,9],[844,13,855,13],[845,8,856,12],[845,12,856,16],[845,13,856,17,"_anyOutgoingListeners"],[845,34,856,38],[845,37,856,41],[845,39,856,43],[846,6,857,8],[847,6,858,8],[847,13,858,15],[847,17,858,19],[848,4,859,4],[849,4,860,4],[850,0,861,0],[851,0,862,0],[852,0,863,0],[853,4,864,4,"listenersAnyOutgoing"],[853,24,864,24,"listenersAnyOutgoing"],[853,25,864,24],[853,27,864,27],[854,6,865,8],[854,13,865,15],[854,17,865,19],[854,18,865,20,"_anyOutgoingListeners"],[854,39,865,41],[854,43,865,45],[854,45,865,47],[855,4,866,4],[856,4,867,4],[857,0,868,0],[858,0,869,0],[859,0,870,0],[860,0,871,0],[861,0,872,0],[862,0,873,0],[863,4,874,4,"notifyOutgoingListeners"],[863,27,874,27,"notifyOutgoingListeners"],[863,28,874,28,"packet"],[863,34,874,34],[863,36,874,36],[864,6,875,8],[864,10,875,12],[864,14,875,16],[864,15,875,17,"_anyOutgoingListeners"],[864,36,875,38],[864,40,875,42],[864,44,875,46],[864,45,875,47,"_anyOutgoingListeners"],[864,66,875,68],[864,67,875,69,"length"],[864,73,875,75],[864,75,875,77],[865,8,876,12],[865,14,876,18,"listeners"],[865,23,876,27],[865,26,876,30],[865,30,876,34],[865,31,876,35,"_anyOutgoingListeners"],[865,52,876,56],[865,53,876,57,"slice"],[865,58,876,62],[865,59,876,63],[865,60,876,64],[866,8,877,12],[866,13,877,17],[866,19,877,23,"listener"],[866,27,877,31],[866,31,877,35,"listeners"],[866,40,877,44],[866,42,877,46],[867,10,878,16,"listener"],[867,18,878,24],[867,19,878,25,"apply"],[867,24,878,30],[867,25,878,31],[867,29,878,35],[867,31,878,37,"packet"],[867,37,878,43],[867,38,878,44,"data"],[867,42,878,48],[867,43,878,49],[868,8,879,12],[869,6,880,8],[870,4,881,4],[871,2,882,0],[872,2,882,1,"exports"],[872,9,882,1],[872,10,882,1,"Socket"],[872,16,882,1],[872,19,882,1,"Socket"],[872,25,882,1],[873,0,882,1],[873,3]],"functionMap":{"names":["<global>","Socket","Socket#constructor","Socket#get__disconnected","Socket#subEvents","Socket#get__active","Socket#connect","Socket#open","Socket#send","Socket#emit","Socket#_registerAckCallback","io.setTimeoutFn$argument_0","fn","Socket#emitWithAck","Promise$argument_0","Socket#_addToQueue","args.push$argument_0","Socket#_drainQueue","Socket#packet","Socket#onopen","auth$argument_0","Socket#_sendConnectPacket","Socket#onerror","Socket#onclose","Socket#_clearAcks","Object.keys.forEach$argument_0","sendBuffer.some$argument_0","Socket#onpacket","Socket#onevent","Socket#emitEvent","Socket#ack","<anonymous>","Socket#onack","Socket#onconnect","Socket#emitBuffered","receiveBuffer.forEach$argument_0","sendBuffer.forEach$argument_0","Socket#ondisconnect","Socket#destroy","subs.forEach$argument_0","Socket#disconnect","Socket#close","Socket#compress","Socket#get__volatile","Socket#timeout","Socket#onAny","Socket#prependAny","Socket#offAny","Socket#listenersAny","Socket#onAnyOutgoing","Socket#prependAnyOutgoing","Socket#offAnyOutgoing","Socket#listenersAnyOutgoing","Socket#notifyOutgoingListeners"],"mappings":"AAA;OCwC;ICI;KD4E;IEe;KFE;IGM;KHU;IIkB;KJE;IKW;KLS;IMI;KNE;IOgB;KPI;IQkB;KRqC;ISI;2CCQ;SDQ;mBEC;SFI;KTG;IYiB;2BCC;uBFC;aEE;SDI;KZC;IcM;kBCY;SDsB;KdG;IgBO;KhBY;IiBO;KjBG;IkBM;sBCE;aDE;KlBK;IoBO;KpBO;IqBO;KrBI;IsBQ;KtBK;IuBO;uCCC;oDCC,oCD;SDS;KvBC;I0BO;K1BgC;I2BO;K3BW;I4BC;K5BW;I6BM;eCG;SDU;K7BC;I+BO;K/BY;IgCM;KhCQ;IiCM;mCCC,8BD;gCEE;SFG;KjCE;IoCM;KpCG;IqCQ;8BCG,4BD;KrCI;IuCiB;KvCW;IwCM;KxCE;IyCU;KzCG;I0CU;K1CG;I2Cc;K3CG;I4CY;K5CI;I6CY;K7CI;I8CmB;K9CiB;I+CK;K/CE;IgDc;KhDI;IiDc;KjDI;IkDmB;KlDiB;ImDK;KnDE;IoDQ;KpDO;CDC"}},"type":"js/module"}]}