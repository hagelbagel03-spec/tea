{"dependencies":[{"name":"./commons.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":67,"index":67}}],"key":"glGFVKq6JnHqcEVNii1WndfU66Y=","exportNames":["*"]}},{"name":"./contrib/base64-arraybuffer.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":68},"end":{"line":2,"column":57,"index":125}}],"key":"C+OlAsR2W474SMJWERSPa0EDsOg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.decodePacket = void 0;\n  var _commons = require(_dependencyMap[0], \"./commons.js\");\n  var _base64Arraybuffer = require(_dependencyMap[1], \"./contrib/base64-arraybuffer.js\");\n  const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n  const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n      return {\n        type: \"message\",\n        data: mapBinary(encodedPacket, binaryType)\n      };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n      return {\n        type: \"message\",\n        data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n      };\n    }\n    const packetType = _commons.PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n      return _commons.ERROR_PACKET;\n    }\n    return encodedPacket.length > 1 ? {\n      type: _commons.PACKET_TYPES_REVERSE[type],\n      data: encodedPacket.substring(1)\n    } : {\n      type: _commons.PACKET_TYPES_REVERSE[type]\n    };\n  };\n  exports.decodePacket = decodePacket;\n  const decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n      const decoded = (0, _base64Arraybuffer.decode)(data);\n      return mapBinary(decoded, binaryType);\n    } else {\n      return {\n        base64: true,\n        data\n      }; // fallback for old browsers\n    }\n  };\n  const mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n      case \"blob\":\n        if (data instanceof Blob) {\n          // from WebSocket + binaryType \"blob\"\n          return data;\n        } else {\n          // from HTTP long-polling or WebTransport\n          return new Blob([data]);\n        }\n      case \"arraybuffer\":\n      default:\n        if (data instanceof ArrayBuffer) {\n          // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n          return data;\n        } else {\n          // from WebTransport (Uint8Array)\n          return data.buffer;\n        }\n    }\n  };\n});","lineCount":67,"map":[[6,2,1,0],[6,6,1,0,"_commons"],[6,14,1,0],[6,17,1,0,"require"],[6,24,1,0],[6,25,1,0,"_dependencyMap"],[6,39,1,0],[7,2,2,0],[7,6,2,0,"_base64Arraybuffer"],[7,24,2,0],[7,27,2,0,"require"],[7,34,2,0],[7,35,2,0,"_dependencyMap"],[7,49,2,0],[8,2,3,0],[8,8,3,6,"withNativeArrayBuffer"],[8,29,3,27],[8,32,3,30],[8,39,3,37,"ArrayBuffer"],[8,50,3,48],[8,55,3,53],[8,65,3,63],[9,2,4,7],[9,8,4,13,"decodePacket"],[9,20,4,25],[9,23,4,28,"decodePacket"],[9,24,4,29,"encodedPacket"],[9,37,4,42],[9,39,4,44,"binaryType"],[9,49,4,54],[9,54,4,59],[10,4,5,4],[10,8,5,8],[10,15,5,15,"encodedPacket"],[10,28,5,28],[10,33,5,33],[10,41,5,41],[10,43,5,43],[11,6,6,8],[11,13,6,15],[12,8,7,12,"type"],[12,12,7,16],[12,14,7,18],[12,23,7,27],[13,8,8,12,"data"],[13,12,8,16],[13,14,8,18,"mapBinary"],[13,23,8,27],[13,24,8,28,"encodedPacket"],[13,37,8,41],[13,39,8,43,"binaryType"],[13,49,8,53],[14,6,9,8],[14,7,9,9],[15,4,10,4],[16,4,11,4],[16,10,11,10,"type"],[16,14,11,14],[16,17,11,17,"encodedPacket"],[16,30,11,30],[16,31,11,31,"charAt"],[16,37,11,37],[16,38,11,38],[16,39,11,39],[16,40,11,40],[17,4,12,4],[17,8,12,8,"type"],[17,12,12,12],[17,17,12,17],[17,20,12,20],[17,22,12,22],[18,6,13,8],[18,13,13,15],[19,8,14,12,"type"],[19,12,14,16],[19,14,14,18],[19,23,14,27],[20,8,15,12,"data"],[20,12,15,16],[20,14,15,18,"decodeBase64Packet"],[20,32,15,36],[20,33,15,37,"encodedPacket"],[20,46,15,50],[20,47,15,51,"substring"],[20,56,15,60],[20,57,15,61],[20,58,15,62],[20,59,15,63],[20,61,15,65,"binaryType"],[20,71,15,75],[21,6,16,8],[21,7,16,9],[22,4,17,4],[23,4,18,4],[23,10,18,10,"packetType"],[23,20,18,20],[23,23,18,23,"PACKET_TYPES_REVERSE"],[23,52,18,43],[23,53,18,44,"type"],[23,57,18,48],[23,58,18,49],[24,4,19,4],[24,8,19,8],[24,9,19,9,"packetType"],[24,19,19,19],[24,21,19,21],[25,6,20,8],[25,13,20,15,"ERROR_PACKET"],[25,34,20,27],[26,4,21,4],[27,4,22,4],[27,11,22,11,"encodedPacket"],[27,24,22,24],[27,25,22,25,"length"],[27,31,22,31],[27,34,22,34],[27,35,22,35],[27,38,23,10],[28,6,24,12,"type"],[28,10,24,16],[28,12,24,18,"PACKET_TYPES_REVERSE"],[28,41,24,38],[28,42,24,39,"type"],[28,46,24,43],[28,47,24,44],[29,6,25,12,"data"],[29,10,25,16],[29,12,25,18,"encodedPacket"],[29,25,25,31],[29,26,25,32,"substring"],[29,35,25,41],[29,36,25,42],[29,37,25,43],[30,4,26,8],[30,5,26,9],[30,8,27,10],[31,6,28,12,"type"],[31,10,28,16],[31,12,28,18,"PACKET_TYPES_REVERSE"],[31,41,28,38],[31,42,28,39,"type"],[31,46,28,43],[32,4,29,8],[32,5,29,9],[33,2,30,0],[33,3,30,1],[34,2,30,2,"exports"],[34,9,30,2],[34,10,30,2,"decodePacket"],[34,22,30,2],[34,25,30,2,"decodePacket"],[34,37,30,2],[35,2,31,0],[35,8,31,6,"decodeBase64Packet"],[35,26,31,24],[35,29,31,27,"decodeBase64Packet"],[35,30,31,28,"data"],[35,34,31,32],[35,36,31,34,"binaryType"],[35,46,31,44],[35,51,31,49],[36,4,32,4],[36,8,32,8,"withNativeArrayBuffer"],[36,29,32,29],[36,31,32,31],[37,6,33,8],[37,12,33,14,"decoded"],[37,19,33,21],[37,22,33,24],[37,26,33,24,"decode"],[37,51,33,30],[37,53,33,31,"data"],[37,57,33,35],[37,58,33,36],[38,6,34,8],[38,13,34,15,"mapBinary"],[38,22,34,24],[38,23,34,25,"decoded"],[38,30,34,32],[38,32,34,34,"binaryType"],[38,42,34,44],[38,43,34,45],[39,4,35,4],[39,5,35,5],[39,11,36,9],[40,6,37,8],[40,13,37,15],[41,8,37,17,"base64"],[41,14,37,23],[41,16,37,25],[41,20,37,29],[42,8,37,31,"data"],[43,6,37,36],[43,7,37,37],[43,8,37,38],[43,9,37,39],[44,4,38,4],[45,2,39,0],[45,3,39,1],[46,2,40,0],[46,8,40,6,"mapBinary"],[46,17,40,15],[46,20,40,18,"mapBinary"],[46,21,40,19,"data"],[46,25,40,23],[46,27,40,25,"binaryType"],[46,37,40,35],[46,42,40,40],[47,4,41,4],[47,12,41,12,"binaryType"],[47,22,41,22],[48,6,42,8],[48,11,42,13],[48,17,42,19],[49,8,43,12],[49,12,43,16,"data"],[49,16,43,20],[49,28,43,32,"Blob"],[49,32,43,36],[49,34,43,38],[50,10,44,16],[51,10,45,16],[51,17,45,23,"data"],[51,21,45,27],[52,8,46,12],[52,9,46,13],[52,15,47,17],[53,10,48,16],[54,10,49,16],[54,17,49,23],[54,21,49,27,"Blob"],[54,25,49,31],[54,26,49,32],[54,27,49,33,"data"],[54,31,49,37],[54,32,49,38],[54,33,49,39],[55,8,50,12],[56,6,51,8],[56,11,51,13],[56,24,51,26],[57,6,52,8],[58,8,53,12],[58,12,53,16,"data"],[58,16,53,20],[58,28,53,32,"ArrayBuffer"],[58,39,53,43],[58,41,53,45],[59,10,54,16],[60,10,55,16],[60,17,55,23,"data"],[60,21,55,27],[61,8,56,12],[61,9,56,13],[61,15,57,17],[62,10,58,16],[63,10,59,16],[63,17,59,23,"data"],[63,21,59,27],[63,22,59,28,"buffer"],[63,28,59,34],[64,8,60,12],[65,4,61,4],[66,2,62,0],[66,3,62,1],[67,0,62,2],[67,3]],"functionMap":{"names":["<global>","decodePacket","decodeBase64Packet","mapBinary"],"mappings":"AAA;4BCG;CD0B;2BEC;CFQ;kBGC;CHsB"}},"type":"js/module"}]}