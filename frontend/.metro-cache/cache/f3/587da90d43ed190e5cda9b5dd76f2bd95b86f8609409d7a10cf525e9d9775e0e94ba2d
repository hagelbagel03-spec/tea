{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"../transport.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"q68AWRvh2qc0QUlp41HSOL9aMUA=","exportNames":["*"]}},{"name":"../util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":42,"index":87}}],"key":"kanFP5HUYYYoVhDf3d7saim1ZXY=","exportNames":["*"]}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":88},"end":{"line":3,"column":64,"index":152}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"]}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":153},"end":{"line":4,"column":32,"index":185}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Polling = void 0;\n  var _transport = require(_dependencyMap[1], \"../transport.js\");\n  var _util = require(_dependencyMap[2], \"../util.js\");\n  var _engine = require(_dependencyMap[3], \"engine.io-parser\");\n  var _debug = _interopRequireDefault(require(_dependencyMap[4], \"debug\"));\n  // debug()\n  const debug = (0, _debug.default)(\"engine.io-client:polling\"); // debug()\n  class Polling extends _transport.Transport {\n    constructor() {\n      super(...arguments);\n      this._polling = false;\n    }\n    get name() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n      this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n      this.readyState = \"pausing\";\n      const pause = () => {\n        debug(\"paused\");\n        this.readyState = \"paused\";\n        onPause();\n      };\n      if (this._polling || !this.writable) {\n        let total = 0;\n        if (this._polling) {\n          debug(\"we are currently polling - waiting to pause\");\n          total++;\n          this.once(\"pollComplete\", function () {\n            debug(\"pre-pause polling complete\");\n            --total || pause();\n          });\n        }\n        if (!this.writable) {\n          debug(\"we are currently writing - waiting to pause\");\n          total++;\n          this.once(\"drain\", function () {\n            debug(\"pre-pause writing complete\");\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n      debug(\"polling\");\n      this._polling = true;\n      this.doPoll();\n      this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n      debug(\"polling got data %s\", data);\n      const callback = packet => {\n        // if its the first message we consider the transport open\n        if (\"opening\" === this.readyState && packet.type === \"open\") {\n          this.onOpen();\n        }\n        // if its a close packet, we close the ongoing requests\n        if (\"close\" === packet.type) {\n          this.onClose({\n            description: \"transport closed by the server\"\n          });\n          return false;\n        }\n        // otherwise bypass onData and handle the message\n        this.onPacket(packet);\n      };\n      // decode payload\n      (0, _engine.decodePayload)(data, this.socket.binaryType).forEach(callback);\n      // if an event did not trigger closing\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this._polling = false;\n        this.emitReserved(\"pollComplete\");\n        if (\"open\" === this.readyState) {\n          this._poll();\n        } else {\n          debug('ignoring poll - transport state \"%s\"', this.readyState);\n        }\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n      const close = () => {\n        debug(\"writing close packet\");\n        this.write([{\n          type: \"close\"\n        }]);\n      };\n      if (\"open\" === this.readyState) {\n        debug(\"transport open - closing\");\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        debug(\"transport not open - deferring close\");\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n      this.writable = false;\n      (0, _engine.encodePayload)(packets, data => {\n        this.doWrite(data, () => {\n          this.writable = true;\n          this.emitReserved(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n      const schema = this.opts.secure ? \"https\" : \"http\";\n      const query = this.query || {};\n      // cache busting is forced\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = (0, _util.randomString)();\n      }\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n      return this.createUri(schema, query);\n    }\n  }\n  exports.Polling = Polling;\n});","lineCount":168,"map":[[7,2,1,0],[7,6,1,0,"_transport"],[7,16,1,0],[7,19,1,0,"require"],[7,26,1,0],[7,27,1,0,"_dependencyMap"],[7,41,1,0],[8,2,2,0],[8,6,2,0,"_util"],[8,11,2,0],[8,14,2,0,"require"],[8,21,2,0],[8,22,2,0,"_dependencyMap"],[8,36,2,0],[9,2,3,0],[9,6,3,0,"_engine"],[9,13,3,0],[9,16,3,0,"require"],[9,23,3,0],[9,24,3,0,"_dependencyMap"],[9,38,3,0],[10,2,4,0],[10,6,4,0,"_debug"],[10,12,4,0],[10,15,4,0,"_interopRequireDefault"],[10,37,4,0],[10,38,4,0,"require"],[10,45,4,0],[10,46,4,0,"_dependencyMap"],[10,60,4,0],[11,2,4,33],[12,2,5,0],[12,8,5,6,"debug"],[12,13,5,11],[12,16,5,14],[12,20,5,14,"debugModule"],[12,34,5,25],[12,36,5,26],[12,62,5,52],[12,63,5,53],[12,64,5,54],[12,65,5,55],[13,2,6,7],[13,8,6,13,"Polling"],[13,15,6,20],[13,24,6,29,"Transport"],[13,44,6,38],[13,45,6,39],[14,4,7,4,"constructor"],[14,15,7,15,"constructor"],[14,16,7,15],[14,18,7,18],[15,6,8,8],[15,11,8,13],[15,12,8,14],[15,15,8,17,"arguments"],[15,24,8,26],[15,25,8,27],[16,6,9,8],[16,10,9,12],[16,11,9,13,"_polling"],[16,19,9,21],[16,22,9,24],[16,27,9,29],[17,4,10,4],[18,4,11,4],[18,8,11,8,"name"],[18,12,11,12,"name"],[18,13,11,12],[18,15,11,15],[19,6,12,8],[19,13,12,15],[19,22,12,24],[20,4,13,4],[21,4,14,4],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,4,20,4,"doOpen"],[27,10,20,10,"doOpen"],[27,11,20,10],[27,13,20,13],[28,6,21,8],[28,10,21,12],[28,11,21,13,"_poll"],[28,16,21,18],[28,17,21,19],[28,18,21,20],[29,4,22,4],[30,4,23,4],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,4,29,4,"pause"],[36,9,29,9,"pause"],[36,10,29,10,"onPause"],[36,17,29,17],[36,19,29,19],[37,6,30,8],[37,10,30,12],[37,11,30,13,"readyState"],[37,21,30,23],[37,24,30,26],[37,33,30,35],[38,6,31,8],[38,12,31,14,"pause"],[38,17,31,19],[38,20,31,22,"pause"],[38,21,31,22],[38,26,31,28],[39,8,32,12,"debug"],[39,13,32,17],[39,14,32,18],[39,22,32,26],[39,23,32,27],[40,8,33,12],[40,12,33,16],[40,13,33,17,"readyState"],[40,23,33,27],[40,26,33,30],[40,34,33,38],[41,8,34,12,"onPause"],[41,15,34,19],[41,16,34,20],[41,17,34,21],[42,6,35,8],[42,7,35,9],[43,6,36,8],[43,10,36,12],[43,14,36,16],[43,15,36,17,"_polling"],[43,23,36,25],[43,27,36,29],[43,28,36,30],[43,32,36,34],[43,33,36,35,"writable"],[43,41,36,43],[43,43,36,45],[44,8,37,12],[44,12,37,16,"total"],[44,17,37,21],[44,20,37,24],[44,21,37,25],[45,8,38,12],[45,12,38,16],[45,16,38,20],[45,17,38,21,"_polling"],[45,25,38,29],[45,27,38,31],[46,10,39,16,"debug"],[46,15,39,21],[46,16,39,22],[46,61,39,67],[46,62,39,68],[47,10,40,16,"total"],[47,15,40,21],[47,17,40,23],[48,10,41,16],[48,14,41,20],[48,15,41,21,"once"],[48,19,41,25],[48,20,41,26],[48,34,41,40],[48,36,41,42],[48,48,41,54],[49,12,42,20,"debug"],[49,17,42,25],[49,18,42,26],[49,46,42,54],[49,47,42,55],[50,12,43,20],[50,14,43,22,"total"],[50,19,43,27],[50,23,43,31,"pause"],[50,28,43,36],[50,29,43,37],[50,30,43,38],[51,10,44,16],[51,11,44,17],[51,12,44,18],[52,8,45,12],[53,8,46,12],[53,12,46,16],[53,13,46,17],[53,17,46,21],[53,18,46,22,"writable"],[53,26,46,30],[53,28,46,32],[54,10,47,16,"debug"],[54,15,47,21],[54,16,47,22],[54,61,47,67],[54,62,47,68],[55,10,48,16,"total"],[55,15,48,21],[55,17,48,23],[56,10,49,16],[56,14,49,20],[56,15,49,21,"once"],[56,19,49,25],[56,20,49,26],[56,27,49,33],[56,29,49,35],[56,41,49,47],[57,12,50,20,"debug"],[57,17,50,25],[57,18,50,26],[57,46,50,54],[57,47,50,55],[58,12,51,20],[58,14,51,22,"total"],[58,19,51,27],[58,23,51,31,"pause"],[58,28,51,36],[58,29,51,37],[58,30,51,38],[59,10,52,16],[59,11,52,17],[59,12,52,18],[60,8,53,12],[61,6,54,8],[61,7,54,9],[61,13,55,13],[62,8,56,12,"pause"],[62,13,56,17],[62,14,56,18],[62,15,56,19],[63,6,57,8],[64,4,58,4],[65,4,59,4],[66,0,60,0],[67,0,61,0],[68,0,62,0],[69,0,63,0],[70,4,64,4,"_poll"],[70,9,64,9,"_poll"],[70,10,64,9],[70,12,64,12],[71,6,65,8,"debug"],[71,11,65,13],[71,12,65,14],[71,21,65,23],[71,22,65,24],[72,6,66,8],[72,10,66,12],[72,11,66,13,"_polling"],[72,19,66,21],[72,22,66,24],[72,26,66,28],[73,6,67,8],[73,10,67,12],[73,11,67,13,"doPoll"],[73,17,67,19],[73,18,67,20],[73,19,67,21],[74,6,68,8],[74,10,68,12],[74,11,68,13,"emitReserved"],[74,23,68,25],[74,24,68,26],[74,30,68,32],[74,31,68,33],[75,4,69,4],[76,4,70,4],[77,0,71,0],[78,0,72,0],[79,0,73,0],[80,0,74,0],[81,4,75,4,"onData"],[81,10,75,10,"onData"],[81,11,75,11,"data"],[81,15,75,15],[81,17,75,17],[82,6,76,8,"debug"],[82,11,76,13],[82,12,76,14],[82,33,76,35],[82,35,76,37,"data"],[82,39,76,41],[82,40,76,42],[83,6,77,8],[83,12,77,14,"callback"],[83,20,77,22],[83,23,77,26,"packet"],[83,29,77,32],[83,33,77,37],[84,8,78,12],[85,8,79,12],[85,12,79,16],[85,21,79,25],[85,26,79,30],[85,30,79,34],[85,31,79,35,"readyState"],[85,41,79,45],[85,45,79,49,"packet"],[85,51,79,55],[85,52,79,56,"type"],[85,56,79,60],[85,61,79,65],[85,67,79,71],[85,69,79,73],[86,10,80,16],[86,14,80,20],[86,15,80,21,"onOpen"],[86,21,80,27],[86,22,80,28],[86,23,80,29],[87,8,81,12],[88,8,82,12],[89,8,83,12],[89,12,83,16],[89,19,83,23],[89,24,83,28,"packet"],[89,30,83,34],[89,31,83,35,"type"],[89,35,83,39],[89,37,83,41],[90,10,84,16],[90,14,84,20],[90,15,84,21,"onClose"],[90,22,84,28],[90,23,84,29],[91,12,84,31,"description"],[91,23,84,42],[91,25,84,44],[92,10,84,77],[92,11,84,78],[92,12,84,79],[93,10,85,16],[93,17,85,23],[93,22,85,28],[94,8,86,12],[95,8,87,12],[96,8,88,12],[96,12,88,16],[96,13,88,17,"onPacket"],[96,21,88,25],[96,22,88,26,"packet"],[96,28,88,32],[96,29,88,33],[97,6,89,8],[97,7,89,9],[98,6,90,8],[99,6,91,8],[99,10,91,8,"decodePayload"],[99,31,91,21],[99,33,91,22,"data"],[99,37,91,26],[99,39,91,28],[99,43,91,32],[99,44,91,33,"socket"],[99,50,91,39],[99,51,91,40,"binaryType"],[99,61,91,50],[99,62,91,51],[99,63,91,52,"forEach"],[99,70,91,59],[99,71,91,60,"callback"],[99,79,91,68],[99,80,91,69],[100,6,92,8],[101,6,93,8],[101,10,93,12],[101,18,93,20],[101,23,93,25],[101,27,93,29],[101,28,93,30,"readyState"],[101,38,93,40],[101,40,93,42],[102,8,94,12],[103,8,95,12],[103,12,95,16],[103,13,95,17,"_polling"],[103,21,95,25],[103,24,95,28],[103,29,95,33],[104,8,96,12],[104,12,96,16],[104,13,96,17,"emitReserved"],[104,25,96,29],[104,26,96,30],[104,40,96,44],[104,41,96,45],[105,8,97,12],[105,12,97,16],[105,18,97,22],[105,23,97,27],[105,27,97,31],[105,28,97,32,"readyState"],[105,38,97,42],[105,40,97,44],[106,10,98,16],[106,14,98,20],[106,15,98,21,"_poll"],[106,20,98,26],[106,21,98,27],[106,22,98,28],[107,8,99,12],[107,9,99,13],[107,15,100,17],[108,10,101,16,"debug"],[108,15,101,21],[108,16,101,22],[108,54,101,60],[108,56,101,62],[108,60,101,66],[108,61,101,67,"readyState"],[108,71,101,77],[108,72,101,78],[109,8,102,12],[110,6,103,8],[111,4,104,4],[112,4,105,4],[113,0,106,0],[114,0,107,0],[115,0,108,0],[116,0,109,0],[117,4,110,4,"doClose"],[117,11,110,11,"doClose"],[117,12,110,11],[117,14,110,14],[118,6,111,8],[118,12,111,14,"close"],[118,17,111,19],[118,20,111,22,"close"],[118,21,111,22],[118,26,111,28],[119,8,112,12,"debug"],[119,13,112,17],[119,14,112,18],[119,36,112,40],[119,37,112,41],[120,8,113,12],[120,12,113,16],[120,13,113,17,"write"],[120,18,113,22],[120,19,113,23],[120,20,113,24],[121,10,113,26,"type"],[121,14,113,30],[121,16,113,32],[122,8,113,40],[122,9,113,41],[122,10,113,42],[122,11,113,43],[123,6,114,8],[123,7,114,9],[124,6,115,8],[124,10,115,12],[124,16,115,18],[124,21,115,23],[124,25,115,27],[124,26,115,28,"readyState"],[124,36,115,38],[124,38,115,40],[125,8,116,12,"debug"],[125,13,116,17],[125,14,116,18],[125,40,116,44],[125,41,116,45],[126,8,117,12,"close"],[126,13,117,17],[126,14,117,18],[126,15,117,19],[127,6,118,8],[127,7,118,9],[127,13,119,13],[128,8,120,12],[129,8,121,12],[130,8,122,12,"debug"],[130,13,122,17],[130,14,122,18],[130,52,122,56],[130,53,122,57],[131,8,123,12],[131,12,123,16],[131,13,123,17,"once"],[131,17,123,21],[131,18,123,22],[131,24,123,28],[131,26,123,30,"close"],[131,31,123,35],[131,32,123,36],[132,6,124,8],[133,4,125,4],[134,4,126,4],[135,0,127,0],[136,0,128,0],[137,0,129,0],[138,0,130,0],[139,0,131,0],[140,4,132,4,"write"],[140,9,132,9,"write"],[140,10,132,10,"packets"],[140,17,132,17],[140,19,132,19],[141,6,133,8],[141,10,133,12],[141,11,133,13,"writable"],[141,19,133,21],[141,22,133,24],[141,27,133,29],[142,6,134,8],[142,10,134,8,"encodePayload"],[142,31,134,21],[142,33,134,22,"packets"],[142,40,134,29],[142,42,134,32,"data"],[142,46,134,36],[142,50,134,41],[143,8,135,12],[143,12,135,16],[143,13,135,17,"doWrite"],[143,20,135,24],[143,21,135,25,"data"],[143,25,135,29],[143,27,135,31],[143,33,135,37],[144,10,136,16],[144,14,136,20],[144,15,136,21,"writable"],[144,23,136,29],[144,26,136,32],[144,30,136,36],[145,10,137,16],[145,14,137,20],[145,15,137,21,"emitReserved"],[145,27,137,33],[145,28,137,34],[145,35,137,41],[145,36,137,42],[146,8,138,12],[146,9,138,13],[146,10,138,14],[147,6,139,8],[147,7,139,9],[147,8,139,10],[148,4,140,4],[149,4,141,4],[150,0,142,0],[151,0,143,0],[152,0,144,0],[153,0,145,0],[154,4,146,4,"uri"],[154,7,146,7,"uri"],[154,8,146,7],[154,10,146,10],[155,6,147,8],[155,12,147,14,"schema"],[155,18,147,20],[155,21,147,23],[155,25,147,27],[155,26,147,28,"opts"],[155,30,147,32],[155,31,147,33,"secure"],[155,37,147,39],[155,40,147,42],[155,47,147,49],[155,50,147,52],[155,56,147,58],[156,6,148,8],[156,12,148,14,"query"],[156,17,148,19],[156,20,148,22],[156,24,148,26],[156,25,148,27,"query"],[156,30,148,32],[156,34,148,36],[156,35,148,37],[156,36,148,38],[157,6,149,8],[158,6,150,8],[158,10,150,12],[158,15,150,17],[158,20,150,22],[158,24,150,26],[158,25,150,27,"opts"],[158,29,150,31],[158,30,150,32,"timestampRequests"],[158,47,150,49],[158,49,150,51],[159,8,151,12,"query"],[159,13,151,17],[159,14,151,18],[159,18,151,22],[159,19,151,23,"opts"],[159,23,151,27],[159,24,151,28,"timestampParam"],[159,38,151,42],[159,39,151,43],[159,42,151,46],[159,46,151,46,"randomString"],[159,64,151,58],[159,66,151,59],[159,67,151,60],[160,6,152,8],[161,6,153,8],[161,10,153,12],[161,11,153,13],[161,15,153,17],[161,16,153,18,"supportsBinary"],[161,30,153,32],[161,34,153,36],[161,35,153,37,"query"],[161,40,153,42],[161,41,153,43,"sid"],[161,44,153,46],[161,46,153,48],[162,8,154,12,"query"],[162,13,154,17],[162,14,154,18,"b64"],[162,17,154,21],[162,20,154,24],[162,21,154,25],[163,6,155,8],[164,6,156,8],[164,13,156,15],[164,17,156,19],[164,18,156,20,"createUri"],[164,27,156,29],[164,28,156,30,"schema"],[164,34,156,36],[164,36,156,38,"query"],[164,41,156,43],[164,42,156,44],[165,4,157,4],[166,2,158,0],[167,2,158,1,"exports"],[167,9,158,1],[167,10,158,1,"Polling"],[167,17,158,1],[167,20,158,1,"Polling"],[167,27,158,1],[168,0,158,1],[168,3]],"functionMap":{"names":["<global>","Polling","Polling#constructor","Polling#get__name","Polling#doOpen","Polling#pause","pause","once$argument_1","Polling#_poll","Polling#onData","callback","Polling#doClose","close","Polling#write","encodePayload$argument_1","doWrite$argument_1","Polling#uri"],"mappings":"AAA;OCK;ICC;KDG;IEC;KFE;IGO;KHE;IIO;sBCE;SDI;0CEM;iBFG;mCEK;iBFG;KJM;IOM;KPK;IQM;yBCE;SDY;KRe;IUM;sBCC;SDG;KVW;IYO;+BCE;+BCC;aDG;SDC;KZC;IeM;KfW;CDC"}},"type":"js/module"}]}