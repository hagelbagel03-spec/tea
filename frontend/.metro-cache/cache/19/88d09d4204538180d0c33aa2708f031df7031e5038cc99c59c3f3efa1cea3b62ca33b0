{"dependencies":[{"name":"./transports/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":73,"index":73}}],"key":"7CLKJUHLWOUmn3xjjCK2YLx/ESU=","exportNames":["*"]}},{"name":"./util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":74},"end":{"line":2,"column":62,"index":136}}],"key":"+UpHPazG/Yk8JnTjB6d2Eo+vUl4=","exportNames":["*"]}},{"name":"./contrib/parseqs.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":137},"end":{"line":3,"column":46,"index":183}}],"key":"BJ+q1MtlpK8TmoXWscM6udPVjkM=","exportNames":["*"]}},{"name":"./contrib/parseuri.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":46,"index":230}}],"key":"5FHL6vc7rbDf51XGIsZLRdNOJXo=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":231},"end":{"line":5,"column":55,"index":286}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":287},"end":{"line":6,"column":44,"index":331}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"]}},{"name":"./globals.node.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":332},"end":{"line":7,"column":82,"index":414}}],"key":"9IvwYHBhshdIr/kWH4ou0H+0FaM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.SocketWithoutUpgrade = exports.SocketWithUpgrade = exports.Socket = void 0;\n  var _index = require(_dependencyMap[0], \"./transports/index.js\");\n  var _util = require(_dependencyMap[1], \"./util.js\");\n  var _parseqs = require(_dependencyMap[2], \"./contrib/parseqs.js\");\n  var _parseuri = require(_dependencyMap[3], \"./contrib/parseuri.js\");\n  var _componentEmitter = require(_dependencyMap[4], \"@socket.io/component-emitter\");\n  var _engine = require(_dependencyMap[5], \"engine.io-parser\");\n  var _globalsNode = require(_dependencyMap[6], \"./globals.node.js\");\n  const withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\n  const OFFLINE_EVENT_LISTENERS = [];\n  if (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n      OFFLINE_EVENT_LISTENERS.forEach(listener => listener());\n    }, false);\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n   * successfully establishes the connection.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithoutUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithUpgrade\n   * @see Socket\n   */\n  class SocketWithoutUpgrade extends _componentEmitter.Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n      super();\n      this.binaryType = _globalsNode.defaultBinaryType;\n      this.writeBuffer = [];\n      this._prevBufferLen = 0;\n      this._pingInterval = -1;\n      this._pingTimeout = -1;\n      this._maxPayload = -1;\n      /**\n       * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n       * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n       */\n      this._pingTimeoutTime = Infinity;\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = null;\n      }\n      if (uri) {\n        const parsedUri = (0, _parseuri.parse)(uri);\n        opts.hostname = parsedUri.host;\n        opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n        opts.port = parsedUri.port;\n        if (parsedUri.query) opts.query = parsedUri.query;\n      } else if (opts.host) {\n        opts.hostname = (0, _parseuri.parse)(opts.host).host;\n      }\n      (0, _util.installTimerFunctions)(this, opts);\n      this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n      if (opts.hostname && !opts.port) {\n        // if no port is specified manually, use the protocol default\n        opts.port = this.secure ? \"443\" : \"80\";\n      }\n      this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n      this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n      this.transports = [];\n      this._transportsByName = {};\n      opts.transports.forEach(t => {\n        const transportName = t.prototype.name;\n        this.transports.push(transportName);\n        this._transportsByName[transportName] = t;\n      });\n      this.opts = Object.assign({\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        addTrailingSlash: true,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {},\n        closeOnBeforeunload: false\n      }, opts);\n      this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\");\n      if (typeof this.opts.query === \"string\") {\n        this.opts.query = (0, _parseqs.decode)(this.opts.query);\n      }\n      if (withEventListeners) {\n        if (this.opts.closeOnBeforeunload) {\n          // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n          // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n          // closed/reloaded)\n          this._beforeunloadEventListener = () => {\n            if (this.transport) {\n              // silently close the transport\n              this.transport.removeAllListeners();\n              this.transport.close();\n            }\n          };\n          addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n        }\n        if (this.hostname !== \"localhost\") {\n          this._offlineEventListener = () => {\n            this._onClose(\"transport close\", {\n              description: \"network connection lost\"\n            });\n          };\n          OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n        }\n      }\n      if (this.opts.withCredentials) {\n        this._cookieJar = (0, _globalsNode.createCookieJar)();\n      }\n      this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n      const query = Object.assign({}, this.opts.query);\n      // append engine.io protocol identifier\n      query.EIO = _engine.protocol;\n      // transport name\n      query.transport = name;\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      const opts = Object.assign({}, this.opts, {\n        query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }, this.opts.transportOptions[name]);\n      return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n      if (this.transports.length === 0) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(() => {\n          this.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      }\n      const transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n      this.readyState = \"opening\";\n      const transport = this.createTransport(transportName);\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n      if (this.transport) {\n        this.transport.removeAllListeners();\n      }\n      // set up transport\n      this.transport = transport;\n      // set up transport listeners\n      transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", reason => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n      this.readyState = \"open\";\n      SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        this.emitReserved(\"packet\", packet);\n        // Socket is live - any packet counts\n        this.emitReserved(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this._sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            this._resetPingTimeout();\n            break;\n          case \"error\":\n            const err = new Error(\"server error\");\n            // @ts-ignore\n            err.code = packet.data;\n            this._onError(err);\n            break;\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {}\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this._pingInterval = data.pingInterval;\n      this._pingTimeout = data.pingTimeout;\n      this._maxPayload = data.maxPayload;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n      this.clearTimeoutFn(this._pingTimeoutTimer);\n      const delay = this._pingInterval + this._pingTimeout;\n      this._pingTimeoutTime = Date.now() + delay;\n      this._pingTimeoutTimer = this.setTimeoutFn(() => {\n        this._onClose(\"ping timeout\");\n      }, delay);\n      if (this.opts.autoUnref) {\n        this._pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n      this.writeBuffer.splice(0, this._prevBufferLen);\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this._prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        const packets = this._getWritablePackets();\n        this.transport.send(packets);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this._prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n      const shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n      let payloadSize = 1; // first packet type\n      for (let i = 0; i < this.writeBuffer.length; i++) {\n        const data = this.writeBuffer[i].data;\n        if (data) {\n          payloadSize += (0, _util.byteLength)(data);\n        }\n        if (i > 0 && payloadSize > this._maxPayload) {\n          return this.writeBuffer.slice(0, i);\n        }\n        payloadSize += 2; // separator + packet type\n      }\n      return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */\n    _hasPingExpired() {\n      if (!this._pingTimeoutTime) return true;\n      const hasExpired = Date.now() > this._pingTimeoutTime;\n      if (hasExpired) {\n        this._pingTimeoutTime = 0;\n        (0, _globalsNode.nextTick)(() => {\n          this._onClose(\"ping timeout\");\n        }, this.setTimeoutFn);\n      }\n      return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      const packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n      const close = () => {\n        this._onClose(\"forced close\");\n        this.transport.close();\n      };\n      const cleanupAndClose = () => {\n        this.off(\"upgrade\", cleanupAndClose);\n        this.off(\"upgradeError\", cleanupAndClose);\n        close();\n      };\n      const waitForUpgrade = () => {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        this.once(\"upgrade\", cleanupAndClose);\n        this.once(\"upgradeError\", cleanupAndClose);\n      };\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", () => {\n            if (this.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n        this.transports.shift();\n        return this._open();\n      }\n      this.emitReserved(\"error\", err);\n      this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        // clear timers\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n        // ensure transport won't stay open\n        this.transport.close();\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n        if (withEventListeners) {\n          if (this._beforeunloadEventListener) {\n            removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n          }\n          if (this._offlineEventListener) {\n            const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n            if (i !== -1) {\n              OFFLINE_EVENT_LISTENERS.splice(i, 1);\n            }\n          }\n        }\n        // set ready state\n        this.readyState = \"closed\";\n        // clear session id\n        this.id = null;\n        // emit close event\n        this.emitReserved(\"close\", reason, description);\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n      }\n    }\n  }\n  exports.SocketWithoutUpgrade = SocketWithoutUpgrade;\n  SocketWithoutUpgrade.protocol = _engine.protocol;\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see Socket\n   */\n  class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n      super(...arguments);\n      this._upgrades = [];\n    }\n    onOpen() {\n      super.onOpen();\n      if (\"open\" === this.readyState && this.opts.upgrade) {\n        for (let i = 0; i < this._upgrades.length; i++) {\n          this._probe(this._upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n      let transport = this.createTransport(name);\n      let failed = false;\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      const onTransportOpen = () => {\n        if (failed) return;\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", msg => {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            this.upgrading = true;\n            this.emitReserved(\"upgrading\", transport);\n            if (!transport) return;\n            SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n            this.transport.pause(() => {\n              if (failed) return;\n              if (\"closed\" === this.readyState) return;\n              cleanup();\n              this.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              this.emitReserved(\"upgrade\", transport);\n              transport = null;\n              this.upgrading = false;\n              this.flush();\n            });\n          } else {\n            const err = new Error(\"probe error\");\n            // @ts-ignore\n            err.transport = transport.name;\n            this.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n      function freezeTransport() {\n        if (failed) return;\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n      // Handle any error that happens while probing\n      const onerror = err => {\n        const error = new Error(\"probe error: \" + err);\n        // @ts-ignore\n        error.transport = transport.name;\n        freezeTransport();\n        this.emitReserved(\"upgradeError\", error);\n      };\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          freezeTransport();\n        }\n      }\n      // Remove all listeners on the transport and on self\n      const cleanup = () => {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        this.off(\"close\", onclose);\n        this.off(\"upgrading\", onupgrade);\n      };\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n        // favor WebTransport\n        this.setTimeoutFn(() => {\n          if (!failed) {\n            transport.open();\n          }\n        }, 200);\n      } else {\n        transport.open();\n      }\n    }\n    onHandshake(data) {\n      this._upgrades = this._filterUpgrades(data.upgrades);\n      super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n      const filteredUpgrades = [];\n      for (let i = 0; i < upgrades.length; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    }\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * @example\n   * import { Socket } from \"engine.io-client\";\n   *\n   * const socket = new Socket();\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see SocketWithUpgrade\n   */\n  exports.SocketWithUpgrade = SocketWithUpgrade;\n  class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n      const o = typeof uri === \"object\" ? uri : opts;\n      if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n        o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(transportName => _index.transports[transportName]).filter(t => !!t);\n      }\n      super(uri, o);\n    }\n  }\n  exports.Socket = Socket;\n});","lineCount":681,"map":[[6,2,1,0],[6,6,1,0,"_index"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_util"],[7,11,2,0],[7,14,2,0,"require"],[7,21,2,0],[7,22,2,0,"_dependencyMap"],[7,36,2,0],[8,2,3,0],[8,6,3,0,"_parseqs"],[8,14,3,0],[8,17,3,0,"require"],[8,24,3,0],[8,25,3,0,"_dependencyMap"],[8,39,3,0],[9,2,4,0],[9,6,4,0,"_parseuri"],[9,15,4,0],[9,18,4,0,"require"],[9,25,4,0],[9,26,4,0,"_dependencyMap"],[9,40,4,0],[10,2,5,0],[10,6,5,0,"_componentEmitter"],[10,23,5,0],[10,26,5,0,"require"],[10,33,5,0],[10,34,5,0,"_dependencyMap"],[10,48,5,0],[11,2,6,0],[11,6,6,0,"_engine"],[11,13,6,0],[11,16,6,0,"require"],[11,23,6,0],[11,24,6,0,"_dependencyMap"],[11,38,6,0],[12,2,7,0],[12,6,7,0,"_globalsNode"],[12,18,7,0],[12,21,7,0,"require"],[12,28,7,0],[12,29,7,0,"_dependencyMap"],[12,43,7,0],[13,2,8,0],[13,8,8,6,"withEventListeners"],[13,26,8,24],[13,29,8,27],[13,36,8,34,"addEventListener"],[13,52,8,50],[13,57,8,55],[13,67,8,65],[13,71,9,4],[13,78,9,11,"removeEventListener"],[13,97,9,30],[13,102,9,35],[13,112,9,45],[14,2,10,0],[14,8,10,6,"OFFLINE_EVENT_LISTENERS"],[14,31,10,29],[14,34,10,32],[14,36,10,34],[15,2,11,0],[15,6,11,4,"withEventListeners"],[15,24,11,22],[15,26,11,24],[16,4,12,4],[17,4,13,4],[18,4,14,4,"addEventListener"],[18,20,14,20],[18,21,14,21],[18,30,14,30],[18,32,14,32],[18,38,14,38],[19,6,15,8,"OFFLINE_EVENT_LISTENERS"],[19,29,15,31],[19,30,15,32,"forEach"],[19,37,15,39],[19,38,15,41,"listener"],[19,46,15,49],[19,50,15,54,"listener"],[19,58,15,62],[19,59,15,63],[19,60,15,64],[19,61,15,65],[20,4,16,4],[20,5,16,5],[20,7,16,7],[20,12,16,12],[20,13,16,13],[21,2,17,0],[22,2,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,2,41,7],[45,8,41,13,"SocketWithoutUpgrade"],[45,28,41,33],[45,37,41,42,"Emitter"],[45,62,41,49],[45,63,41,50],[46,4,42,4],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,4,48,4,"constructor"],[52,15,48,15,"constructor"],[52,16,48,16,"uri"],[52,19,48,19],[52,21,48,21,"opts"],[52,25,48,25],[52,27,48,27],[53,6,49,8],[53,11,49,13],[53,12,49,14],[53,13,49,15],[54,6,50,8],[54,10,50,12],[54,11,50,13,"binaryType"],[54,21,50,23],[54,24,50,26,"defaultBinaryType"],[54,54,50,43],[55,6,51,8],[55,10,51,12],[55,11,51,13,"writeBuffer"],[55,22,51,24],[55,25,51,27],[55,27,51,29],[56,6,52,8],[56,10,52,12],[56,11,52,13,"_prevBufferLen"],[56,25,52,27],[56,28,52,30],[56,29,52,31],[57,6,53,8],[57,10,53,12],[57,11,53,13,"_pingInterval"],[57,24,53,26],[57,27,53,29],[57,28,53,30],[57,29,53,31],[58,6,54,8],[58,10,54,12],[58,11,54,13,"_pingTimeout"],[58,23,54,25],[58,26,54,28],[58,27,54,29],[58,28,54,30],[59,6,55,8],[59,10,55,12],[59,11,55,13,"_maxPayload"],[59,22,55,24],[59,25,55,27],[59,26,55,28],[59,27,55,29],[60,6,56,8],[61,0,57,0],[62,0,58,0],[63,0,59,0],[64,6,60,8],[64,10,60,12],[64,11,60,13,"_pingTimeoutTime"],[64,27,60,29],[64,30,60,32,"Infinity"],[64,38,60,40],[65,6,61,8],[65,10,61,12,"uri"],[65,13,61,15],[65,17,61,19],[65,25,61,27],[65,30,61,32],[65,37,61,39,"uri"],[65,40,61,42],[65,42,61,44],[66,8,62,12,"opts"],[66,12,62,16],[66,15,62,19,"uri"],[66,18,62,22],[67,8,63,12,"uri"],[67,11,63,15],[67,14,63,18],[67,18,63,22],[68,6,64,8],[69,6,65,8],[69,10,65,12,"uri"],[69,13,65,15],[69,15,65,17],[70,8,66,12],[70,14,66,18,"parsedUri"],[70,23,66,27],[70,26,66,30],[70,30,66,30,"parse"],[70,45,66,35],[70,47,66,36,"uri"],[70,50,66,39],[70,51,66,40],[71,8,67,12,"opts"],[71,12,67,16],[71,13,67,17,"hostname"],[71,21,67,25],[71,24,67,28,"parsedUri"],[71,33,67,37],[71,34,67,38,"host"],[71,38,67,42],[72,8,68,12,"opts"],[72,12,68,16],[72,13,68,17,"secure"],[72,19,68,23],[72,22,69,16,"parsedUri"],[72,31,69,25],[72,32,69,26,"protocol"],[72,40,69,34],[72,45,69,39],[72,52,69,46],[72,56,69,50,"parsedUri"],[72,65,69,59],[72,66,69,60,"protocol"],[72,74,69,68],[72,79,69,73],[72,84,69,78],[73,8,70,12,"opts"],[73,12,70,16],[73,13,70,17,"port"],[73,17,70,21],[73,20,70,24,"parsedUri"],[73,29,70,33],[73,30,70,34,"port"],[73,34,70,38],[74,8,71,12],[74,12,71,16,"parsedUri"],[74,21,71,25],[74,22,71,26,"query"],[74,27,71,31],[74,29,72,16,"opts"],[74,33,72,20],[74,34,72,21,"query"],[74,39,72,26],[74,42,72,29,"parsedUri"],[74,51,72,38],[74,52,72,39,"query"],[74,57,72,44],[75,6,73,8],[75,7,73,9],[75,13,74,13],[75,17,74,17,"opts"],[75,21,74,21],[75,22,74,22,"host"],[75,26,74,26],[75,28,74,28],[76,8,75,12,"opts"],[76,12,75,16],[76,13,75,17,"hostname"],[76,21,75,25],[76,24,75,28],[76,28,75,28,"parse"],[76,43,75,33],[76,45,75,34,"opts"],[76,49,75,38],[76,50,75,39,"host"],[76,54,75,43],[76,55,75,44],[76,56,75,45,"host"],[76,60,75,49],[77,6,76,8],[78,6,77,8],[78,10,77,8,"installTimerFunctions"],[78,37,77,29],[78,39,77,30],[78,43,77,34],[78,45,77,36,"opts"],[78,49,77,40],[78,50,77,41],[79,6,78,8],[79,10,78,12],[79,11,78,13,"secure"],[79,17,78,19],[79,20,79,12],[79,24,79,16],[79,28,79,20,"opts"],[79,32,79,24],[79,33,79,25,"secure"],[79,39,79,31],[79,42,80,18,"opts"],[79,46,80,22],[79,47,80,23,"secure"],[79,53,80,29],[79,56,81,18],[79,63,81,25,"location"],[79,71,81,33],[79,76,81,38],[79,87,81,49],[79,91,81,53],[79,99,81,61],[79,104,81,66,"location"],[79,112,81,74],[79,113,81,75,"protocol"],[79,121,81,83],[80,6,82,8],[80,10,82,12,"opts"],[80,14,82,16],[80,15,82,17,"hostname"],[80,23,82,25],[80,27,82,29],[80,28,82,30,"opts"],[80,32,82,34],[80,33,82,35,"port"],[80,37,82,39],[80,39,82,41],[81,8,83,12],[82,8,84,12,"opts"],[82,12,84,16],[82,13,84,17,"port"],[82,17,84,21],[82,20,84,24],[82,24,84,28],[82,25,84,29,"secure"],[82,31,84,35],[82,34,84,38],[82,39,84,43],[82,42,84,46],[82,46,84,50],[83,6,85,8],[84,6,86,8],[84,10,86,12],[84,11,86,13,"hostname"],[84,19,86,21],[84,22,87,12,"opts"],[84,26,87,16],[84,27,87,17,"hostname"],[84,35,87,25],[84,40,88,17],[84,47,88,24,"location"],[84,55,88,32],[84,60,88,37],[84,71,88,48],[84,74,88,51,"location"],[84,82,88,59],[84,83,88,60,"hostname"],[84,91,88,68],[84,94,88,71],[84,105,88,82],[84,106,88,83],[85,6,89,8],[85,10,89,12],[85,11,89,13,"port"],[85,15,89,17],[85,18,90,12,"opts"],[85,22,90,16],[85,23,90,17,"port"],[85,27,90,21],[85,32,91,17],[85,39,91,24,"location"],[85,47,91,32],[85,52,91,37],[85,63,91,48],[85,67,91,52,"location"],[85,75,91,60],[85,76,91,61,"port"],[85,80,91,65],[85,83,92,22,"location"],[85,91,92,30],[85,92,92,31,"port"],[85,96,92,35],[85,99,93,22],[85,103,93,26],[85,104,93,27,"secure"],[85,110,93,33],[85,113,94,26],[85,118,94,31],[85,121,95,26],[85,125,95,30],[85,126,95,31],[86,6,96,8],[86,10,96,12],[86,11,96,13,"transports"],[86,21,96,23],[86,24,96,26],[86,26,96,28],[87,6,97,8],[87,10,97,12],[87,11,97,13,"_transportsByName"],[87,28,97,30],[87,31,97,33],[87,32,97,34],[87,33,97,35],[88,6,98,8,"opts"],[88,10,98,12],[88,11,98,13,"transports"],[88,21,98,23],[88,22,98,24,"forEach"],[88,29,98,31],[88,30,98,33,"t"],[88,31,98,34],[88,35,98,39],[89,8,99,12],[89,14,99,18,"transportName"],[89,27,99,31],[89,30,99,34,"t"],[89,31,99,35],[89,32,99,36,"prototype"],[89,41,99,45],[89,42,99,46,"name"],[89,46,99,50],[90,8,100,12],[90,12,100,16],[90,13,100,17,"transports"],[90,23,100,27],[90,24,100,28,"push"],[90,28,100,32],[90,29,100,33,"transportName"],[90,42,100,46],[90,43,100,47],[91,8,101,12],[91,12,101,16],[91,13,101,17,"_transportsByName"],[91,30,101,34],[91,31,101,35,"transportName"],[91,44,101,48],[91,45,101,49],[91,48,101,52,"t"],[91,49,101,53],[92,6,102,8],[92,7,102,9],[92,8,102,10],[93,6,103,8],[93,10,103,12],[93,11,103,13,"opts"],[93,15,103,17],[93,18,103,20,"Object"],[93,24,103,26],[93,25,103,27,"assign"],[93,31,103,33],[93,32,103,34],[94,8,104,12,"path"],[94,12,104,16],[94,14,104,18],[94,26,104,30],[95,8,105,12,"agent"],[95,13,105,17],[95,15,105,19],[95,20,105,24],[96,8,106,12,"withCredentials"],[96,23,106,27],[96,25,106,29],[96,30,106,34],[97,8,107,12,"upgrade"],[97,15,107,19],[97,17,107,21],[97,21,107,25],[98,8,108,12,"timestampParam"],[98,22,108,26],[98,24,108,28],[98,27,108,31],[99,8,109,12,"rememberUpgrade"],[99,23,109,27],[99,25,109,29],[99,30,109,34],[100,8,110,12,"addTrailingSlash"],[100,24,110,28],[100,26,110,30],[100,30,110,34],[101,8,111,12,"rejectUnauthorized"],[101,26,111,30],[101,28,111,32],[101,32,111,36],[102,8,112,12,"perMessageDeflate"],[102,25,112,29],[102,27,112,31],[103,10,113,16,"threshold"],[103,19,113,25],[103,21,113,27],[104,8,114,12],[104,9,114,13],[105,8,115,12,"transportOptions"],[105,24,115,28],[105,26,115,30],[105,27,115,31],[105,28,115,32],[106,8,116,12,"closeOnBeforeunload"],[106,27,116,31],[106,29,116,33],[107,6,117,8],[107,7,117,9],[107,9,117,11,"opts"],[107,13,117,15],[107,14,117,16],[108,6,118,8],[108,10,118,12],[108,11,118,13,"opts"],[108,15,118,17],[108,16,118,18,"path"],[108,20,118,22],[108,23,119,12],[108,27,119,16],[108,28,119,17,"opts"],[108,32,119,21],[108,33,119,22,"path"],[108,37,119,26],[108,38,119,27,"replace"],[108,45,119,34],[108,46,119,35],[108,51,119,40],[108,53,119,42],[108,55,119,44],[108,56,119,45],[108,60,120,17],[108,64,120,21],[108,65,120,22,"opts"],[108,69,120,26],[108,70,120,27,"addTrailingSlash"],[108,86,120,43],[108,89,120,46],[108,92,120,49],[108,95,120,52],[108,97,120,54],[108,98,120,55],[109,6,121,8],[109,10,121,12],[109,17,121,19],[109,21,121,23],[109,22,121,24,"opts"],[109,26,121,28],[109,27,121,29,"query"],[109,32,121,34],[109,37,121,39],[109,45,121,47],[109,47,121,49],[110,8,122,12],[110,12,122,16],[110,13,122,17,"opts"],[110,17,122,21],[110,18,122,22,"query"],[110,23,122,27],[110,26,122,30],[110,30,122,30,"decode"],[110,45,122,36],[110,47,122,37],[110,51,122,41],[110,52,122,42,"opts"],[110,56,122,46],[110,57,122,47,"query"],[110,62,122,52],[110,63,122,53],[111,6,123,8],[112,6,124,8],[112,10,124,12,"withEventListeners"],[112,28,124,30],[112,30,124,32],[113,8,125,12],[113,12,125,16],[113,16,125,20],[113,17,125,21,"opts"],[113,21,125,25],[113,22,125,26,"closeOnBeforeunload"],[113,41,125,45],[113,43,125,47],[114,10,126,16],[115,10,127,16],[116,10,128,16],[117,10,129,16],[117,14,129,20],[117,15,129,21,"_beforeunloadEventListener"],[117,41,129,47],[117,44,129,50],[117,50,129,56],[118,12,130,20],[118,16,130,24],[118,20,130,28],[118,21,130,29,"transport"],[118,30,130,38],[118,32,130,40],[119,14,131,24],[120,14,132,24],[120,18,132,28],[120,19,132,29,"transport"],[120,28,132,38],[120,29,132,39,"removeAllListeners"],[120,47,132,57],[120,48,132,58],[120,49,132,59],[121,14,133,24],[121,18,133,28],[121,19,133,29,"transport"],[121,28,133,38],[121,29,133,39,"close"],[121,34,133,44],[121,35,133,45],[121,36,133,46],[122,12,134,20],[123,10,135,16],[123,11,135,17],[124,10,136,16,"addEventListener"],[124,26,136,32],[124,27,136,33],[124,41,136,47],[124,43,136,49],[124,47,136,53],[124,48,136,54,"_beforeunloadEventListener"],[124,74,136,80],[124,76,136,82],[124,81,136,87],[124,82,136,88],[125,8,137,12],[126,8,138,12],[126,12,138,16],[126,16,138,20],[126,17,138,21,"hostname"],[126,25,138,29],[126,30,138,34],[126,41,138,45],[126,43,138,47],[127,10,139,16],[127,14,139,20],[127,15,139,21,"_offlineEventListener"],[127,36,139,42],[127,39,139,45],[127,45,139,51],[128,12,140,20],[128,16,140,24],[128,17,140,25,"_onClose"],[128,25,140,33],[128,26,140,34],[128,43,140,51],[128,45,140,53],[129,14,141,24,"description"],[129,25,141,35],[129,27,141,37],[130,12,142,20],[130,13,142,21],[130,14,142,22],[131,10,143,16],[131,11,143,17],[132,10,144,16,"OFFLINE_EVENT_LISTENERS"],[132,33,144,39],[132,34,144,40,"push"],[132,38,144,44],[132,39,144,45],[132,43,144,49],[132,44,144,50,"_offlineEventListener"],[132,65,144,71],[132,66,144,72],[133,8,145,12],[134,6,146,8],[135,6,147,8],[135,10,147,12],[135,14,147,16],[135,15,147,17,"opts"],[135,19,147,21],[135,20,147,22,"withCredentials"],[135,35,147,37],[135,37,147,39],[136,8,148,12],[136,12,148,16],[136,13,148,17,"_cookieJar"],[136,23,148,27],[136,26,148,30],[136,30,148,30,"createCookieJar"],[136,58,148,45],[136,60,148,46],[136,61,148,47],[137,6,149,8],[138,6,150,8],[138,10,150,12],[138,11,150,13,"_open"],[138,16,150,18],[138,17,150,19],[138,18,150,20],[139,4,151,4],[140,4,152,4],[141,0,153,0],[142,0,154,0],[143,0,155,0],[144,0,156,0],[145,0,157,0],[146,0,158,0],[147,4,159,4,"createTransport"],[147,19,159,19,"createTransport"],[147,20,159,20,"name"],[147,24,159,24],[147,26,159,26],[148,6,160,8],[148,12,160,14,"query"],[148,17,160,19],[148,20,160,22,"Object"],[148,26,160,28],[148,27,160,29,"assign"],[148,33,160,35],[148,34,160,36],[148,35,160,37],[148,36,160,38],[148,38,160,40],[148,42,160,44],[148,43,160,45,"opts"],[148,47,160,49],[148,48,160,50,"query"],[148,53,160,55],[148,54,160,56],[149,6,161,8],[150,6,162,8,"query"],[150,11,162,13],[150,12,162,14,"EIO"],[150,15,162,17],[150,18,162,20,"protocol"],[150,34,162,28],[151,6,163,8],[152,6,164,8,"query"],[152,11,164,13],[152,12,164,14,"transport"],[152,21,164,23],[152,24,164,26,"name"],[152,28,164,30],[153,6,165,8],[154,6,166,8],[154,10,166,12],[154,14,166,16],[154,15,166,17,"id"],[154,17,166,19],[154,19,167,12,"query"],[154,24,167,17],[154,25,167,18,"sid"],[154,28,167,21],[154,31,167,24],[154,35,167,28],[154,36,167,29,"id"],[154,38,167,31],[155,6,168,8],[155,12,168,14,"opts"],[155,16,168,18],[155,19,168,21,"Object"],[155,25,168,27],[155,26,168,28,"assign"],[155,32,168,34],[155,33,168,35],[155,34,168,36],[155,35,168,37],[155,37,168,39],[155,41,168,43],[155,42,168,44,"opts"],[155,46,168,48],[155,48,168,50],[156,8,169,12,"query"],[156,13,169,17],[157,8,170,12,"socket"],[157,14,170,18],[157,16,170,20],[157,20,170,24],[158,8,171,12,"hostname"],[158,16,171,20],[158,18,171,22],[158,22,171,26],[158,23,171,27,"hostname"],[158,31,171,35],[159,8,172,12,"secure"],[159,14,172,18],[159,16,172,20],[159,20,172,24],[159,21,172,25,"secure"],[159,27,172,31],[160,8,173,12,"port"],[160,12,173,16],[160,14,173,18],[160,18,173,22],[160,19,173,23,"port"],[161,6,174,8],[161,7,174,9],[161,9,174,11],[161,13,174,15],[161,14,174,16,"opts"],[161,18,174,20],[161,19,174,21,"transportOptions"],[161,35,174,37],[161,36,174,38,"name"],[161,40,174,42],[161,41,174,43],[161,42,174,44],[162,6,175,8],[162,13,175,15],[162,17,175,19],[162,21,175,23],[162,22,175,24,"_transportsByName"],[162,39,175,41],[162,40,175,42,"name"],[162,44,175,46],[162,45,175,47],[162,46,175,48,"opts"],[162,50,175,52],[162,51,175,53],[163,4,176,4],[164,4,177,4],[165,0,178,0],[166,0,179,0],[167,0,180,0],[168,0,181,0],[169,4,182,4,"_open"],[169,9,182,9,"_open"],[169,10,182,9],[169,12,182,12],[170,6,183,8],[170,10,183,12],[170,14,183,16],[170,15,183,17,"transports"],[170,25,183,27],[170,26,183,28,"length"],[170,32,183,34],[170,37,183,39],[170,38,183,40],[170,40,183,42],[171,8,184,12],[172,8,185,12],[172,12,185,16],[172,13,185,17,"setTimeoutFn"],[172,25,185,29],[172,26,185,30],[172,32,185,36],[173,10,186,16],[173,14,186,20],[173,15,186,21,"emitReserved"],[173,27,186,33],[173,28,186,34],[173,35,186,41],[173,37,186,43],[173,62,186,68],[173,63,186,69],[174,8,187,12],[174,9,187,13],[174,11,187,15],[174,12,187,16],[174,13,187,17],[175,8,188,12],[176,6,189,8],[177,6,190,8],[177,12,190,14,"transportName"],[177,25,190,27],[177,28,190,30],[177,32,190,34],[177,33,190,35,"opts"],[177,37,190,39],[177,38,190,40,"rememberUpgrade"],[177,53,190,55],[177,57,191,12,"SocketWithoutUpgrade"],[177,77,191,32],[177,78,191,33,"priorWebsocketSuccess"],[177,99,191,54],[177,103,192,12],[177,107,192,16],[177,108,192,17,"transports"],[177,118,192,27],[177,119,192,28,"indexOf"],[177,126,192,35],[177,127,192,36],[177,138,192,47],[177,139,192,48],[177,144,192,53],[177,145,192,54],[177,146,192,55],[177,149,193,14],[177,160,193,25],[177,163,194,14],[177,167,194,18],[177,168,194,19,"transports"],[177,178,194,29],[177,179,194,30],[177,180,194,31],[177,181,194,32],[178,6,195,8],[178,10,195,12],[178,11,195,13,"readyState"],[178,21,195,23],[178,24,195,26],[178,33,195,35],[179,6,196,8],[179,12,196,14,"transport"],[179,21,196,23],[179,24,196,26],[179,28,196,30],[179,29,196,31,"createTransport"],[179,44,196,46],[179,45,196,47,"transportName"],[179,58,196,60],[179,59,196,61],[180,6,197,8,"transport"],[180,15,197,17],[180,16,197,18,"open"],[180,20,197,22],[180,21,197,23],[180,22,197,24],[181,6,198,8],[181,10,198,12],[181,11,198,13,"setTransport"],[181,23,198,25],[181,24,198,26,"transport"],[181,33,198,35],[181,34,198,36],[182,4,199,4],[183,4,200,4],[184,0,201,0],[185,0,202,0],[186,0,203,0],[187,0,204,0],[188,4,205,4,"setTransport"],[188,16,205,16,"setTransport"],[188,17,205,17,"transport"],[188,26,205,26],[188,28,205,28],[189,6,206,8],[189,10,206,12],[189,14,206,16],[189,15,206,17,"transport"],[189,24,206,26],[189,26,206,28],[190,8,207,12],[190,12,207,16],[190,13,207,17,"transport"],[190,22,207,26],[190,23,207,27,"removeAllListeners"],[190,41,207,45],[190,42,207,46],[190,43,207,47],[191,6,208,8],[192,6,209,8],[193,6,210,8],[193,10,210,12],[193,11,210,13,"transport"],[193,20,210,22],[193,23,210,25,"transport"],[193,32,210,34],[194,6,211,8],[195,6,212,8,"transport"],[195,15,212,17],[195,16,213,13,"on"],[195,18,213,15],[195,19,213,16],[195,26,213,23],[195,28,213,25],[195,32,213,29],[195,33,213,30,"_onDrain"],[195,41,213,38],[195,42,213,39,"bind"],[195,46,213,43],[195,47,213,44],[195,51,213,48],[195,52,213,49],[195,53,213,50],[195,54,214,13,"on"],[195,56,214,15],[195,57,214,16],[195,65,214,24],[195,67,214,26],[195,71,214,30],[195,72,214,31,"_onPacket"],[195,81,214,40],[195,82,214,41,"bind"],[195,86,214,45],[195,87,214,46],[195,91,214,50],[195,92,214,51],[195,93,214,52],[195,94,215,13,"on"],[195,96,215,15],[195,97,215,16],[195,104,215,23],[195,106,215,25],[195,110,215,29],[195,111,215,30,"_onError"],[195,119,215,38],[195,120,215,39,"bind"],[195,124,215,43],[195,125,215,44],[195,129,215,48],[195,130,215,49],[195,131,215,50],[195,132,216,13,"on"],[195,134,216,15],[195,135,216,16],[195,142,216,23],[195,144,216,26,"reason"],[195,150,216,32],[195,154,216,37],[195,158,216,41],[195,159,216,42,"_onClose"],[195,167,216,50],[195,168,216,51],[195,185,216,68],[195,187,216,70,"reason"],[195,193,216,76],[195,194,216,77],[195,195,216,78],[196,4,217,4],[197,4,218,4],[198,0,219,0],[199,0,220,0],[200,0,221,0],[201,0,222,0],[202,4,223,4,"onOpen"],[202,10,223,10,"onOpen"],[202,11,223,10],[202,13,223,13],[203,6,224,8],[203,10,224,12],[203,11,224,13,"readyState"],[203,21,224,23],[203,24,224,26],[203,30,224,32],[204,6,225,8,"SocketWithoutUpgrade"],[204,26,225,28],[204,27,225,29,"priorWebsocketSuccess"],[204,48,225,50],[204,51,226,12],[204,62,226,23],[204,67,226,28],[204,71,226,32],[204,72,226,33,"transport"],[204,81,226,42],[204,82,226,43,"name"],[204,86,226,47],[205,6,227,8],[205,10,227,12],[205,11,227,13,"emitReserved"],[205,23,227,25],[205,24,227,26],[205,30,227,32],[205,31,227,33],[206,6,228,8],[206,10,228,12],[206,11,228,13,"flush"],[206,16,228,18],[206,17,228,19],[206,18,228,20],[207,4,229,4],[208,4,230,4],[209,0,231,0],[210,0,232,0],[211,0,233,0],[212,0,234,0],[213,4,235,4,"_onPacket"],[213,13,235,13,"_onPacket"],[213,14,235,14,"packet"],[213,20,235,20],[213,22,235,22],[214,6,236,8],[214,10,236,12],[214,19,236,21],[214,24,236,26],[214,28,236,30],[214,29,236,31,"readyState"],[214,39,236,41],[214,43,237,12],[214,49,237,18],[214,54,237,23],[214,58,237,27],[214,59,237,28,"readyState"],[214,69,237,38],[214,73,238,12],[214,82,238,21],[214,87,238,26],[214,91,238,30],[214,92,238,31,"readyState"],[214,102,238,41],[214,104,238,43],[215,8,239,12],[215,12,239,16],[215,13,239,17,"emitReserved"],[215,25,239,29],[215,26,239,30],[215,34,239,38],[215,36,239,40,"packet"],[215,42,239,46],[215,43,239,47],[216,8,240,12],[217,8,241,12],[217,12,241,16],[217,13,241,17,"emitReserved"],[217,25,241,29],[217,26,241,30],[217,37,241,41],[217,38,241,42],[218,8,242,12],[218,16,242,20,"packet"],[218,22,242,26],[218,23,242,27,"type"],[218,27,242,31],[219,10,243,16],[219,15,243,21],[219,21,243,27],[220,12,244,20],[220,16,244,24],[220,17,244,25,"onHandshake"],[220,28,244,36],[220,29,244,37,"JSON"],[220,33,244,41],[220,34,244,42,"parse"],[220,39,244,47],[220,40,244,48,"packet"],[220,46,244,54],[220,47,244,55,"data"],[220,51,244,59],[220,52,244,60],[220,53,244,61],[221,12,245,20],[222,10,246,16],[222,15,246,21],[222,21,246,27],[223,12,247,20],[223,16,247,24],[223,17,247,25,"_sendPacket"],[223,28,247,36],[223,29,247,37],[223,35,247,43],[223,36,247,44],[224,12,248,20],[224,16,248,24],[224,17,248,25,"emitReserved"],[224,29,248,37],[224,30,248,38],[224,36,248,44],[224,37,248,45],[225,12,249,20],[225,16,249,24],[225,17,249,25,"emitReserved"],[225,29,249,37],[225,30,249,38],[225,36,249,44],[225,37,249,45],[226,12,250,20],[226,16,250,24],[226,17,250,25,"_resetPingTimeout"],[226,34,250,42],[226,35,250,43],[226,36,250,44],[227,12,251,20],[228,10,252,16],[228,15,252,21],[228,22,252,28],[229,12,253,20],[229,18,253,26,"err"],[229,21,253,29],[229,24,253,32],[229,28,253,36,"Error"],[229,33,253,41],[229,34,253,42],[229,48,253,56],[229,49,253,57],[230,12,254,20],[231,12,255,20,"err"],[231,15,255,23],[231,16,255,24,"code"],[231,20,255,28],[231,23,255,31,"packet"],[231,29,255,37],[231,30,255,38,"data"],[231,34,255,42],[232,12,256,20],[232,16,256,24],[232,17,256,25,"_onError"],[232,25,256,33],[232,26,256,34,"err"],[232,29,256,37],[232,30,256,38],[233,12,257,20],[234,10,258,16],[234,15,258,21],[234,24,258,30],[235,12,259,20],[235,16,259,24],[235,17,259,25,"emitReserved"],[235,29,259,37],[235,30,259,38],[235,36,259,44],[235,38,259,46,"packet"],[235,44,259,52],[235,45,259,53,"data"],[235,49,259,57],[235,50,259,58],[236,12,260,20],[236,16,260,24],[236,17,260,25,"emitReserved"],[236,29,260,37],[236,30,260,38],[236,39,260,47],[236,41,260,49,"packet"],[236,47,260,55],[236,48,260,56,"data"],[236,52,260,60],[236,53,260,61],[237,12,261,20],[238,8,262,12],[239,6,263,8],[239,7,263,9],[239,13,264,13],[239,14,265,8],[240,4,266,4],[241,4,267,4],[242,0,268,0],[243,0,269,0],[244,0,270,0],[245,0,271,0],[246,0,272,0],[247,4,273,4,"onHandshake"],[247,15,273,15,"onHandshake"],[247,16,273,16,"data"],[247,20,273,20],[247,22,273,22],[248,6,274,8],[248,10,274,12],[248,11,274,13,"emitReserved"],[248,23,274,25],[248,24,274,26],[248,35,274,37],[248,37,274,39,"data"],[248,41,274,43],[248,42,274,44],[249,6,275,8],[249,10,275,12],[249,11,275,13,"id"],[249,13,275,15],[249,16,275,18,"data"],[249,20,275,22],[249,21,275,23,"sid"],[249,24,275,26],[250,6,276,8],[250,10,276,12],[250,11,276,13,"transport"],[250,20,276,22],[250,21,276,23,"query"],[250,26,276,28],[250,27,276,29,"sid"],[250,30,276,32],[250,33,276,35,"data"],[250,37,276,39],[250,38,276,40,"sid"],[250,41,276,43],[251,6,277,8],[251,10,277,12],[251,11,277,13,"_pingInterval"],[251,24,277,26],[251,27,277,29,"data"],[251,31,277,33],[251,32,277,34,"pingInterval"],[251,44,277,46],[252,6,278,8],[252,10,278,12],[252,11,278,13,"_pingTimeout"],[252,23,278,25],[252,26,278,28,"data"],[252,30,278,32],[252,31,278,33,"pingTimeout"],[252,42,278,44],[253,6,279,8],[253,10,279,12],[253,11,279,13,"_maxPayload"],[253,22,279,24],[253,25,279,27,"data"],[253,29,279,31],[253,30,279,32,"maxPayload"],[253,40,279,42],[254,6,280,8],[254,10,280,12],[254,11,280,13,"onOpen"],[254,17,280,19],[254,18,280,20],[254,19,280,21],[255,6,281,8],[256,6,282,8],[256,10,282,12],[256,18,282,20],[256,23,282,25],[256,27,282,29],[256,28,282,30,"readyState"],[256,38,282,40],[256,40,283,12],[257,6,284,8],[257,10,284,12],[257,11,284,13,"_resetPingTimeout"],[257,28,284,30],[257,29,284,31],[257,30,284,32],[258,4,285,4],[259,4,286,4],[260,0,287,0],[261,0,288,0],[262,0,289,0],[263,0,290,0],[264,4,291,4,"_resetPingTimeout"],[264,21,291,21,"_resetPingTimeout"],[264,22,291,21],[264,24,291,24],[265,6,292,8],[265,10,292,12],[265,11,292,13,"clearTimeoutFn"],[265,25,292,27],[265,26,292,28],[265,30,292,32],[265,31,292,33,"_pingTimeoutTimer"],[265,48,292,50],[265,49,292,51],[266,6,293,8],[266,12,293,14,"delay"],[266,17,293,19],[266,20,293,22],[266,24,293,26],[266,25,293,27,"_pingInterval"],[266,38,293,40],[266,41,293,43],[266,45,293,47],[266,46,293,48,"_pingTimeout"],[266,58,293,60],[267,6,294,8],[267,10,294,12],[267,11,294,13,"_pingTimeoutTime"],[267,27,294,29],[267,30,294,32,"Date"],[267,34,294,36],[267,35,294,37,"now"],[267,38,294,40],[267,39,294,41],[267,40,294,42],[267,43,294,45,"delay"],[267,48,294,50],[268,6,295,8],[268,10,295,12],[268,11,295,13,"_pingTimeoutTimer"],[268,28,295,30],[268,31,295,33],[268,35,295,37],[268,36,295,38,"setTimeoutFn"],[268,48,295,50],[268,49,295,51],[268,55,295,57],[269,8,296,12],[269,12,296,16],[269,13,296,17,"_onClose"],[269,21,296,25],[269,22,296,26],[269,36,296,40],[269,37,296,41],[270,6,297,8],[270,7,297,9],[270,9,297,11,"delay"],[270,14,297,16],[270,15,297,17],[271,6,298,8],[271,10,298,12],[271,14,298,16],[271,15,298,17,"opts"],[271,19,298,21],[271,20,298,22,"autoUnref"],[271,29,298,31],[271,31,298,33],[272,8,299,12],[272,12,299,16],[272,13,299,17,"_pingTimeoutTimer"],[272,30,299,34],[272,31,299,35,"unref"],[272,36,299,40],[272,37,299,41],[272,38,299,42],[273,6,300,8],[274,4,301,4],[275,4,302,4],[276,0,303,0],[277,0,304,0],[278,0,305,0],[279,0,306,0],[280,4,307,4,"_onDrain"],[280,12,307,12,"_onDrain"],[280,13,307,12],[280,15,307,15],[281,6,308,8],[281,10,308,12],[281,11,308,13,"writeBuffer"],[281,22,308,24],[281,23,308,25,"splice"],[281,29,308,31],[281,30,308,32],[281,31,308,33],[281,33,308,35],[281,37,308,39],[281,38,308,40,"_prevBufferLen"],[281,52,308,54],[281,53,308,55],[282,6,309,8],[283,6,310,8],[284,6,311,8],[285,6,312,8],[285,10,312,12],[285,11,312,13,"_prevBufferLen"],[285,25,312,27],[285,28,312,30],[285,29,312,31],[286,6,313,8],[286,10,313,12],[286,11,313,13],[286,16,313,18],[286,20,313,22],[286,21,313,23,"writeBuffer"],[286,32,313,34],[286,33,313,35,"length"],[286,39,313,41],[286,41,313,43],[287,8,314,12],[287,12,314,16],[287,13,314,17,"emitReserved"],[287,25,314,29],[287,26,314,30],[287,33,314,37],[287,34,314,38],[288,6,315,8],[288,7,315,9],[288,13,316,13],[289,8,317,12],[289,12,317,16],[289,13,317,17,"flush"],[289,18,317,22],[289,19,317,23],[289,20,317,24],[290,6,318,8],[291,4,319,4],[292,4,320,4],[293,0,321,0],[294,0,322,0],[295,0,323,0],[296,0,324,0],[297,4,325,4,"flush"],[297,9,325,9,"flush"],[297,10,325,9],[297,12,325,12],[298,6,326,8],[298,10,326,12],[298,18,326,20],[298,23,326,25],[298,27,326,29],[298,28,326,30,"readyState"],[298,38,326,40],[298,42,327,12],[298,46,327,16],[298,47,327,17,"transport"],[298,56,327,26],[298,57,327,27,"writable"],[298,65,327,35],[298,69,328,12],[298,70,328,13],[298,74,328,17],[298,75,328,18,"upgrading"],[298,84,328,27],[298,88,329,12],[298,92,329,16],[298,93,329,17,"writeBuffer"],[298,104,329,28],[298,105,329,29,"length"],[298,111,329,35],[298,113,329,37],[299,8,330,12],[299,14,330,18,"packets"],[299,21,330,25],[299,24,330,28],[299,28,330,32],[299,29,330,33,"_getWritablePackets"],[299,48,330,52],[299,49,330,53],[299,50,330,54],[300,8,331,12],[300,12,331,16],[300,13,331,17,"transport"],[300,22,331,26],[300,23,331,27,"send"],[300,27,331,31],[300,28,331,32,"packets"],[300,35,331,39],[300,36,331,40],[301,8,332,12],[302,8,333,12],[303,8,334,12],[303,12,334,16],[303,13,334,17,"_prevBufferLen"],[303,27,334,31],[303,30,334,34,"packets"],[303,37,334,41],[303,38,334,42,"length"],[303,44,334,48],[304,8,335,12],[304,12,335,16],[304,13,335,17,"emitReserved"],[304,25,335,29],[304,26,335,30],[304,33,335,37],[304,34,335,38],[305,6,336,8],[306,4,337,4],[307,4,338,4],[308,0,339,0],[309,0,340,0],[310,0,341,0],[311,0,342,0],[312,0,343,0],[313,4,344,4,"_getWritablePackets"],[313,23,344,23,"_getWritablePackets"],[313,24,344,23],[313,26,344,26],[314,6,345,8],[314,12,345,14,"shouldCheckPayloadSize"],[314,34,345,36],[314,37,345,39],[314,41,345,43],[314,42,345,44,"_maxPayload"],[314,53,345,55],[314,57,346,12],[314,61,346,16],[314,62,346,17,"transport"],[314,71,346,26],[314,72,346,27,"name"],[314,76,346,31],[314,81,346,36],[314,90,346,45],[314,94,347,12],[314,98,347,16],[314,99,347,17,"writeBuffer"],[314,110,347,28],[314,111,347,29,"length"],[314,117,347,35],[314,120,347,38],[314,121,347,39],[315,6,348,8],[315,10,348,12],[315,11,348,13,"shouldCheckPayloadSize"],[315,33,348,35],[315,35,348,37],[316,8,349,12],[316,15,349,19],[316,19,349,23],[316,20,349,24,"writeBuffer"],[316,31,349,35],[317,6,350,8],[318,6,351,8],[318,10,351,12,"payloadSize"],[318,21,351,23],[318,24,351,26],[318,25,351,27],[318,26,351,28],[318,27,351,29],[319,6,352,8],[319,11,352,13],[319,15,352,17,"i"],[319,16,352,18],[319,19,352,21],[319,20,352,22],[319,22,352,24,"i"],[319,23,352,25],[319,26,352,28],[319,30,352,32],[319,31,352,33,"writeBuffer"],[319,42,352,44],[319,43,352,45,"length"],[319,49,352,51],[319,51,352,53,"i"],[319,52,352,54],[319,54,352,56],[319,56,352,58],[320,8,353,12],[320,14,353,18,"data"],[320,18,353,22],[320,21,353,25],[320,25,353,29],[320,26,353,30,"writeBuffer"],[320,37,353,41],[320,38,353,42,"i"],[320,39,353,43],[320,40,353,44],[320,41,353,45,"data"],[320,45,353,49],[321,8,354,12],[321,12,354,16,"data"],[321,16,354,20],[321,18,354,22],[322,10,355,16,"payloadSize"],[322,21,355,27],[322,25,355,31],[322,29,355,31,"byteLength"],[322,45,355,41],[322,47,355,42,"data"],[322,51,355,46],[322,52,355,47],[323,8,356,12],[324,8,357,12],[324,12,357,16,"i"],[324,13,357,17],[324,16,357,20],[324,17,357,21],[324,21,357,25,"payloadSize"],[324,32,357,36],[324,35,357,39],[324,39,357,43],[324,40,357,44,"_maxPayload"],[324,51,357,55],[324,53,357,57],[325,10,358,16],[325,17,358,23],[325,21,358,27],[325,22,358,28,"writeBuffer"],[325,33,358,39],[325,34,358,40,"slice"],[325,39,358,45],[325,40,358,46],[325,41,358,47],[325,43,358,49,"i"],[325,44,358,50],[325,45,358,51],[326,8,359,12],[327,8,360,12,"payloadSize"],[327,19,360,23],[327,23,360,27],[327,24,360,28],[327,25,360,29],[327,26,360,30],[328,6,361,8],[329,6,362,8],[329,13,362,15],[329,17,362,19],[329,18,362,20,"writeBuffer"],[329,29,362,31],[330,4,363,4],[331,4,364,4],[332,0,365,0],[333,0,366,0],[334,0,367,0],[335,0,368,0],[336,0,369,0],[337,0,370,0],[338,0,371,0],[339,0,372,0],[340,4,373,4],[341,4,373,18,"_hasPingExpired"],[341,19,373,33,"_hasPingExpired"],[341,20,373,33],[341,22,373,36],[342,6,374,8],[342,10,374,12],[342,11,374,13],[342,15,374,17],[342,16,374,18,"_pingTimeoutTime"],[342,32,374,34],[342,34,375,12],[342,41,375,19],[342,45,375,23],[343,6,376,8],[343,12,376,14,"hasExpired"],[343,22,376,24],[343,25,376,27,"Date"],[343,29,376,31],[343,30,376,32,"now"],[343,33,376,35],[343,34,376,36],[343,35,376,37],[343,38,376,40],[343,42,376,44],[343,43,376,45,"_pingTimeoutTime"],[343,59,376,61],[344,6,377,8],[344,10,377,12,"hasExpired"],[344,20,377,22],[344,22,377,24],[345,8,378,12],[345,12,378,16],[345,13,378,17,"_pingTimeoutTime"],[345,29,378,33],[345,32,378,36],[345,33,378,37],[346,8,379,12],[346,12,379,12,"nextTick"],[346,33,379,20],[346,35,379,21],[346,41,379,27],[347,10,380,16],[347,14,380,20],[347,15,380,21,"_onClose"],[347,23,380,29],[347,24,380,30],[347,38,380,44],[347,39,380,45],[348,8,381,12],[348,9,381,13],[348,11,381,15],[348,15,381,19],[348,16,381,20,"setTimeoutFn"],[348,28,381,32],[348,29,381,33],[349,6,382,8],[350,6,383,8],[350,13,383,15,"hasExpired"],[350,23,383,25],[351,4,384,4],[352,4,385,4],[353,0,386,0],[354,0,387,0],[355,0,388,0],[356,0,389,0],[357,0,390,0],[358,0,391,0],[359,0,392,0],[360,4,393,4,"write"],[360,9,393,9,"write"],[360,10,393,10,"msg"],[360,13,393,13],[360,15,393,15,"options"],[360,22,393,22],[360,24,393,24,"fn"],[360,26,393,26],[360,28,393,28],[361,6,394,8],[361,10,394,12],[361,11,394,13,"_sendPacket"],[361,22,394,24],[361,23,394,25],[361,32,394,34],[361,34,394,36,"msg"],[361,37,394,39],[361,39,394,41,"options"],[361,46,394,48],[361,48,394,50,"fn"],[361,50,394,52],[361,51,394,53],[362,6,395,8],[362,13,395,15],[362,17,395,19],[363,4,396,4],[364,4,397,4],[365,0,398,0],[366,0,399,0],[367,0,400,0],[368,0,401,0],[369,0,402,0],[370,0,403,0],[371,0,404,0],[372,4,405,4,"send"],[372,8,405,8,"send"],[372,9,405,9,"msg"],[372,12,405,12],[372,14,405,14,"options"],[372,21,405,21],[372,23,405,23,"fn"],[372,25,405,25],[372,27,405,27],[373,6,406,8],[373,10,406,12],[373,11,406,13,"_sendPacket"],[373,22,406,24],[373,23,406,25],[373,32,406,34],[373,34,406,36,"msg"],[373,37,406,39],[373,39,406,41,"options"],[373,46,406,48],[373,48,406,50,"fn"],[373,50,406,52],[373,51,406,53],[374,6,407,8],[374,13,407,15],[374,17,407,19],[375,4,408,4],[376,4,409,4],[377,0,410,0],[378,0,411,0],[379,0,412,0],[380,0,413,0],[381,0,414,0],[382,0,415,0],[383,0,416,0],[384,0,417,0],[385,4,418,4,"_sendPacket"],[385,15,418,15,"_sendPacket"],[385,16,418,16,"type"],[385,20,418,20],[385,22,418,22,"data"],[385,26,418,26],[385,28,418,28,"options"],[385,35,418,35],[385,37,418,37,"fn"],[385,39,418,39],[385,41,418,41],[386,6,419,8],[386,10,419,12],[386,20,419,22],[386,25,419,27],[386,32,419,34,"data"],[386,36,419,38],[386,38,419,40],[387,8,420,12,"fn"],[387,10,420,14],[387,13,420,17,"data"],[387,17,420,21],[388,8,421,12,"data"],[388,12,421,16],[388,15,421,19,"undefined"],[388,24,421,28],[389,6,422,8],[390,6,423,8],[390,10,423,12],[390,20,423,22],[390,25,423,27],[390,32,423,34,"options"],[390,39,423,41],[390,41,423,43],[391,8,424,12,"fn"],[391,10,424,14],[391,13,424,17,"options"],[391,20,424,24],[392,8,425,12,"options"],[392,15,425,19],[392,18,425,22],[392,22,425,26],[393,6,426,8],[394,6,427,8],[394,10,427,12],[394,19,427,21],[394,24,427,26],[394,28,427,30],[394,29,427,31,"readyState"],[394,39,427,41],[394,43,427,45],[394,51,427,53],[394,56,427,58],[394,60,427,62],[394,61,427,63,"readyState"],[394,71,427,73],[394,73,427,75],[395,8,428,12],[396,6,429,8],[397,6,430,8,"options"],[397,13,430,15],[397,16,430,18,"options"],[397,23,430,25],[397,27,430,29],[397,28,430,30],[397,29,430,31],[398,6,431,8,"options"],[398,13,431,15],[398,14,431,16,"compress"],[398,22,431,24],[398,25,431,27],[398,30,431,32],[398,35,431,37,"options"],[398,42,431,44],[398,43,431,45,"compress"],[398,51,431,53],[399,6,432,8],[399,12,432,14,"packet"],[399,18,432,20],[399,21,432,23],[400,8,433,12,"type"],[400,12,433,16],[400,14,433,18,"type"],[400,18,433,22],[401,8,434,12,"data"],[401,12,434,16],[401,14,434,18,"data"],[401,18,434,22],[402,8,435,12,"options"],[402,15,435,19],[402,17,435,21,"options"],[403,6,436,8],[403,7,436,9],[404,6,437,8],[404,10,437,12],[404,11,437,13,"emitReserved"],[404,23,437,25],[404,24,437,26],[404,38,437,40],[404,40,437,42,"packet"],[404,46,437,48],[404,47,437,49],[405,6,438,8],[405,10,438,12],[405,11,438,13,"writeBuffer"],[405,22,438,24],[405,23,438,25,"push"],[405,27,438,29],[405,28,438,30,"packet"],[405,34,438,36],[405,35,438,37],[406,6,439,8],[406,10,439,12,"fn"],[406,12,439,14],[406,14,440,12],[406,18,440,16],[406,19,440,17,"once"],[406,23,440,21],[406,24,440,22],[406,31,440,29],[406,33,440,31,"fn"],[406,35,440,33],[406,36,440,34],[407,6,441,8],[407,10,441,12],[407,11,441,13,"flush"],[407,16,441,18],[407,17,441,19],[407,18,441,20],[408,4,442,4],[409,4,443,4],[410,0,444,0],[411,0,445,0],[412,4,446,4,"close"],[412,9,446,9,"close"],[412,10,446,9],[412,12,446,12],[413,6,447,8],[413,12,447,14,"close"],[413,17,447,19],[413,20,447,22,"close"],[413,21,447,22],[413,26,447,28],[414,8,448,12],[414,12,448,16],[414,13,448,17,"_onClose"],[414,21,448,25],[414,22,448,26],[414,36,448,40],[414,37,448,41],[415,8,449,12],[415,12,449,16],[415,13,449,17,"transport"],[415,22,449,26],[415,23,449,27,"close"],[415,28,449,32],[415,29,449,33],[415,30,449,34],[416,6,450,8],[416,7,450,9],[417,6,451,8],[417,12,451,14,"cleanupAndClose"],[417,27,451,29],[417,30,451,32,"cleanupAndClose"],[417,31,451,32],[417,36,451,38],[418,8,452,12],[418,12,452,16],[418,13,452,17,"off"],[418,16,452,20],[418,17,452,21],[418,26,452,30],[418,28,452,32,"cleanupAndClose"],[418,43,452,47],[418,44,452,48],[419,8,453,12],[419,12,453,16],[419,13,453,17,"off"],[419,16,453,20],[419,17,453,21],[419,31,453,35],[419,33,453,37,"cleanupAndClose"],[419,48,453,52],[419,49,453,53],[420,8,454,12,"close"],[420,13,454,17],[420,14,454,18],[420,15,454,19],[421,6,455,8],[421,7,455,9],[422,6,456,8],[422,12,456,14,"waitForUpgrade"],[422,26,456,28],[422,29,456,31,"waitForUpgrade"],[422,30,456,31],[422,35,456,37],[423,8,457,12],[424,8,458,12],[424,12,458,16],[424,13,458,17,"once"],[424,17,458,21],[424,18,458,22],[424,27,458,31],[424,29,458,33,"cleanupAndClose"],[424,44,458,48],[424,45,458,49],[425,8,459,12],[425,12,459,16],[425,13,459,17,"once"],[425,17,459,21],[425,18,459,22],[425,32,459,36],[425,34,459,38,"cleanupAndClose"],[425,49,459,53],[425,50,459,54],[426,6,460,8],[426,7,460,9],[427,6,461,8],[427,10,461,12],[427,19,461,21],[427,24,461,26],[427,28,461,30],[427,29,461,31,"readyState"],[427,39,461,41],[427,43,461,45],[427,49,461,51],[427,54,461,56],[427,58,461,60],[427,59,461,61,"readyState"],[427,69,461,71],[427,71,461,73],[428,8,462,12],[428,12,462,16],[428,13,462,17,"readyState"],[428,23,462,27],[428,26,462,30],[428,35,462,39],[429,8,463,12],[429,12,463,16],[429,16,463,20],[429,17,463,21,"writeBuffer"],[429,28,463,32],[429,29,463,33,"length"],[429,35,463,39],[429,37,463,41],[430,10,464,16],[430,14,464,20],[430,15,464,21,"once"],[430,19,464,25],[430,20,464,26],[430,27,464,33],[430,29,464,35],[430,35,464,41],[431,12,465,20],[431,16,465,24],[431,20,465,28],[431,21,465,29,"upgrading"],[431,30,465,38],[431,32,465,40],[432,14,466,24,"waitForUpgrade"],[432,28,466,38],[432,29,466,39],[432,30,466,40],[433,12,467,20],[433,13,467,21],[433,19,468,25],[434,14,469,24,"close"],[434,19,469,29],[434,20,469,30],[434,21,469,31],[435,12,470,20],[436,10,471,16],[436,11,471,17],[436,12,471,18],[437,8,472,12],[437,9,472,13],[437,15,473,17],[437,19,473,21],[437,23,473,25],[437,24,473,26,"upgrading"],[437,33,473,35],[437,35,473,37],[438,10,474,16,"waitForUpgrade"],[438,24,474,30],[438,25,474,31],[438,26,474,32],[439,8,475,12],[439,9,475,13],[439,15,476,17],[440,10,477,16,"close"],[440,15,477,21],[440,16,477,22],[440,17,477,23],[441,8,478,12],[442,6,479,8],[443,6,480,8],[443,13,480,15],[443,17,480,19],[444,4,481,4],[445,4,482,4],[446,0,483,0],[447,0,484,0],[448,0,485,0],[449,0,486,0],[450,4,487,4,"_onError"],[450,12,487,12,"_onError"],[450,13,487,13,"err"],[450,16,487,16],[450,18,487,18],[451,6,488,8,"SocketWithoutUpgrade"],[451,26,488,28],[451,27,488,29,"priorWebsocketSuccess"],[451,48,488,50],[451,51,488,53],[451,56,488,58],[452,6,489,8],[452,10,489,12],[452,14,489,16],[452,15,489,17,"opts"],[452,19,489,21],[452,20,489,22,"tryAllTransports"],[452,36,489,38],[452,40,490,12],[452,44,490,16],[452,45,490,17,"transports"],[452,55,490,27],[452,56,490,28,"length"],[452,62,490,34],[452,65,490,37],[452,66,490,38],[452,70,491,12],[452,74,491,16],[452,75,491,17,"readyState"],[452,85,491,27],[452,90,491,32],[452,99,491,41],[452,101,491,43],[453,8,492,12],[453,12,492,16],[453,13,492,17,"transports"],[453,23,492,27],[453,24,492,28,"shift"],[453,29,492,33],[453,30,492,34],[453,31,492,35],[454,8,493,12],[454,15,493,19],[454,19,493,23],[454,20,493,24,"_open"],[454,25,493,29],[454,26,493,30],[454,27,493,31],[455,6,494,8],[456,6,495,8],[456,10,495,12],[456,11,495,13,"emitReserved"],[456,23,495,25],[456,24,495,26],[456,31,495,33],[456,33,495,35,"err"],[456,36,495,38],[456,37,495,39],[457,6,496,8],[457,10,496,12],[457,11,496,13,"_onClose"],[457,19,496,21],[457,20,496,22],[457,37,496,39],[457,39,496,41,"err"],[457,42,496,44],[457,43,496,45],[458,4,497,4],[459,4,498,4],[460,0,499,0],[461,0,500,0],[462,0,501,0],[463,0,502,0],[464,4,503,4,"_onClose"],[464,12,503,12,"_onClose"],[464,13,503,13,"reason"],[464,19,503,19],[464,21,503,21,"description"],[464,32,503,32],[464,34,503,34],[465,6,504,8],[465,10,504,12],[465,19,504,21],[465,24,504,26],[465,28,504,30],[465,29,504,31,"readyState"],[465,39,504,41],[465,43,505,12],[465,49,505,18],[465,54,505,23],[465,58,505,27],[465,59,505,28,"readyState"],[465,69,505,38],[465,73,506,12],[465,82,506,21],[465,87,506,26],[465,91,506,30],[465,92,506,31,"readyState"],[465,102,506,41],[465,104,506,43],[466,8,507,12],[467,8,508,12],[467,12,508,16],[467,13,508,17,"clearTimeoutFn"],[467,27,508,31],[467,28,508,32],[467,32,508,36],[467,33,508,37,"_pingTimeoutTimer"],[467,50,508,54],[467,51,508,55],[468,8,509,12],[469,8,510,12],[469,12,510,16],[469,13,510,17,"transport"],[469,22,510,26],[469,23,510,27,"removeAllListeners"],[469,41,510,45],[469,42,510,46],[469,49,510,53],[469,50,510,54],[470,8,511,12],[471,8,512,12],[471,12,512,16],[471,13,512,17,"transport"],[471,22,512,26],[471,23,512,27,"close"],[471,28,512,32],[471,29,512,33],[471,30,512,34],[472,8,513,12],[473,8,514,12],[473,12,514,16],[473,13,514,17,"transport"],[473,22,514,26],[473,23,514,27,"removeAllListeners"],[473,41,514,45],[473,42,514,46],[473,43,514,47],[474,8,515,12],[474,12,515,16,"withEventListeners"],[474,30,515,34],[474,32,515,36],[475,10,516,16],[475,14,516,20],[475,18,516,24],[475,19,516,25,"_beforeunloadEventListener"],[475,45,516,51],[475,47,516,53],[476,12,517,20,"removeEventListener"],[476,31,517,39],[476,32,517,40],[476,46,517,54],[476,48,517,56],[476,52,517,60],[476,53,517,61,"_beforeunloadEventListener"],[476,79,517,87],[476,81,517,89],[476,86,517,94],[476,87,517,95],[477,10,518,16],[478,10,519,16],[478,14,519,20],[478,18,519,24],[478,19,519,25,"_offlineEventListener"],[478,40,519,46],[478,42,519,48],[479,12,520,20],[479,18,520,26,"i"],[479,19,520,27],[479,22,520,30,"OFFLINE_EVENT_LISTENERS"],[479,45,520,53],[479,46,520,54,"indexOf"],[479,53,520,61],[479,54,520,62],[479,58,520,66],[479,59,520,67,"_offlineEventListener"],[479,80,520,88],[479,81,520,89],[480,12,521,20],[480,16,521,24,"i"],[480,17,521,25],[480,22,521,30],[480,23,521,31],[480,24,521,32],[480,26,521,34],[481,14,522,24,"OFFLINE_EVENT_LISTENERS"],[481,37,522,47],[481,38,522,48,"splice"],[481,44,522,54],[481,45,522,55,"i"],[481,46,522,56],[481,48,522,58],[481,49,522,59],[481,50,522,60],[482,12,523,20],[483,10,524,16],[484,8,525,12],[485,8,526,12],[486,8,527,12],[486,12,527,16],[486,13,527,17,"readyState"],[486,23,527,27],[486,26,527,30],[486,34,527,38],[487,8,528,12],[488,8,529,12],[488,12,529,16],[488,13,529,17,"id"],[488,15,529,19],[488,18,529,22],[488,22,529,26],[489,8,530,12],[490,8,531,12],[490,12,531,16],[490,13,531,17,"emitReserved"],[490,25,531,29],[490,26,531,30],[490,33,531,37],[490,35,531,39,"reason"],[490,41,531,45],[490,43,531,47,"description"],[490,54,531,58],[490,55,531,59],[491,8,532,12],[492,8,533,12],[493,8,534,12],[493,12,534,16],[493,13,534,17,"writeBuffer"],[493,24,534,28],[493,27,534,31],[493,29,534,33],[494,8,535,12],[494,12,535,16],[494,13,535,17,"_prevBufferLen"],[494,27,535,31],[494,30,535,34],[494,31,535,35],[495,6,536,8],[496,4,537,4],[497,2,538,0],[498,2,538,1,"exports"],[498,9,538,1],[498,10,538,1,"SocketWithoutUpgrade"],[498,30,538,1],[498,33,538,1,"SocketWithoutUpgrade"],[498,53,538,1],[499,2,539,0,"SocketWithoutUpgrade"],[499,22,539,20],[499,23,539,21,"protocol"],[499,31,539,29],[499,34,539,32,"protocol"],[499,50,539,40],[500,2,540,0],[501,0,541,0],[502,0,542,0],[503,0,543,0],[504,0,544,0],[505,0,545,0],[506,0,546,0],[507,0,547,0],[508,0,548,0],[509,0,549,0],[510,0,550,0],[511,0,551,0],[512,0,552,0],[513,0,553,0],[514,0,554,0],[515,0,555,0],[516,0,556,0],[517,0,557,0],[518,0,558,0],[519,0,559,0],[520,0,560,0],[521,0,561,0],[522,0,562,0],[523,2,563,7],[523,8,563,13,"SocketWithUpgrade"],[523,25,563,30],[523,34,563,39,"SocketWithoutUpgrade"],[523,54,563,59],[523,55,563,60],[524,4,564,4,"constructor"],[524,15,564,15,"constructor"],[524,16,564,15],[524,18,564,18],[525,6,565,8],[525,11,565,13],[525,12,565,14],[525,15,565,17,"arguments"],[525,24,565,26],[525,25,565,27],[526,6,566,8],[526,10,566,12],[526,11,566,13,"_upgrades"],[526,20,566,22],[526,23,566,25],[526,25,566,27],[527,4,567,4],[528,4,568,4,"onOpen"],[528,10,568,10,"onOpen"],[528,11,568,10],[528,13,568,13],[529,6,569,8],[529,11,569,13],[529,12,569,14,"onOpen"],[529,18,569,20],[529,19,569,21],[529,20,569,22],[530,6,570,8],[530,10,570,12],[530,16,570,18],[530,21,570,23],[530,25,570,27],[530,26,570,28,"readyState"],[530,36,570,38],[530,40,570,42],[530,44,570,46],[530,45,570,47,"opts"],[530,49,570,51],[530,50,570,52,"upgrade"],[530,57,570,59],[530,59,570,61],[531,8,571,12],[531,13,571,17],[531,17,571,21,"i"],[531,18,571,22],[531,21,571,25],[531,22,571,26],[531,24,571,28,"i"],[531,25,571,29],[531,28,571,32],[531,32,571,36],[531,33,571,37,"_upgrades"],[531,42,571,46],[531,43,571,47,"length"],[531,49,571,53],[531,51,571,55,"i"],[531,52,571,56],[531,54,571,58],[531,56,571,60],[532,10,572,16],[532,14,572,20],[532,15,572,21,"_probe"],[532,21,572,27],[532,22,572,28],[532,26,572,32],[532,27,572,33,"_upgrades"],[532,36,572,42],[532,37,572,43,"i"],[532,38,572,44],[532,39,572,45],[532,40,572,46],[533,8,573,12],[534,6,574,8],[535,4,575,4],[536,4,576,4],[537,0,577,0],[538,0,578,0],[539,0,579,0],[540,0,580,0],[541,0,581,0],[542,4,582,4,"_probe"],[542,10,582,10,"_probe"],[542,11,582,11,"name"],[542,15,582,15],[542,17,582,17],[543,6,583,8],[543,10,583,12,"transport"],[543,19,583,21],[543,22,583,24],[543,26,583,28],[543,27,583,29,"createTransport"],[543,42,583,44],[543,43,583,45,"name"],[543,47,583,49],[543,48,583,50],[544,6,584,8],[544,10,584,12,"failed"],[544,16,584,18],[544,19,584,21],[544,24,584,26],[545,6,585,8,"SocketWithoutUpgrade"],[545,26,585,28],[545,27,585,29,"priorWebsocketSuccess"],[545,48,585,50],[545,51,585,53],[545,56,585,58],[546,6,586,8],[546,12,586,14,"onTransportOpen"],[546,27,586,29],[546,30,586,32,"onTransportOpen"],[546,31,586,32],[546,36,586,38],[547,8,587,12],[547,12,587,16,"failed"],[547,18,587,22],[547,20,588,16],[548,8,589,12,"transport"],[548,17,589,21],[548,18,589,22,"send"],[548,22,589,26],[548,23,589,27],[548,24,589,28],[549,10,589,30,"type"],[549,14,589,34],[549,16,589,36],[549,22,589,42],[550,10,589,44,"data"],[550,14,589,48],[550,16,589,50],[551,8,589,58],[551,9,589,59],[551,10,589,60],[551,11,589,61],[552,8,590,12,"transport"],[552,17,590,21],[552,18,590,22,"once"],[552,22,590,26],[552,23,590,27],[552,31,590,35],[552,33,590,38,"msg"],[552,36,590,41],[552,40,590,46],[553,10,591,16],[553,14,591,20,"failed"],[553,20,591,26],[553,22,592,20],[554,10,593,16],[554,14,593,20],[554,20,593,26],[554,25,593,31,"msg"],[554,28,593,34],[554,29,593,35,"type"],[554,33,593,39],[554,37,593,43],[554,44,593,50],[554,49,593,55,"msg"],[554,52,593,58],[554,53,593,59,"data"],[554,57,593,63],[554,59,593,65],[555,12,594,20],[555,16,594,24],[555,17,594,25,"upgrading"],[555,26,594,34],[555,29,594,37],[555,33,594,41],[556,12,595,20],[556,16,595,24],[556,17,595,25,"emitReserved"],[556,29,595,37],[556,30,595,38],[556,41,595,49],[556,43,595,51,"transport"],[556,52,595,60],[556,53,595,61],[557,12,596,20],[557,16,596,24],[557,17,596,25,"transport"],[557,26,596,34],[557,28,597,24],[558,12,598,20,"SocketWithoutUpgrade"],[558,32,598,40],[558,33,598,41,"priorWebsocketSuccess"],[558,54,598,62],[558,57,599,24],[558,68,599,35],[558,73,599,40,"transport"],[558,82,599,49],[558,83,599,50,"name"],[558,87,599,54],[559,12,600,20],[559,16,600,24],[559,17,600,25,"transport"],[559,26,600,34],[559,27,600,35,"pause"],[559,32,600,40],[559,33,600,41],[559,39,600,47],[560,14,601,24],[560,18,601,28,"failed"],[560,24,601,34],[560,26,602,28],[561,14,603,24],[561,18,603,28],[561,26,603,36],[561,31,603,41],[561,35,603,45],[561,36,603,46,"readyState"],[561,46,603,56],[561,48,604,28],[562,14,605,24,"cleanup"],[562,21,605,31],[562,22,605,32],[562,23,605,33],[563,14,606,24],[563,18,606,28],[563,19,606,29,"setTransport"],[563,31,606,41],[563,32,606,42,"transport"],[563,41,606,51],[563,42,606,52],[564,14,607,24,"transport"],[564,23,607,33],[564,24,607,34,"send"],[564,28,607,38],[564,29,607,39],[564,30,607,40],[565,16,607,42,"type"],[565,20,607,46],[565,22,607,48],[566,14,607,58],[566,15,607,59],[566,16,607,60],[566,17,607,61],[567,14,608,24],[567,18,608,28],[567,19,608,29,"emitReserved"],[567,31,608,41],[567,32,608,42],[567,41,608,51],[567,43,608,53,"transport"],[567,52,608,62],[567,53,608,63],[568,14,609,24,"transport"],[568,23,609,33],[568,26,609,36],[568,30,609,40],[569,14,610,24],[569,18,610,28],[569,19,610,29,"upgrading"],[569,28,610,38],[569,31,610,41],[569,36,610,46],[570,14,611,24],[570,18,611,28],[570,19,611,29,"flush"],[570,24,611,34],[570,25,611,35],[570,26,611,36],[571,12,612,20],[571,13,612,21],[571,14,612,22],[572,10,613,16],[572,11,613,17],[572,17,614,21],[573,12,615,20],[573,18,615,26,"err"],[573,21,615,29],[573,24,615,32],[573,28,615,36,"Error"],[573,33,615,41],[573,34,615,42],[573,47,615,55],[573,48,615,56],[574,12,616,20],[575,12,617,20,"err"],[575,15,617,23],[575,16,617,24,"transport"],[575,25,617,33],[575,28,617,36,"transport"],[575,37,617,45],[575,38,617,46,"name"],[575,42,617,50],[576,12,618,20],[576,16,618,24],[576,17,618,25,"emitReserved"],[576,29,618,37],[576,30,618,38],[576,44,618,52],[576,46,618,54,"err"],[576,49,618,57],[576,50,618,58],[577,10,619,16],[578,8,620,12],[578,9,620,13],[578,10,620,14],[579,6,621,8],[579,7,621,9],[580,6,622,8],[580,15,622,17,"freezeTransport"],[580,30,622,32,"freezeTransport"],[580,31,622,32],[580,33,622,35],[581,8,623,12],[581,12,623,16,"failed"],[581,18,623,22],[581,20,624,16],[582,8,625,12],[583,8,626,12,"failed"],[583,14,626,18],[583,17,626,21],[583,21,626,25],[584,8,627,12,"cleanup"],[584,15,627,19],[584,16,627,20],[584,17,627,21],[585,8,628,12,"transport"],[585,17,628,21],[585,18,628,22,"close"],[585,23,628,27],[585,24,628,28],[585,25,628,29],[586,8,629,12,"transport"],[586,17,629,21],[586,20,629,24],[586,24,629,28],[587,6,630,8],[588,6,631,8],[589,6,632,8],[589,12,632,14,"onerror"],[589,19,632,21],[589,22,632,25,"err"],[589,25,632,28],[589,29,632,33],[590,8,633,12],[590,14,633,18,"error"],[590,19,633,23],[590,22,633,26],[590,26,633,30,"Error"],[590,31,633,35],[590,32,633,36],[590,47,633,51],[590,50,633,54,"err"],[590,53,633,57],[590,54,633,58],[591,8,634,12],[592,8,635,12,"error"],[592,13,635,17],[592,14,635,18,"transport"],[592,23,635,27],[592,26,635,30,"transport"],[592,35,635,39],[592,36,635,40,"name"],[592,40,635,44],[593,8,636,12,"freezeTransport"],[593,23,636,27],[593,24,636,28],[593,25,636,29],[594,8,637,12],[594,12,637,16],[594,13,637,17,"emitReserved"],[594,25,637,29],[594,26,637,30],[594,40,637,44],[594,42,637,46,"error"],[594,47,637,51],[594,48,637,52],[595,6,638,8],[595,7,638,9],[596,6,639,8],[596,15,639,17,"onTransportClose"],[596,31,639,33,"onTransportClose"],[596,32,639,33],[596,34,639,36],[597,8,640,12,"onerror"],[597,15,640,19],[597,16,640,20],[597,34,640,38],[597,35,640,39],[598,6,641,8],[599,6,642,8],[600,6,643,8],[600,15,643,17,"onclose"],[600,22,643,24,"onclose"],[600,23,643,24],[600,25,643,27],[601,8,644,12,"onerror"],[601,15,644,19],[601,16,644,20],[601,31,644,35],[601,32,644,36],[602,6,645,8],[603,6,646,8],[604,6,647,8],[604,15,647,17,"onupgrade"],[604,24,647,26,"onupgrade"],[604,25,647,27,"to"],[604,27,647,29],[604,29,647,31],[605,8,648,12],[605,12,648,16,"transport"],[605,21,648,25],[605,25,648,29,"to"],[605,27,648,31],[605,28,648,32,"name"],[605,32,648,36],[605,37,648,41,"transport"],[605,46,648,50],[605,47,648,51,"name"],[605,51,648,55],[605,53,648,57],[606,10,649,16,"freezeTransport"],[606,25,649,31],[606,26,649,32],[606,27,649,33],[607,8,650,12],[608,6,651,8],[609,6,652,8],[610,6,653,8],[610,12,653,14,"cleanup"],[610,19,653,21],[610,22,653,24,"cleanup"],[610,23,653,24],[610,28,653,30],[611,8,654,12,"transport"],[611,17,654,21],[611,18,654,22,"removeListener"],[611,32,654,36],[611,33,654,37],[611,39,654,43],[611,41,654,45,"onTransportOpen"],[611,56,654,60],[611,57,654,61],[612,8,655,12,"transport"],[612,17,655,21],[612,18,655,22,"removeListener"],[612,32,655,36],[612,33,655,37],[612,40,655,44],[612,42,655,46,"onerror"],[612,49,655,53],[612,50,655,54],[613,8,656,12,"transport"],[613,17,656,21],[613,18,656,22,"removeListener"],[613,32,656,36],[613,33,656,37],[613,40,656,44],[613,42,656,46,"onTransportClose"],[613,58,656,62],[613,59,656,63],[614,8,657,12],[614,12,657,16],[614,13,657,17,"off"],[614,16,657,20],[614,17,657,21],[614,24,657,28],[614,26,657,30,"onclose"],[614,33,657,37],[614,34,657,38],[615,8,658,12],[615,12,658,16],[615,13,658,17,"off"],[615,16,658,20],[615,17,658,21],[615,28,658,32],[615,30,658,34,"onupgrade"],[615,39,658,43],[615,40,658,44],[616,6,659,8],[616,7,659,9],[617,6,660,8,"transport"],[617,15,660,17],[617,16,660,18,"once"],[617,20,660,22],[617,21,660,23],[617,27,660,29],[617,29,660,31,"onTransportOpen"],[617,44,660,46],[617,45,660,47],[618,6,661,8,"transport"],[618,15,661,17],[618,16,661,18,"once"],[618,20,661,22],[618,21,661,23],[618,28,661,30],[618,30,661,32,"onerror"],[618,37,661,39],[618,38,661,40],[619,6,662,8,"transport"],[619,15,662,17],[619,16,662,18,"once"],[619,20,662,22],[619,21,662,23],[619,28,662,30],[619,30,662,32,"onTransportClose"],[619,46,662,48],[619,47,662,49],[620,6,663,8],[620,10,663,12],[620,11,663,13,"once"],[620,15,663,17],[620,16,663,18],[620,23,663,25],[620,25,663,27,"onclose"],[620,32,663,34],[620,33,663,35],[621,6,664,8],[621,10,664,12],[621,11,664,13,"once"],[621,15,664,17],[621,16,664,18],[621,27,664,29],[621,29,664,31,"onupgrade"],[621,38,664,40],[621,39,664,41],[622,6,665,8],[622,10,665,12],[622,14,665,16],[622,15,665,17,"_upgrades"],[622,24,665,26],[622,25,665,27,"indexOf"],[622,32,665,34],[622,33,665,35],[622,47,665,49],[622,48,665,50],[622,53,665,55],[622,54,665,56],[622,55,665,57],[622,59,666,12,"name"],[622,63,666,16],[622,68,666,21],[622,82,666,35],[622,84,666,37],[623,8,667,12],[624,8,668,12],[624,12,668,16],[624,13,668,17,"setTimeoutFn"],[624,25,668,29],[624,26,668,30],[624,32,668,36],[625,10,669,16],[625,14,669,20],[625,15,669,21,"failed"],[625,21,669,27],[625,23,669,29],[626,12,670,20,"transport"],[626,21,670,29],[626,22,670,30,"open"],[626,26,670,34],[626,27,670,35],[626,28,670,36],[627,10,671,16],[628,8,672,12],[628,9,672,13],[628,11,672,15],[628,14,672,18],[628,15,672,19],[629,6,673,8],[629,7,673,9],[629,13,674,13],[630,8,675,12,"transport"],[630,17,675,21],[630,18,675,22,"open"],[630,22,675,26],[630,23,675,27],[630,24,675,28],[631,6,676,8],[632,4,677,4],[633,4,678,4,"onHandshake"],[633,15,678,15,"onHandshake"],[633,16,678,16,"data"],[633,20,678,20],[633,22,678,22],[634,6,679,8],[634,10,679,12],[634,11,679,13,"_upgrades"],[634,20,679,22],[634,23,679,25],[634,27,679,29],[634,28,679,30,"_filterUpgrades"],[634,43,679,45],[634,44,679,46,"data"],[634,48,679,50],[634,49,679,51,"upgrades"],[634,57,679,59],[634,58,679,60],[635,6,680,8],[635,11,680,13],[635,12,680,14,"onHandshake"],[635,23,680,25],[635,24,680,26,"data"],[635,28,680,30],[635,29,680,31],[636,4,681,4],[637,4,682,4],[638,0,683,0],[639,0,684,0],[640,0,685,0],[641,0,686,0],[642,0,687,0],[643,4,688,4,"_filterUpgrades"],[643,19,688,19,"_filterUpgrades"],[643,20,688,20,"upgrades"],[643,28,688,28],[643,30,688,30],[644,6,689,8],[644,12,689,14,"filteredUpgrades"],[644,28,689,30],[644,31,689,33],[644,33,689,35],[645,6,690,8],[645,11,690,13],[645,15,690,17,"i"],[645,16,690,18],[645,19,690,21],[645,20,690,22],[645,22,690,24,"i"],[645,23,690,25],[645,26,690,28,"upgrades"],[645,34,690,36],[645,35,690,37,"length"],[645,41,690,43],[645,43,690,45,"i"],[645,44,690,46],[645,46,690,48],[645,48,690,50],[646,8,691,12],[646,12,691,16],[646,13,691,17],[646,17,691,21],[646,18,691,22,"transports"],[646,28,691,32],[646,29,691,33,"indexOf"],[646,36,691,40],[646,37,691,41,"upgrades"],[646,45,691,49],[646,46,691,50,"i"],[646,47,691,51],[646,48,691,52],[646,49,691,53],[646,51,692,16,"filteredUpgrades"],[646,67,692,32],[646,68,692,33,"push"],[646,72,692,37],[646,73,692,38,"upgrades"],[646,81,692,46],[646,82,692,47,"i"],[646,83,692,48],[646,84,692,49],[646,85,692,50],[647,6,693,8],[648,6,694,8],[648,13,694,15,"filteredUpgrades"],[648,29,694,31],[649,4,695,4],[650,2,696,0],[651,2,697,0],[652,0,698,0],[653,0,699,0],[654,0,700,0],[655,0,701,0],[656,0,702,0],[657,0,703,0],[658,0,704,0],[659,0,705,0],[660,0,706,0],[661,0,707,0],[662,0,708,0],[663,0,709,0],[664,0,710,0],[665,0,711,0],[666,0,712,0],[667,0,713,0],[668,0,714,0],[669,0,715,0],[670,2,697,0,"exports"],[670,9,697,0],[670,10,697,0,"SocketWithUpgrade"],[670,27,697,0],[670,30,697,0,"SocketWithUpgrade"],[670,47,697,0],[671,2,716,7],[671,8,716,13,"Socket"],[671,14,716,19],[671,23,716,28,"SocketWithUpgrade"],[671,40,716,45],[671,41,716,46],[672,4,717,4,"constructor"],[672,15,717,15,"constructor"],[672,16,717,16,"uri"],[672,19,717,19],[672,21,717,21,"opts"],[672,25,717,25],[672,28,717,28],[672,29,717,29],[672,30,717,30],[672,32,717,32],[673,6,718,8],[673,12,718,14,"o"],[673,13,718,15],[673,16,718,18],[673,23,718,25,"uri"],[673,26,718,28],[673,31,718,33],[673,39,718,41],[673,42,718,44,"uri"],[673,45,718,47],[673,48,718,50,"opts"],[673,52,718,54],[674,6,719,8],[674,10,719,12],[674,11,719,13,"o"],[674,12,719,14],[674,13,719,15,"transports"],[674,23,719,25],[674,27,720,13,"o"],[674,28,720,14],[674,29,720,15,"transports"],[674,39,720,25],[674,43,720,29],[674,50,720,36,"o"],[674,51,720,37],[674,52,720,38,"transports"],[674,62,720,48],[674,63,720,49],[674,64,720,50],[674,65,720,51],[674,70,720,56],[674,78,720,65],[674,80,720,67],[675,8,721,12,"o"],[675,9,721,13],[675,10,721,14,"transports"],[675,20,721,24],[675,23,721,27],[675,24,721,28,"o"],[675,25,721,29],[675,26,721,30,"transports"],[675,36,721,40],[675,40,721,44],[675,41,721,45],[675,50,721,54],[675,52,721,56],[675,63,721,67],[675,65,721,69],[675,79,721,83],[675,80,721,84],[675,82,722,17,"map"],[675,85,722,20],[675,86,722,22,"transportName"],[675,99,722,35],[675,103,722,40,"DEFAULT_TRANSPORTS"],[675,120,722,58],[675,121,722,59,"transportName"],[675,134,722,72],[675,135,722,73],[675,136,722,74],[675,137,723,17,"filter"],[675,143,723,23],[675,144,723,25,"t"],[675,145,723,26],[675,149,723,31],[675,150,723,32],[675,151,723,33,"t"],[675,152,723,34],[675,153,723,35],[676,6,724,8],[677,6,725,8],[677,11,725,13],[677,12,725,14,"uri"],[677,15,725,17],[677,17,725,19,"o"],[677,18,725,20],[677,19,725,21],[678,4,726,4],[679,2,727,0],[680,2,727,1,"exports"],[680,9,727,1],[680,10,727,1,"Socket"],[680,16,727,1],[680,19,727,1,"Socket"],[680,25,727,1],[681,0,727,1],[681,3]],"functionMap":{"names":["<global>","addEventListener$argument_1","OFFLINE_EVENT_LISTENERS.forEach$argument_0","SocketWithoutUpgrade","SocketWithoutUpgrade#constructor","opts.transports.forEach$argument_0","_beforeunloadEventListener","_offlineEventListener","SocketWithoutUpgrade#createTransport","SocketWithoutUpgrade#_open","setTimeoutFn$argument_0","SocketWithoutUpgrade#setTransport","transport.on.on.on.on$argument_1","SocketWithoutUpgrade#onOpen","SocketWithoutUpgrade#_onPacket","SocketWithoutUpgrade#onHandshake","SocketWithoutUpgrade#_resetPingTimeout","SocketWithoutUpgrade#_onDrain","SocketWithoutUpgrade#flush","SocketWithoutUpgrade#_getWritablePackets","SocketWithoutUpgrade#_hasPingExpired","nextTick$argument_0","SocketWithoutUpgrade#write","SocketWithoutUpgrade#send","SocketWithoutUpgrade#_sendPacket","SocketWithoutUpgrade#close","close","cleanupAndClose","waitForUpgrade","once$argument_1","SocketWithoutUpgrade#_onError","SocketWithoutUpgrade#_onClose","SocketWithUpgrade","SocketWithUpgrade#constructor","SocketWithUpgrade#onOpen","SocketWithUpgrade#_probe","onTransportOpen","transport.once$argument_1","transport.pause$argument_0","freezeTransport","onerror","onTransportClose","onclose","onupgrade","cleanup","SocketWithUpgrade#onHandshake","SocketWithUpgrade#_filterUpgrades","Socket","Socket#constructor","map$argument_0","map.filter$argument_0"],"mappings":"AAA;gCCa;wCCC,wBD;KDC;OGyB;ICO;gCCkD;SDI;kDE2B;iBFM;6CGI;iBHI;KDQ;IKQ;KLiB;IMM;8BCG;aDE;KNY;IQM;yBCW,oDD;KRC;IUM;KVM;IWM;KX+B;IYO;KZY;IaM;mDNI;SME;KbI;IcM;KdY;IeM;KfY;IgBO;KhBmB;kBiBU;qBCM;aDE;KjBG;ImBS;KnBG;IoBS;KpBG;IqBU;KrBwB;IsBI;sBCC;SDG;gCEC;SFI;+BGC;SHI;mCII;iBJO;KtBU;I2BM;K3BU;I4BM;K5BkC;CHC;OgCyB;ICC;KDG;IEC;KFO;IGO;gCCI;qCCI;yCCU;qBDY;aDQ;SDC;QIC;SJQ;wBKE;SLM;QMC;SNE;QOE;SPE;QQE;SRI;wBSE;STM;8BzBS;ayBI;KHK;IaC;KbG;IcO;KdO;ChCC;O+CoB;ICC;qBCK,oDD;wBEC,UF;KDG;C/CC"}},"type":"js/module"}]}