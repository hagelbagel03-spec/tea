{"dependencies":[{"name":"./encodePacket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":71,"index":71}}],"key":"l0XJith170aiQBKbDxvaf5HJzjc=","exportNames":["*"]}},{"name":"./decodePacket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":72},"end":{"line":2,"column":49,"index":121}}],"key":"k2ePvc7PPyN9sm4h8mrZRv0s/Hg=","exportNames":["*"]}},{"name":"./commons.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":122},"end":{"line":3,"column":45,"index":167}}],"key":"glGFVKq6JnHqcEVNii1WndfU66Y=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createPacketDecoderStream = createPacketDecoderStream;\n  exports.createPacketEncoderStream = createPacketEncoderStream;\n  Object.defineProperty(exports, \"decodePacket\", {\n    enumerable: true,\n    get: function () {\n      return _decodePacket.decodePacket;\n    }\n  });\n  exports.decodePayload = void 0;\n  Object.defineProperty(exports, \"encodePacket\", {\n    enumerable: true,\n    get: function () {\n      return _encodePacket.encodePacket;\n    }\n  });\n  exports.protocol = exports.encodePayload = void 0;\n  var _encodePacket = require(_dependencyMap[0], \"./encodePacket.js\");\n  var _decodePacket = require(_dependencyMap[1], \"./decodePacket.js\");\n  var _commons = require(_dependencyMap[2], \"./commons.js\");\n  const SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n  const encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n      // force base64 encoding for binary packets\n      (0, _encodePacket.encodePacket)(packet, false, encodedPacket => {\n        encodedPackets[i] = encodedPacket;\n        if (++count === length) {\n          callback(encodedPackets.join(SEPARATOR));\n        }\n      });\n    });\n  };\n  exports.encodePayload = encodePayload;\n  const decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n      const decodedPacket = (0, _decodePacket.decodePacket)(encodedPackets[i], binaryType);\n      packets.push(decodedPacket);\n      if (decodedPacket.type === \"error\") {\n        break;\n      }\n    }\n    return packets;\n  };\n  exports.decodePayload = decodePayload;\n  function createPacketEncoderStream() {\n    return new TransformStream({\n      transform(packet, controller) {\n        (0, _encodePacket.encodePacketToBinary)(packet, encodedPacket => {\n          const payloadLength = encodedPacket.length;\n          let header;\n          // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n          if (payloadLength < 126) {\n            header = new Uint8Array(1);\n            new DataView(header.buffer).setUint8(0, payloadLength);\n          } else if (payloadLength < 65536) {\n            header = new Uint8Array(3);\n            const view = new DataView(header.buffer);\n            view.setUint8(0, 126);\n            view.setUint16(1, payloadLength);\n          } else {\n            header = new Uint8Array(9);\n            const view = new DataView(header.buffer);\n            view.setUint8(0, 127);\n            view.setBigUint64(1, BigInt(payloadLength));\n          }\n          // first bit indicates whether the payload is plain text (0) or binary (1)\n          if (packet.data && typeof packet.data !== \"string\") {\n            header[0] |= 0x80;\n          }\n          controller.enqueue(header);\n          controller.enqueue(encodedPacket);\n        });\n      }\n    });\n  }\n  let TEXT_DECODER;\n  function totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n  }\n  function concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n      return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n      buffer[i] = chunks[0][j++];\n      if (j === chunks[0].length) {\n        chunks.shift();\n        j = 0;\n      }\n    }\n    if (chunks.length && j < chunks[0].length) {\n      chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n  }\n  function createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n      TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* State.READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n      transform(chunk, controller) {\n        chunks.push(chunk);\n        while (true) {\n          if (state === 0 /* State.READ_HEADER */) {\n            if (totalLength(chunks) < 1) {\n              break;\n            }\n            const header = concatChunks(chunks, 1);\n            isBinary = (header[0] & 0x80) === 0x80;\n            expectedLength = header[0] & 0x7f;\n            if (expectedLength < 126) {\n              state = 3 /* State.READ_PAYLOAD */;\n            } else if (expectedLength === 126) {\n              state = 1 /* State.READ_EXTENDED_LENGTH_16 */;\n            } else {\n              state = 2 /* State.READ_EXTENDED_LENGTH_64 */;\n            }\n          } else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {\n            if (totalLength(chunks) < 2) {\n              break;\n            }\n            const headerArray = concatChunks(chunks, 2);\n            expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n            state = 3 /* State.READ_PAYLOAD */;\n          } else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {\n            if (totalLength(chunks) < 8) {\n              break;\n            }\n            const headerArray = concatChunks(chunks, 8);\n            const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n            const n = view.getUint32(0);\n            if (n > Math.pow(2, 53 - 32) - 1) {\n              // the maximum safe integer in JavaScript is 2^53 - 1\n              controller.enqueue(_commons.ERROR_PACKET);\n              break;\n            }\n            expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n            state = 3 /* State.READ_PAYLOAD */;\n          } else {\n            if (totalLength(chunks) < expectedLength) {\n              break;\n            }\n            const data = concatChunks(chunks, expectedLength);\n            controller.enqueue((0, _decodePacket.decodePacket)(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n            state = 0 /* State.READ_HEADER */;\n          }\n          if (expectedLength === 0 || expectedLength > maxPayload) {\n            controller.enqueue(_commons.ERROR_PACKET);\n            break;\n          }\n        }\n      }\n    });\n  }\n  const protocol = exports.protocol = 4;\n});","lineCount":171,"map":[[21,2,1,0],[21,6,1,0,"_encodePacket"],[21,19,1,0],[21,22,1,0,"require"],[21,29,1,0],[21,30,1,0,"_dependencyMap"],[21,44,1,0],[22,2,2,0],[22,6,2,0,"_decodePacket"],[22,19,2,0],[22,22,2,0,"require"],[22,29,2,0],[22,30,2,0,"_dependencyMap"],[22,44,2,0],[23,2,3,0],[23,6,3,0,"_commons"],[23,14,3,0],[23,17,3,0,"require"],[23,24,3,0],[23,25,3,0,"_dependencyMap"],[23,39,3,0],[24,2,4,0],[24,8,4,6,"SEPARATOR"],[24,17,4,15],[24,20,4,18,"String"],[24,26,4,24],[24,27,4,25,"fromCharCode"],[24,39,4,37],[24,40,4,38],[24,42,4,40],[24,43,4,41],[24,44,4,42],[24,45,4,43],[25,2,5,0],[25,8,5,6,"encodePayload"],[25,21,5,19],[25,24,5,22,"encodePayload"],[25,25,5,23,"packets"],[25,32,5,30],[25,34,5,32,"callback"],[25,42,5,40],[25,47,5,45],[26,4,6,4],[27,4,7,4],[27,10,7,10,"length"],[27,16,7,16],[27,19,7,19,"packets"],[27,26,7,26],[27,27,7,27,"length"],[27,33,7,33],[28,4,8,4],[28,10,8,10,"encodedPackets"],[28,24,8,24],[28,27,8,27],[28,31,8,31,"Array"],[28,36,8,36],[28,37,8,37,"length"],[28,43,8,43],[28,44,8,44],[29,4,9,4],[29,8,9,8,"count"],[29,13,9,13],[29,16,9,16],[29,17,9,17],[30,4,10,4,"packets"],[30,11,10,11],[30,12,10,12,"forEach"],[30,19,10,19],[30,20,10,20],[30,21,10,21,"packet"],[30,27,10,27],[30,29,10,29,"i"],[30,30,10,30],[30,35,10,35],[31,6,11,8],[32,6,12,8],[32,10,12,8,"encodePacket"],[32,36,12,20],[32,38,12,21,"packet"],[32,44,12,27],[32,46,12,29],[32,51,12,34],[32,53,12,37,"encodedPacket"],[32,66,12,50],[32,70,12,55],[33,8,13,12,"encodedPackets"],[33,22,13,26],[33,23,13,27,"i"],[33,24,13,28],[33,25,13,29],[33,28,13,32,"encodedPacket"],[33,41,13,45],[34,8,14,12],[34,12,14,16],[34,14,14,18,"count"],[34,19,14,23],[34,24,14,28,"length"],[34,30,14,34],[34,32,14,36],[35,10,15,16,"callback"],[35,18,15,24],[35,19,15,25,"encodedPackets"],[35,33,15,39],[35,34,15,40,"join"],[35,38,15,44],[35,39,15,45,"SEPARATOR"],[35,48,15,54],[35,49,15,55],[35,50,15,56],[36,8,16,12],[37,6,17,8],[37,7,17,9],[37,8,17,10],[38,4,18,4],[38,5,18,5],[38,6,18,6],[39,2,19,0],[39,3,19,1],[40,2,19,2,"exports"],[40,9,19,2],[40,10,19,2,"encodePayload"],[40,23,19,2],[40,26,19,2,"encodePayload"],[40,39,19,2],[41,2,20,0],[41,8,20,6,"decodePayload"],[41,21,20,19],[41,24,20,22,"decodePayload"],[41,25,20,23,"encodedPayload"],[41,39,20,37],[41,41,20,39,"binaryType"],[41,51,20,49],[41,56,20,54],[42,4,21,4],[42,10,21,10,"encodedPackets"],[42,24,21,24],[42,27,21,27,"encodedPayload"],[42,41,21,41],[42,42,21,42,"split"],[42,47,21,47],[42,48,21,48,"SEPARATOR"],[42,57,21,57],[42,58,21,58],[43,4,22,4],[43,10,22,10,"packets"],[43,17,22,17],[43,20,22,20],[43,22,22,22],[44,4,23,4],[44,9,23,9],[44,13,23,13,"i"],[44,14,23,14],[44,17,23,17],[44,18,23,18],[44,20,23,20,"i"],[44,21,23,21],[44,24,23,24,"encodedPackets"],[44,38,23,38],[44,39,23,39,"length"],[44,45,23,45],[44,47,23,47,"i"],[44,48,23,48],[44,50,23,50],[44,52,23,52],[45,6,24,8],[45,12,24,14,"decodedPacket"],[45,25,24,27],[45,28,24,30],[45,32,24,30,"decodePacket"],[45,58,24,42],[45,60,24,43,"encodedPackets"],[45,74,24,57],[45,75,24,58,"i"],[45,76,24,59],[45,77,24,60],[45,79,24,62,"binaryType"],[45,89,24,72],[45,90,24,73],[46,6,25,8,"packets"],[46,13,25,15],[46,14,25,16,"push"],[46,18,25,20],[46,19,25,21,"decodedPacket"],[46,32,25,34],[46,33,25,35],[47,6,26,8],[47,10,26,12,"decodedPacket"],[47,23,26,25],[47,24,26,26,"type"],[47,28,26,30],[47,33,26,35],[47,40,26,42],[47,42,26,44],[48,8,27,12],[49,6,28,8],[50,4,29,4],[51,4,30,4],[51,11,30,11,"packets"],[51,18,30,18],[52,2,31,0],[52,3,31,1],[53,2,31,2,"exports"],[53,9,31,2],[53,10,31,2,"decodePayload"],[53,23,31,2],[53,26,31,2,"decodePayload"],[53,39,31,2],[54,2,32,7],[54,11,32,16,"createPacketEncoderStream"],[54,36,32,41,"createPacketEncoderStream"],[54,37,32,41],[54,39,32,44],[55,4,33,4],[55,11,33,11],[55,15,33,15,"TransformStream"],[55,30,33,30],[55,31,33,31],[56,6,34,8,"transform"],[56,15,34,17,"transform"],[56,16,34,18,"packet"],[56,22,34,24],[56,24,34,26,"controller"],[56,34,34,36],[56,36,34,38],[57,8,35,12],[57,12,35,12,"encodePacketToBinary"],[57,46,35,32],[57,48,35,33,"packet"],[57,54,35,39],[57,56,35,42,"encodedPacket"],[57,69,35,55],[57,73,35,60],[58,10,36,16],[58,16,36,22,"payloadLength"],[58,29,36,35],[58,32,36,38,"encodedPacket"],[58,45,36,51],[58,46,36,52,"length"],[58,52,36,58],[59,10,37,16],[59,14,37,20,"header"],[59,20,37,26],[60,10,38,16],[61,10,39,16],[61,14,39,20,"payloadLength"],[61,27,39,33],[61,30,39,36],[61,33,39,39],[61,35,39,41],[62,12,40,20,"header"],[62,18,40,26],[62,21,40,29],[62,25,40,33,"Uint8Array"],[62,35,40,43],[62,36,40,44],[62,37,40,45],[62,38,40,46],[63,12,41,20],[63,16,41,24,"DataView"],[63,24,41,32],[63,25,41,33,"header"],[63,31,41,39],[63,32,41,40,"buffer"],[63,38,41,46],[63,39,41,47],[63,40,41,48,"setUint8"],[63,48,41,56],[63,49,41,57],[63,50,41,58],[63,52,41,60,"payloadLength"],[63,65,41,73],[63,66,41,74],[64,10,42,16],[64,11,42,17],[64,17,43,21],[64,21,43,25,"payloadLength"],[64,34,43,38],[64,37,43,41],[64,42,43,46],[64,44,43,48],[65,12,44,20,"header"],[65,18,44,26],[65,21,44,29],[65,25,44,33,"Uint8Array"],[65,35,44,43],[65,36,44,44],[65,37,44,45],[65,38,44,46],[66,12,45,20],[66,18,45,26,"view"],[66,22,45,30],[66,25,45,33],[66,29,45,37,"DataView"],[66,37,45,45],[66,38,45,46,"header"],[66,44,45,52],[66,45,45,53,"buffer"],[66,51,45,59],[66,52,45,60],[67,12,46,20,"view"],[67,16,46,24],[67,17,46,25,"setUint8"],[67,25,46,33],[67,26,46,34],[67,27,46,35],[67,29,46,37],[67,32,46,40],[67,33,46,41],[68,12,47,20,"view"],[68,16,47,24],[68,17,47,25,"setUint16"],[68,26,47,34],[68,27,47,35],[68,28,47,36],[68,30,47,38,"payloadLength"],[68,43,47,51],[68,44,47,52],[69,10,48,16],[69,11,48,17],[69,17,49,21],[70,12,50,20,"header"],[70,18,50,26],[70,21,50,29],[70,25,50,33,"Uint8Array"],[70,35,50,43],[70,36,50,44],[70,37,50,45],[70,38,50,46],[71,12,51,20],[71,18,51,26,"view"],[71,22,51,30],[71,25,51,33],[71,29,51,37,"DataView"],[71,37,51,45],[71,38,51,46,"header"],[71,44,51,52],[71,45,51,53,"buffer"],[71,51,51,59],[71,52,51,60],[72,12,52,20,"view"],[72,16,52,24],[72,17,52,25,"setUint8"],[72,25,52,33],[72,26,52,34],[72,27,52,35],[72,29,52,37],[72,32,52,40],[72,33,52,41],[73,12,53,20,"view"],[73,16,53,24],[73,17,53,25,"setBigUint64"],[73,29,53,37],[73,30,53,38],[73,31,53,39],[73,33,53,41,"BigInt"],[73,39,53,47],[73,40,53,48,"payloadLength"],[73,53,53,61],[73,54,53,62],[73,55,53,63],[74,10,54,16],[75,10,55,16],[76,10,56,16],[76,14,56,20,"packet"],[76,20,56,26],[76,21,56,27,"data"],[76,25,56,31],[76,29,56,35],[76,36,56,42,"packet"],[76,42,56,48],[76,43,56,49,"data"],[76,47,56,53],[76,52,56,58],[76,60,56,66],[76,62,56,68],[77,12,57,20,"header"],[77,18,57,26],[77,19,57,27],[77,20,57,28],[77,21,57,29],[77,25,57,33],[77,29,57,37],[78,10,58,16],[79,10,59,16,"controller"],[79,20,59,26],[79,21,59,27,"enqueue"],[79,28,59,34],[79,29,59,35,"header"],[79,35,59,41],[79,36,59,42],[80,10,60,16,"controller"],[80,20,60,26],[80,21,60,27,"enqueue"],[80,28,60,34],[80,29,60,35,"encodedPacket"],[80,42,60,48],[80,43,60,49],[81,8,61,12],[81,9,61,13],[81,10,61,14],[82,6,62,8],[83,4,63,4],[83,5,63,5],[83,6,63,6],[84,2,64,0],[85,2,65,0],[85,6,65,4,"TEXT_DECODER"],[85,18,65,16],[86,2,66,0],[86,11,66,9,"totalLength"],[86,22,66,20,"totalLength"],[86,23,66,21,"chunks"],[86,29,66,27],[86,31,66,29],[87,4,67,4],[87,11,67,11,"chunks"],[87,17,67,17],[87,18,67,18,"reduce"],[87,24,67,24],[87,25,67,25],[87,26,67,26,"acc"],[87,29,67,29],[87,31,67,31,"chunk"],[87,36,67,36],[87,41,67,41,"acc"],[87,44,67,44],[87,47,67,47,"chunk"],[87,52,67,52],[87,53,67,53,"length"],[87,59,67,59],[87,61,67,61],[87,62,67,62],[87,63,67,63],[88,2,68,0],[89,2,69,0],[89,11,69,9,"concatChunks"],[89,23,69,21,"concatChunks"],[89,24,69,22,"chunks"],[89,30,69,28],[89,32,69,30,"size"],[89,36,69,34],[89,38,69,36],[90,4,70,4],[90,8,70,8,"chunks"],[90,14,70,14],[90,15,70,15],[90,16,70,16],[90,17,70,17],[90,18,70,18,"length"],[90,24,70,24],[90,29,70,29,"size"],[90,33,70,33],[90,35,70,35],[91,6,71,8],[91,13,71,15,"chunks"],[91,19,71,21],[91,20,71,22,"shift"],[91,25,71,27],[91,26,71,28],[91,27,71,29],[92,4,72,4],[93,4,73,4],[93,10,73,10,"buffer"],[93,16,73,16],[93,19,73,19],[93,23,73,23,"Uint8Array"],[93,33,73,33],[93,34,73,34,"size"],[93,38,73,38],[93,39,73,39],[94,4,74,4],[94,8,74,8,"j"],[94,9,74,9],[94,12,74,12],[94,13,74,13],[95,4,75,4],[95,9,75,9],[95,13,75,13,"i"],[95,14,75,14],[95,17,75,17],[95,18,75,18],[95,20,75,20,"i"],[95,21,75,21],[95,24,75,24,"size"],[95,28,75,28],[95,30,75,30,"i"],[95,31,75,31],[95,33,75,33],[95,35,75,35],[96,6,76,8,"buffer"],[96,12,76,14],[96,13,76,15,"i"],[96,14,76,16],[96,15,76,17],[96,18,76,20,"chunks"],[96,24,76,26],[96,25,76,27],[96,26,76,28],[96,27,76,29],[96,28,76,30,"j"],[96,29,76,31],[96,31,76,33],[96,32,76,34],[97,6,77,8],[97,10,77,12,"j"],[97,11,77,13],[97,16,77,18,"chunks"],[97,22,77,24],[97,23,77,25],[97,24,77,26],[97,25,77,27],[97,26,77,28,"length"],[97,32,77,34],[97,34,77,36],[98,8,78,12,"chunks"],[98,14,78,18],[98,15,78,19,"shift"],[98,20,78,24],[98,21,78,25],[98,22,78,26],[99,8,79,12,"j"],[99,9,79,13],[99,12,79,16],[99,13,79,17],[100,6,80,8],[101,4,81,4],[102,4,82,4],[102,8,82,8,"chunks"],[102,14,82,14],[102,15,82,15,"length"],[102,21,82,21],[102,25,82,25,"j"],[102,26,82,26],[102,29,82,29,"chunks"],[102,35,82,35],[102,36,82,36],[102,37,82,37],[102,38,82,38],[102,39,82,39,"length"],[102,45,82,45],[102,47,82,47],[103,6,83,8,"chunks"],[103,12,83,14],[103,13,83,15],[103,14,83,16],[103,15,83,17],[103,18,83,20,"chunks"],[103,24,83,26],[103,25,83,27],[103,26,83,28],[103,27,83,29],[103,28,83,30,"slice"],[103,33,83,35],[103,34,83,36,"j"],[103,35,83,37],[103,36,83,38],[104,4,84,4],[105,4,85,4],[105,11,85,11,"buffer"],[105,17,85,17],[106,2,86,0],[107,2,87,7],[107,11,87,16,"createPacketDecoderStream"],[107,36,87,41,"createPacketDecoderStream"],[107,37,87,42,"maxPayload"],[107,47,87,52],[107,49,87,54,"binaryType"],[107,59,87,64],[107,61,87,66],[108,4,88,4],[108,8,88,8],[108,9,88,9,"TEXT_DECODER"],[108,21,88,21],[108,23,88,23],[109,6,89,8,"TEXT_DECODER"],[109,18,89,20],[109,21,89,23],[109,25,89,27,"TextDecoder"],[109,36,89,38],[109,37,89,39],[109,38,89,40],[110,4,90,4],[111,4,91,4],[111,10,91,10,"chunks"],[111,16,91,16],[111,19,91,19],[111,21,91,21],[112,4,92,4],[112,8,92,8,"state"],[112,13,92,13],[112,16,92,16],[112,17,92,17],[112,18,92,18],[113,4,93,4],[113,8,93,8,"expectedLength"],[113,22,93,22],[113,25,93,25],[113,26,93,26],[113,27,93,27],[114,4,94,4],[114,8,94,8,"isBinary"],[114,16,94,16],[114,19,94,19],[114,24,94,24],[115,4,95,4],[115,11,95,11],[115,15,95,15,"TransformStream"],[115,30,95,30],[115,31,95,31],[116,6,96,8,"transform"],[116,15,96,17,"transform"],[116,16,96,18,"chunk"],[116,21,96,23],[116,23,96,25,"controller"],[116,33,96,35],[116,35,96,37],[117,8,97,12,"chunks"],[117,14,97,18],[117,15,97,19,"push"],[117,19,97,23],[117,20,97,24,"chunk"],[117,25,97,29],[117,26,97,30],[118,8,98,12],[118,15,98,19],[118,19,98,23],[118,21,98,25],[119,10,99,16],[119,14,99,20,"state"],[119,19,99,25],[119,24,99,30],[119,25,99,31],[119,26,99,32],[119,51,99,57],[120,12,100,20],[120,16,100,24,"totalLength"],[120,27,100,35],[120,28,100,36,"chunks"],[120,34,100,42],[120,35,100,43],[120,38,100,46],[120,39,100,47],[120,41,100,49],[121,14,101,24],[122,12,102,20],[123,12,103,20],[123,18,103,26,"header"],[123,24,103,32],[123,27,103,35,"concatChunks"],[123,39,103,47],[123,40,103,48,"chunks"],[123,46,103,54],[123,48,103,56],[123,49,103,57],[123,50,103,58],[124,12,104,20,"isBinary"],[124,20,104,28],[124,23,104,31],[124,24,104,32,"header"],[124,30,104,38],[124,31,104,39],[124,32,104,40],[124,33,104,41],[124,36,104,44],[124,40,104,48],[124,46,104,54],[124,50,104,58],[125,12,105,20,"expectedLength"],[125,26,105,34],[125,29,105,37,"header"],[125,35,105,43],[125,36,105,44],[125,37,105,45],[125,38,105,46],[125,41,105,49],[125,45,105,53],[126,12,106,20],[126,16,106,24,"expectedLength"],[126,30,106,38],[126,33,106,41],[126,36,106,44],[126,38,106,46],[127,14,107,24,"state"],[127,19,107,29],[127,22,107,32],[127,23,107,33],[127,24,107,34],[128,12,108,20],[128,13,108,21],[128,19,109,25],[128,23,109,29,"expectedLength"],[128,37,109,43],[128,42,109,48],[128,45,109,51],[128,47,109,53],[129,14,110,24,"state"],[129,19,110,29],[129,22,110,32],[129,23,110,33],[129,24,110,34],[130,12,111,20],[130,13,111,21],[130,19,112,25],[131,14,113,24,"state"],[131,19,113,29],[131,22,113,32],[131,23,113,33],[131,24,113,34],[132,12,114,20],[133,10,115,16],[133,11,115,17],[133,17,116,21],[133,21,116,25,"state"],[133,26,116,30],[133,31,116,35],[133,32,116,36],[133,33,116,37],[133,70,116,74],[134,12,117,20],[134,16,117,24,"totalLength"],[134,27,117,35],[134,28,117,36,"chunks"],[134,34,117,42],[134,35,117,43],[134,38,117,46],[134,39,117,47],[134,41,117,49],[135,14,118,24],[136,12,119,20],[137,12,120,20],[137,18,120,26,"headerArray"],[137,29,120,37],[137,32,120,40,"concatChunks"],[137,44,120,52],[137,45,120,53,"chunks"],[137,51,120,59],[137,53,120,61],[137,54,120,62],[137,55,120,63],[138,12,121,20,"expectedLength"],[138,26,121,34],[138,29,121,37],[138,33,121,41,"DataView"],[138,41,121,49],[138,42,121,50,"headerArray"],[138,53,121,61],[138,54,121,62,"buffer"],[138,60,121,68],[138,62,121,70,"headerArray"],[138,73,121,81],[138,74,121,82,"byteOffset"],[138,84,121,92],[138,86,121,94,"headerArray"],[138,97,121,105],[138,98,121,106,"length"],[138,104,121,112],[138,105,121,113],[138,106,121,114,"getUint16"],[138,115,121,123],[138,116,121,124],[138,117,121,125],[138,118,121,126],[139,12,122,20,"state"],[139,17,122,25],[139,20,122,28],[139,21,122,29],[139,22,122,30],[140,10,123,16],[140,11,123,17],[140,17,124,21],[140,21,124,25,"state"],[140,26,124,30],[140,31,124,35],[140,32,124,36],[140,33,124,37],[140,70,124,74],[141,12,125,20],[141,16,125,24,"totalLength"],[141,27,125,35],[141,28,125,36,"chunks"],[141,34,125,42],[141,35,125,43],[141,38,125,46],[141,39,125,47],[141,41,125,49],[142,14,126,24],[143,12,127,20],[144,12,128,20],[144,18,128,26,"headerArray"],[144,29,128,37],[144,32,128,40,"concatChunks"],[144,44,128,52],[144,45,128,53,"chunks"],[144,51,128,59],[144,53,128,61],[144,54,128,62],[144,55,128,63],[145,12,129,20],[145,18,129,26,"view"],[145,22,129,30],[145,25,129,33],[145,29,129,37,"DataView"],[145,37,129,45],[145,38,129,46,"headerArray"],[145,49,129,57],[145,50,129,58,"buffer"],[145,56,129,64],[145,58,129,66,"headerArray"],[145,69,129,77],[145,70,129,78,"byteOffset"],[145,80,129,88],[145,82,129,90,"headerArray"],[145,93,129,101],[145,94,129,102,"length"],[145,100,129,108],[145,101,129,109],[146,12,130,20],[146,18,130,26,"n"],[146,19,130,27],[146,22,130,30,"view"],[146,26,130,34],[146,27,130,35,"getUint32"],[146,36,130,44],[146,37,130,45],[146,38,130,46],[146,39,130,47],[147,12,131,20],[147,16,131,24,"n"],[147,17,131,25],[147,20,131,28,"Math"],[147,24,131,32],[147,25,131,33,"pow"],[147,28,131,36],[147,29,131,37],[147,30,131,38],[147,32,131,40],[147,34,131,42],[147,37,131,45],[147,39,131,47],[147,40,131,48],[147,43,131,51],[147,44,131,52],[147,46,131,54],[148,14,132,24],[149,14,133,24,"controller"],[149,24,133,34],[149,25,133,35,"enqueue"],[149,32,133,42],[149,33,133,43,"ERROR_PACKET"],[149,54,133,55],[149,55,133,56],[150,14,134,24],[151,12,135,20],[152,12,136,20,"expectedLength"],[152,26,136,34],[152,29,136,37,"n"],[152,30,136,38],[152,33,136,41,"Math"],[152,37,136,45],[152,38,136,46,"pow"],[152,41,136,49],[152,42,136,50],[152,43,136,51],[152,45,136,53],[152,47,136,55],[152,48,136,56],[152,51,136,59,"view"],[152,55,136,63],[152,56,136,64,"getUint32"],[152,65,136,73],[152,66,136,74],[152,67,136,75],[152,68,136,76],[153,12,137,20,"state"],[153,17,137,25],[153,20,137,28],[153,21,137,29],[153,22,137,30],[154,10,138,16],[154,11,138,17],[154,17,139,21],[155,12,140,20],[155,16,140,24,"totalLength"],[155,27,140,35],[155,28,140,36,"chunks"],[155,34,140,42],[155,35,140,43],[155,38,140,46,"expectedLength"],[155,52,140,60],[155,54,140,62],[156,14,141,24],[157,12,142,20],[158,12,143,20],[158,18,143,26,"data"],[158,22,143,30],[158,25,143,33,"concatChunks"],[158,37,143,45],[158,38,143,46,"chunks"],[158,44,143,52],[158,46,143,54,"expectedLength"],[158,60,143,68],[158,61,143,69],[159,12,144,20,"controller"],[159,22,144,30],[159,23,144,31,"enqueue"],[159,30,144,38],[159,31,144,39],[159,35,144,39,"decodePacket"],[159,61,144,51],[159,63,144,52,"isBinary"],[159,71,144,60],[159,74,144,63,"data"],[159,78,144,67],[159,81,144,70,"TEXT_DECODER"],[159,93,144,82],[159,94,144,83,"decode"],[159,100,144,89],[159,101,144,90,"data"],[159,105,144,94],[159,106,144,95],[159,108,144,97,"binaryType"],[159,118,144,107],[159,119,144,108],[159,120,144,109],[160,12,145,20,"state"],[160,17,145,25],[160,20,145,28],[160,21,145,29],[160,22,145,30],[161,10,146,16],[162,10,147,16],[162,14,147,20,"expectedLength"],[162,28,147,34],[162,33,147,39],[162,34,147,40],[162,38,147,44,"expectedLength"],[162,52,147,58],[162,55,147,61,"maxPayload"],[162,65,147,71],[162,67,147,73],[163,12,148,20,"controller"],[163,22,148,30],[163,23,148,31,"enqueue"],[163,30,148,38],[163,31,148,39,"ERROR_PACKET"],[163,52,148,51],[163,53,148,52],[164,12,149,20],[165,10,150,16],[166,8,151,12],[167,6,152,8],[168,4,153,4],[168,5,153,5],[168,6,153,6],[169,2,154,0],[170,2,155,7],[170,8,155,13,"protocol"],[170,16,155,21],[170,19,155,21,"exports"],[170,26,155,21],[170,27,155,21,"protocol"],[170,35,155,21],[170,38,155,24],[170,39,155,25],[171,0,155,26],[171,3]],"functionMap":{"names":["<global>","encodePayload","packets.forEach$argument_0","encodePacket$argument_2","decodePayload","createPacketEncoderStream","TransformStream$argument_0.transform","encodePacketToBinary$argument_1","totalLength","chunks.reduce$argument_0","concatChunks","createPacketDecoderStream"],"mappings":"AAA;sBCI;oBCK;oCCE;SDK;KDC;CDC;sBIC;CJW;OKC;QCE;yCCC;aD0B;SDC;CLE;AQE;yBCC,kCD;CRC;AUC;CViB;OWC;QLS;SKwD;CXE"}},"type":"js/module"}]}